
Slave_2_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002cb8  00002d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800068  00800068  00002d54  2**0
                  ALLOC
  3 .stab         00002628  00000000  00000000  00002d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e8  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000875d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__vector_6>
      1c:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__vector_7>
      20:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__vector_8>
      24:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__vector_9>
      28:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_10>
      2c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 37       	cpi	r26, 0x7E	; 126
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 eb       	ldi	r30, 0xB8	; 184
      78:	fc e2       	ldi	r31, 0x2C	; 44
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <main>
      8a:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_DIO_voidSetPinMode>:
/** ======================= TWI Functions Implementation ==================== */
/*
 * To set the pin mode: DDRx = (0) -> Input | (1) -> Output
 */
void MCAL_DIO_voidSetPinMode(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_u8PINn, DIOMode_t Copy_DIOMode_tMode)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MCAL_DIO_voidSetPinMode+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <MCAL_DIO_voidSetPinMode+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_DIOPort_tDIOx < 4)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <MCAL_DIO_voidSetPinMode+0x1c>
     b60:	81 c1       	rjmp	.+770    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
    {
	if(Copy_u8PINn < 8)
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <MCAL_DIO_voidSetPinMode+0x24>
     b68:	7d c1       	rjmp	.+762    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
	{
	    switch(Copy_DIOPort_tDIOx)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <MCAL_DIO_voidSetPinMode+0x3a>
     b7e:	6e c0       	rjmp	.+220    	; 0xc5c <MCAL_DIO_voidSetPinMode+0x116>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <MCAL_DIO_voidSetPinMode+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <MCAL_DIO_voidSetPinMode+0x68>
     b92:	68 c1       	rjmp	.+720    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <MCAL_DIO_voidSetPinMode+0x5a>
     b9e:	b5 c0       	rjmp	.+362    	; 0xd0a <MCAL_DIO_voidSetPinMode+0x1c4>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <MCAL_DIO_voidSetPinMode+0x66>
     baa:	06 c1       	rjmp	.+524    	; 0xdb8 <MCAL_DIO_voidSetPinMode+0x272>
     bac:	5b c1       	rjmp	.+694    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
	    {
		case DIOA:			/* PORTA */
		    if(Copy_DIOMode_tMode)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 23       	and	r24, r24
     bb2:	a1 f0       	breq	.+40     	; 0xbdc <MCAL_DIO_voidSetPinMode+0x96>
		    {
		        SET_BIT(DDRA,Copy_u8PINn);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <MCAL_DIO_voidSetPinMode+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <MCAL_DIO_voidSetPinMode+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	44 c1       	rjmp	.+648    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRA,Copy_u8PINn);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <MCAL_DIO_voidSetPinMode+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <MCAL_DIO_voidSetPinMode+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	a1 f4       	brne	.+40     	; 0xc32 <MCAL_DIO_voidSetPinMode+0xec>
		        {
			    SET_BIT(PORTA,Copy_u8PINn);
     c0a:	ab e3       	ldi	r26, 0x3B	; 59
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	eb e3       	ldi	r30, 0x3B	; 59
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <MCAL_DIO_voidSetPinMode+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <MCAL_DIO_voidSetPinMode+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	19 c1       	rjmp	.+562    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
		        }
		        else
			{
			    CLR_BIT(PORTA,Copy_u8PINn);
     c32:	ab e3       	ldi	r26, 0x3B	; 59
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	eb e3       	ldi	r30, 0x3B	; 59
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <MCAL_DIO_voidSetPinMode+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <MCAL_DIO_voidSetPinMode+0x106>
     c54:	80 95       	com	r24
     c56:	84 23       	and	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	04 c1       	rjmp	.+520    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOB:			/* PORTB */
		    if(Copy_DIOMode_tMode)
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	88 23       	and	r24, r24
     c60:	a1 f0       	breq	.+40     	; 0xc8a <MCAL_DIO_voidSetPinMode+0x144>
		    {
		        SET_BIT(DDRB,Copy_u8PINn);
     c62:	a7 e3       	ldi	r26, 0x37	; 55
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <MCAL_DIO_voidSetPinMode+0x13a>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <MCAL_DIO_voidSetPinMode+0x136>
     c84:	84 2b       	or	r24, r20
     c86:	8c 93       	st	X, r24
     c88:	ed c0       	rjmp	.+474    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRB,Copy_u8PINn);
     c8a:	a7 e3       	ldi	r26, 0x37	; 55
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e7 e3       	ldi	r30, 0x37	; 55
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <MCAL_DIO_voidSetPinMode+0x162>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <MCAL_DIO_voidSetPinMode+0x15e>
     cac:	80 95       	com	r24
     cae:	84 23       	and	r24, r20
     cb0:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <MCAL_DIO_voidSetPinMode+0x19a>
			{
			    SET_BIT(PORTB,Copy_u8PINn);
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <MCAL_DIO_voidSetPinMode+0x190>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <MCAL_DIO_voidSetPinMode+0x18c>
     cda:	84 2b       	or	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	c2 c0       	rjmp	.+388    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		        else
			{
		            CLR_BIT(PORTB,Copy_u8PINn);
     ce0:	a8 e3       	ldi	r26, 0x38	; 56
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e8 e3       	ldi	r30, 0x38	; 56
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <MCAL_DIO_voidSetPinMode+0x1b8>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <MCAL_DIO_voidSetPinMode+0x1b4>
     d02:	80 95       	com	r24
     d04:	84 23       	and	r24, r20
     d06:	8c 93       	st	X, r24
     d08:	ad c0       	rjmp	.+346    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOC:			/* PORTC */
		    if(Copy_DIOMode_tMode)
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	88 23       	and	r24, r24
     d0e:	a1 f0       	breq	.+40     	; 0xd38 <MCAL_DIO_voidSetPinMode+0x1f2>
		    {
		        SET_BIT(DDRC,Copy_u8PINn);
     d10:	a4 e3       	ldi	r26, 0x34	; 52
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e4 e3       	ldi	r30, 0x34	; 52
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <MCAL_DIO_voidSetPinMode+0x1e8>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <MCAL_DIO_voidSetPinMode+0x1e4>
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	96 c0       	rjmp	.+300    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRC,Copy_u8PINn);
     d38:	a4 e3       	ldi	r26, 0x34	; 52
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e4 e3       	ldi	r30, 0x34	; 52
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <MCAL_DIO_voidSetPinMode+0x210>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <MCAL_DIO_voidSetPinMode+0x20c>
     d5a:	80 95       	com	r24
     d5c:	84 23       	and	r24, r20
     d5e:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	a1 f4       	brne	.+40     	; 0xd8e <MCAL_DIO_voidSetPinMode+0x248>
		        {
			    SET_BIT(PORTC,Copy_u8PINn);
     d66:	a5 e3       	ldi	r26, 0x35	; 53
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e5 e3       	ldi	r30, 0x35	; 53
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <MCAL_DIO_voidSetPinMode+0x23e>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <MCAL_DIO_voidSetPinMode+0x23a>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	6b c0       	rjmp	.+214    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
		        }
		        else
			{
			    CLR_BIT(PORTC,Copy_u8PINn);
     d8e:	a5 e3       	ldi	r26, 0x35	; 53
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e5 e3       	ldi	r30, 0x35	; 53
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <MCAL_DIO_voidSetPinMode+0x266>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <MCAL_DIO_voidSetPinMode+0x262>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	56 c0       	rjmp	.+172    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOD:			/* PORTD */
		    if(Copy_DIOMode_tMode)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	88 23       	and	r24, r24
     dbc:	a1 f0       	breq	.+40     	; 0xde6 <MCAL_DIO_voidSetPinMode+0x2a0>
		    {
		        SET_BIT(DDRD,Copy_u8PINn);
     dbe:	a1 e3       	ldi	r26, 0x31	; 49
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e1 e3       	ldi	r30, 0x31	; 49
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <MCAL_DIO_voidSetPinMode+0x296>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <MCAL_DIO_voidSetPinMode+0x292>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	3f c0       	rjmp	.+126    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRD,Copy_u8PINn);
     de6:	a1 e3       	ldi	r26, 0x31	; 49
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e1 e3       	ldi	r30, 0x31	; 49
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <MCAL_DIO_voidSetPinMode+0x2be>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <MCAL_DIO_voidSetPinMode+0x2ba>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	a1 f4       	brne	.+40     	; 0xe3c <MCAL_DIO_voidSetPinMode+0x2f6>
			{
			    SET_BIT(PORTD,Copy_u8PINn);
     e14:	a2 e3       	ldi	r26, 0x32	; 50
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e2 e3       	ldi	r30, 0x32	; 50
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <MCAL_DIO_voidSetPinMode+0x2ec>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <MCAL_DIO_voidSetPinMode+0x2e8>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		        else
			{
			    CLR_BIT(PORTD,Copy_u8PINn);
     e3c:	a2 e3       	ldi	r26, 0x32	; 50
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e2 e3       	ldi	r30, 0x32	; 50
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <MCAL_DIO_voidSetPinMode+0x314>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <MCAL_DIO_voidSetPinMode+0x310>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
    }
    else
    {
    //Error_Handler();
    }
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <MCAL_DIO_voidWritePin>:

/*
 *  To write on a specific output pin from PROTx register
 */
void MCAL_DIO_voidWritePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn, DIOState_t Copy_DIOState_tValue)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <MCAL_DIO_voidWritePin+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <MCAL_DIO_voidWritePin+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_DIOPort_tDIOx < 4)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <MCAL_DIO_voidWritePin+0x1c>
     e8e:	d5 c0       	rjmp	.+426    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
    {
        if(Copy_DIOPin_tPINn < 8)
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	08 f0       	brcs	.+2      	; 0xe98 <MCAL_DIO_voidWritePin+0x24>
     e96:	d1 c0       	rjmp	.+418    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
        {
            switch(Copy_DIOPort_tDIOx)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <MCAL_DIO_voidWritePin+0x3a>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <MCAL_DIO_voidWritePin+0xc0>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <MCAL_DIO_voidWritePin+0x4e>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <MCAL_DIO_voidWritePin+0x68>
     ec0:	bc c0       	rjmp	.+376    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <MCAL_DIO_voidWritePin+0x5a>
     ecc:	5f c0       	rjmp	.+190    	; 0xf8c <MCAL_DIO_voidWritePin+0x118>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <MCAL_DIO_voidWritePin+0x66>
     ed8:	85 c0       	rjmp	.+266    	; 0xfe4 <MCAL_DIO_voidWritePin+0x170>
     eda:	af c0       	rjmp	.+350    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
            {
                case DIOA:			/* PORTA */
		    if(Copy_DIOState_tValue)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	88 23       	and	r24, r24
     ee0:	a1 f0       	breq	.+40     	; 0xf0a <MCAL_DIO_voidWritePin+0x96>
		    {
		        SET_BIT(PORTA,Copy_DIOPin_tPINn);
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <MCAL_DIO_voidWritePin+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <MCAL_DIO_voidWritePin+0x88>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	98 c0       	rjmp	.+304    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTA,Copy_DIOPin_tPINn);
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <MCAL_DIO_voidWritePin+0xb4>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <MCAL_DIO_voidWritePin+0xb0>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	83 c0       	rjmp	.+262    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOB:			/* PORTB */
		    if(Copy_DIOState_tValue)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	88 23       	and	r24, r24
     f38:	a1 f0       	breq	.+40     	; 0xf62 <MCAL_DIO_voidWritePin+0xee>
		    {
		        SET_BIT(PORTB,Copy_DIOPin_tPINn);
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <MCAL_DIO_voidWritePin+0xe4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <MCAL_DIO_voidWritePin+0xe0>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	6c c0       	rjmp	.+216    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTB,Copy_DIOPin_tPINn);
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <MCAL_DIO_voidWritePin+0x10c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <MCAL_DIO_voidWritePin+0x108>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	57 c0       	rjmp	.+174    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOC:			/* PORTC */
		    if(Copy_DIOState_tValue)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 23       	and	r24, r24
     f90:	a1 f0       	breq	.+40     	; 0xfba <MCAL_DIO_voidWritePin+0x146>
		    {
		        SET_BIT(PORTC,Copy_DIOPin_tPINn);
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <MCAL_DIO_voidWritePin+0x13c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <MCAL_DIO_voidWritePin+0x138>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	40 c0       	rjmp	.+128    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTC,Copy_DIOPin_tPINn);
     fba:	a5 e3       	ldi	r26, 0x35	; 53
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <MCAL_DIO_voidWritePin+0x164>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <MCAL_DIO_voidWritePin+0x160>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	2b c0       	rjmp	.+86     	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOD:			/* PORTD */
		    if(Copy_DIOState_tValue)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	a1 f0       	breq	.+40     	; 0x1012 <MCAL_DIO_voidWritePin+0x19e>
		    {
		        SET_BIT(PORTD,Copy_DIOPin_tPINn);
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <MCAL_DIO_voidWritePin+0x194>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <MCAL_DIO_voidWritePin+0x190>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	14 c0       	rjmp	.+40     	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTD,Copy_DIOPin_tPINn);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <MCAL_DIO_voidWritePin+0x1bc>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <MCAL_DIO_voidWritePin+0x1b8>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
    }
    else
    {
        //Error_Handler();
    }
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <MCAL_DIO_u8ReadPin>:

/*
 * To read a specific output pin from PINx register
 */
u8 MCAL_DIO_u8ReadPin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <MCAL_DIO_u8ReadPin+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <MCAL_DIO_u8ReadPin+0x8>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <MCAL_DIO_u8ReadPin+0xa>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
    u8 pinValue = 0;
    105c:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	84 30       	cpi	r24, 0x04	; 4
    1062:	08 f0       	brcs	.+2      	; 0x1066 <MCAL_DIO_u8ReadPin+0x1c>
    1064:	71 c0       	rjmp	.+226    	; 0x1148 <MCAL_DIO_u8ReadPin+0xfe>
    {
	if(Copy_DIOPin_tPINn < 8)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	88 30       	cpi	r24, 0x08	; 8
    106a:	08 f0       	brcs	.+2      	; 0x106e <MCAL_DIO_u8ReadPin+0x24>
    106c:	6a c0       	rjmp	.+212    	; 0x1142 <MCAL_DIO_u8ReadPin+0xf8>
	{
	    switch(Copy_DIOPort_tDIOx)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3e 83       	std	Y+6, r19	; 0x06
    1076:	2d 83       	std	Y+5, r18	; 0x05
    1078:	4d 81       	ldd	r20, Y+5	; 0x05
    107a:	5e 81       	ldd	r21, Y+6	; 0x06
    107c:	41 30       	cpi	r20, 0x01	; 1
    107e:	51 05       	cpc	r21, r1
    1080:	41 f1       	breq	.+80     	; 0x10d2 <MCAL_DIO_u8ReadPin+0x88>
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <MCAL_DIO_u8ReadPin+0x4e>
    108c:	2d 81       	ldd	r18, Y+5	; 0x05
    108e:	3e 81       	ldd	r19, Y+6	; 0x06
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	61 f0       	breq	.+24     	; 0x10ae <MCAL_DIO_u8ReadPin+0x64>
    1096:	52 c0       	rjmp	.+164    	; 0x113c <MCAL_DIO_u8ReadPin+0xf2>
    1098:	4d 81       	ldd	r20, Y+5	; 0x05
    109a:	5e 81       	ldd	r21, Y+6	; 0x06
    109c:	42 30       	cpi	r20, 0x02	; 2
    109e:	51 05       	cpc	r21, r1
    10a0:	51 f1       	breq	.+84     	; 0x10f6 <MCAL_DIO_u8ReadPin+0xac>
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	9e 81       	ldd	r25, Y+6	; 0x06
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	b9 f1       	breq	.+110    	; 0x111a <MCAL_DIO_u8ReadPin+0xd0>
    10ac:	47 c0       	rjmp	.+142    	; 0x113c <MCAL_DIO_u8ReadPin+0xf2>
	    {
	        case DIOA:			/* PORTA */
		    pinValue = GET_BIT(PINA,Copy_DIOPin_tPINn);
    10ae:	e9 e3       	ldi	r30, 0x39	; 57
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <MCAL_DIO_u8ReadPin+0x7c>
    10c2:	55 95       	asr	r21
    10c4:	47 95       	ror	r20
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <MCAL_DIO_u8ReadPin+0x78>
    10ca:	ca 01       	movw	r24, r20
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	35 c0       	rjmp	.+106    	; 0x113c <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOB:			/* PORTB */
		    pinValue = GET_BIT(PINB,Copy_DIOPin_tPINn);
    10d2:	e6 e3       	ldi	r30, 0x36	; 54
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <MCAL_DIO_u8ReadPin+0xa0>
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <MCAL_DIO_u8ReadPin+0x9c>
    10ee:	ca 01       	movw	r24, r20
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	23 c0       	rjmp	.+70     	; 0x113c <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOC:			/* PORTC */
		    pinValue = GET_BIT(PINC,Copy_DIOPin_tPINn);
    10f6:	e3 e3       	ldi	r30, 0x33	; 51
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <MCAL_DIO_u8ReadPin+0xc4>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <MCAL_DIO_u8ReadPin+0xc0>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	11 c0       	rjmp	.+34     	; 0x113c <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOD:			/* PORTD */
		    pinValue = GET_BIT(PIND,Copy_DIOPin_tPINn);
    111a:	e0 e3       	ldi	r30, 0x30	; 48
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <MCAL_DIO_u8ReadPin+0xe8>
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <MCAL_DIO_u8ReadPin+0xe4>
    1136:	ca 01       	movw	r24, r20
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	89 83       	std	Y+1, r24	; 0x01
		    break;
	    }
	    return pinValue;
    113c:	59 81       	ldd	r21, Y+1	; 0x01
    113e:	5c 83       	std	Y+4, r21	; 0x04
    1140:	05 c0       	rjmp	.+10     	; 0x114c <MCAL_DIO_u8ReadPin+0x102>
	}
	else
	{
	    //Error_Handler();
	    return 0xFF;
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	8c 83       	std	Y+4, r24	; 0x04
    1146:	02 c0       	rjmp	.+4      	; 0x114c <MCAL_DIO_u8ReadPin+0x102>
	}
    }
    else
    {
        //Error_Handler();
        return 0xFF;
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    114e:	26 96       	adiw	r28, 0x06	; 6
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <MCAL_DIO_voidWriteWord>:

/*
 * To write on the whole PROTx register
 */
void MCAL_DIO_voidWriteWord(DIOPort_t Copy_DIOPort_tDIOx, u8 Copy_u8Word)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <MCAL_DIO_voidWriteWord+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <MCAL_DIO_voidWriteWord+0x8>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_DIOPort_tDIOx < 4)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	84 30       	cpi	r24, 0x04	; 4
    1174:	90 f5       	brcc	.+100    	; 0x11da <MCAL_DIO_voidWriteWord+0x7a>
    {
	switch(Copy_DIOPort_tDIOx)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3c 83       	std	Y+4, r19	; 0x04
    117e:	2b 83       	std	Y+3, r18	; 0x03
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	d1 f0       	breq	.+52     	; 0x11be <MCAL_DIO_voidWriteWord+0x5e>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	2c f4       	brge	.+10     	; 0x119e <MCAL_DIO_voidWriteWord+0x3e>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <MCAL_DIO_voidWriteWord+0x54>
    119c:	1e c0       	rjmp	.+60     	; 0x11da <MCAL_DIO_voidWriteWord+0x7a>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <MCAL_DIO_voidWriteWord+0x68>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <MCAL_DIO_voidWriteWord+0x72>
    11b2:	13 c0       	rjmp	.+38     	; 0x11da <MCAL_DIO_voidWriteWord+0x7a>
	{
	    case DIOA:			/* PORTA */
		PORTA = Copy_u8Word;
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
    11bc:	0e c0       	rjmp	.+28     	; 0x11da <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOB:			/* PORTB */
		PORTB = Copy_u8Word;
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOC:			/* PORTC */
		PORTC = Copy_u8Word;
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	80 83       	st	Z, r24
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOD:			/* PORTD */
		PORTD = Copy_u8Word;
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
		break;
	}
    }
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <MCAL_DIO_u8WordRead>:

/*
 *  To read the whole PINx register
 */
u8 MCAL_DIO_u8WordRead(DIOPort_t Copy_DIOPort_tDIOx)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <MCAL_DIO_u8WordRead+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <MCAL_DIO_u8WordRead+0x8>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    u8 portValue = 0;
    11f8:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	a8 f5       	brcc	.+106    	; 0x126a <MCAL_DIO_u8WordRead+0x82>
    {
	switch(Copy_DIOPort_tDIOx)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3d 83       	std	Y+5, r19	; 0x05
    1208:	2c 83       	std	Y+4, r18	; 0x04
    120a:	8c 81       	ldd	r24, Y+4	; 0x04
    120c:	9d 81       	ldd	r25, Y+5	; 0x05
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	d1 f0       	breq	.+52     	; 0x1248 <MCAL_DIO_u8WordRead+0x60>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <MCAL_DIO_u8WordRead+0x40>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f0       	breq	.+24     	; 0x123e <MCAL_DIO_u8WordRead+0x56>
    1226:	1e c0       	rjmp	.+60     	; 0x1264 <MCAL_DIO_u8WordRead+0x7c>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <MCAL_DIO_u8WordRead+0x6a>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	81 f0       	breq	.+32     	; 0x125c <MCAL_DIO_u8WordRead+0x74>
    123c:	13 c0       	rjmp	.+38     	; 0x1264 <MCAL_DIO_u8WordRead+0x7c>
	{
	    case DIOA:			/* PORTA */
		portValue = PINA;
    123e:	e9 e3       	ldi	r30, 0x39	; 57
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOB:			/* PORTB */
		portValue = PINB;
    1248:	e6 e3       	ldi	r30, 0x36	; 54
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOC:			/* PORTC */
		portValue = PINC;
    1252:	e3 e3       	ldi	r30, 0x33	; 51
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOD:			/* PORTD */
		portValue = PIND;
    125c:	e0 e3       	ldi	r30, 0x30	; 48
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	89 83       	std	Y+1, r24	; 0x01
		break;
	    default:
		//No Code
		break;
	}
	return portValue;
    1264:	99 81       	ldd	r25, Y+1	; 0x01
    1266:	9b 83       	std	Y+3, r25	; 0x03
    1268:	01 c0       	rjmp	.+2      	; 0x126c <MCAL_DIO_u8WordRead+0x84>
    }
    else
    {
	return 0;
    126a:	1b 82       	std	Y+3, r1	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <MCAL_DIO_voidTogglePin>:

/*
 * To toggle a certain pin.
 */
void MCAL_DIO_voidTogglePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <MCAL_DIO_voidTogglePin+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <MCAL_DIO_voidTogglePin+0x8>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_DIOPort_tDIOx < 4)
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	08 f0       	brcs	.+2      	; 0x1296 <MCAL_DIO_voidTogglePin+0x18>
    1294:	72 c0       	rjmp	.+228    	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
    {
	if(Copy_DIOPin_tPINn < 8)
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	88 30       	cpi	r24, 0x08	; 8
    129a:	08 f0       	brcs	.+2      	; 0x129e <MCAL_DIO_voidTogglePin+0x20>
    129c:	6e c0       	rjmp	.+220    	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
	{
	    switch(Copy_DIOPort_tDIOx)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3c 83       	std	Y+4, r19	; 0x04
    12a6:	2b 83       	std	Y+3, r18	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	49 f1       	breq	.+82     	; 0x1304 <MCAL_DIO_voidTogglePin+0x86>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <MCAL_DIO_voidTogglePin+0x48>
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	61 f0       	breq	.+24     	; 0x12dc <MCAL_DIO_voidTogglePin+0x5e>
    12c4:	5a c0       	rjmp	.+180    	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	71 f1       	breq	.+92     	; 0x132c <MCAL_DIO_voidTogglePin+0xae>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	e9 f1       	breq	.+122    	; 0x1354 <MCAL_DIO_voidTogglePin+0xd6>
    12da:	4f c0       	rjmp	.+158    	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
	    {
		    case DIOA:			/* PORTA */
			TOG_BIT(PORTA,Copy_DIOPin_tPINn);
    12dc:	ab e3       	ldi	r26, 0x3B	; 59
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	eb e3       	ldi	r30, 0x3B	; 59
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <MCAL_DIO_voidTogglePin+0x7c>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <MCAL_DIO_voidTogglePin+0x78>
    12fe:	84 27       	eor	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	3b c0       	rjmp	.+118    	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOB:			/* PORTB */
			TOG_BIT(PORTB,Copy_DIOPin_tPINn);
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <MCAL_DIO_voidTogglePin+0xa4>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <MCAL_DIO_voidTogglePin+0xa0>
    1326:	84 27       	eor	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	27 c0       	rjmp	.+78     	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOC:			/* PORTC */
			TOG_BIT(PORTC,Copy_DIOPin_tPINn);
    132c:	a5 e3       	ldi	r26, 0x35	; 53
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e3       	ldi	r30, 0x35	; 53
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <MCAL_DIO_voidTogglePin+0xcc>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <MCAL_DIO_voidTogglePin+0xc8>
    134e:	84 27       	eor	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	13 c0       	rjmp	.+38     	; 0x137a <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOD:			/* PORTD */
			TOG_BIT(PORTD,Copy_DIOPin_tPINn);
    1354:	a2 e3       	ldi	r26, 0x32	; 50
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <MCAL_DIO_voidTogglePin+0xf4>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <MCAL_DIO_voidTogglePin+0xf0>
    1376:	84 27       	eor	r24, r20
    1378:	8c 93       	st	X, r24
    }
    else
    {
	    //Error_Handler();
    }
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <MCAL_DIO_voidTogglePort>:

/*
 * To toggle a complete port register.
 */
void MCAL_DIO_voidTogglePort(DIOPort_t Copy_DIOPort_tDIOx)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <MCAL_DIO_voidTogglePort+0x6>
    138e:	0f 92       	push	r0
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	08 f0       	brcs	.+2      	; 0x139e <MCAL_DIO_voidTogglePort+0x16>
    139c:	3e c0       	rjmp	.+124    	; 0x141a <MCAL_DIO_voidTogglePort+0x92>
    {
	switch(Copy_DIOPort_tDIOx)
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3b 83       	std	Y+3, r19	; 0x03
    13a6:	2a 83       	std	Y+2, r18	; 0x02
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	9b 81       	ldd	r25, Y+3	; 0x03
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	e9 f0       	breq	.+58     	; 0x13ec <MCAL_DIO_voidTogglePort+0x64>
    13b2:	2a 81       	ldd	r18, Y+2	; 0x02
    13b4:	3b 81       	ldd	r19, Y+3	; 0x03
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <MCAL_DIO_voidTogglePort+0x3e>
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	9b 81       	ldd	r25, Y+3	; 0x03
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	61 f0       	breq	.+24     	; 0x13dc <MCAL_DIO_voidTogglePort+0x54>
    13c4:	2a c0       	rjmp	.+84     	; 0x141a <MCAL_DIO_voidTogglePort+0x92>
    13c6:	2a 81       	ldd	r18, Y+2	; 0x02
    13c8:	3b 81       	ldd	r19, Y+3	; 0x03
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	b1 f0       	breq	.+44     	; 0x13fc <MCAL_DIO_voidTogglePort+0x74>
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	c9 f0       	breq	.+50     	; 0x140c <MCAL_DIO_voidTogglePort+0x84>
    13da:	1f c0       	rjmp	.+62     	; 0x141a <MCAL_DIO_voidTogglePort+0x92>
	{
	    case DIOA:			/* PORTA */
		PORTA ^= 0xFF;
    13dc:	ab e3       	ldi	r26, 0x3B	; 59
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	80 95       	com	r24
    13e8:	8c 93       	st	X, r24
    13ea:	17 c0       	rjmp	.+46     	; 0x141a <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOB:			/* PORTB */
		PORTB ^= 0xFF;
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 95       	com	r24
    13f8:	8c 93       	st	X, r24
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOC:			/* PORTC */
		PORTC ^= 0xFF;
    13fc:	a5 e3       	ldi	r26, 0x35	; 53
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e3       	ldi	r30, 0x35	; 53
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 95       	com	r24
    1408:	8c 93       	st	X, r24
    140a:	07 c0       	rjmp	.+14     	; 0x141a <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOD:			/* PORTD */
		PORTD ^= 0xFF;
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 95       	com	r24
    1418:	8c 93       	st	X, r24
    }
    else
    {
	//Error_Handler();
    }
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <HAL_SERVO_Init>:



/** ==================== Servo Functions Implementation ===================== */
void HAL_SERVO_Init(void)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the Timer 1 */
	MCAL_TIM1_SetTimerCompareMode(TIM1_FAST_PWM_MODE_OC1A_NON_INVERTED);
    142e:	8a e0       	ldi	r24, 0x0A	; 10
    1430:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MCAL_TIM1_SetTimerCompareMode>
	MCAL_TIM1_SetTimerCompareMode(TIM1_FAST_PWM_MODE_OC1B_NON_INVERTED);
    1434:	89 e1       	ldi	r24, 0x19	; 25
    1436:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MCAL_TIM1_SetTimerCompareMode>
	MCAL_DIO_voidSetPinMode(OC1A_PIN, Output);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	65 e0       	ldi	r22, 0x05	; 5
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(OC1B_PIN, Output);
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	64 e0       	ldi	r22, 0x04	; 4
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>

	/* Prepare the Servo motor to be moved to its reference position */
	MCAL_TIM1_SetCompareValue(OC1A, 0);    // Compare match set to zero
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
	MCAL_TIM1_SetCompareValue(OC1B, 0);    // Compare match set to zero
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
	ICR1 = 40000;                          // TOP (40,000 * tick time = 20 ms)
    1462:	e6 e4       	ldi	r30, 0x46	; 70
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 e4       	ldi	r24, 0x40	; 64
    1468:	9c e9       	ldi	r25, 0x9C	; 156
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	80 83       	st	Z, r24

	/* Start the timer 1 */
	MCAL_TIM1_EnableTimer();
    146e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <MCAL_TIM1_EnableTimer>
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <HAL_SERVO_SetAngle>:


void HAL_SERVO_SetAngle(u16 Copy_Angle)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <HAL_SERVO_SetAngle+0x6>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
	/* Equation (Mapping) */

	/* Set the new position to the servo motor (by changing the output compare value) */
	MCAL_TIM1_SetCompareValue(OC1A, Copy_Angle);
    1486:	29 81       	ldd	r18, Y+1	; 0x01
    1488:	3a 81       	ldd	r19, Y+2	; 0x02
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	b9 01       	movw	r22, r18
    148e:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <MCAL_SPI_MasterInit>:



/** ======================= SPI Functions Implementation ==================== */
void MCAL_SPI_MasterInit(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2e 97       	sbiw	r28, 0x0e	; 14
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
	/* Set MOSI and SCK output, all others input */
	MCAL_DIO_voidSetPinMode(SPI_MOSI, Output);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	65 e0       	ldi	r22, 0x05	; 5
    14b4:	41 e0       	ldi	r20, 0x01	; 1
    14b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SCK , Output);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	67 e0       	ldi	r22, 0x07	; 7
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_MISO, Input );
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	66 e0       	ldi	r22, 0x06	; 6
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SS  , Input_Pullup );
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	64 e0       	ldi	r22, 0x04	; 4
    14d2:	42 e0       	ldi	r20, 0x02	; 2
    14d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>

	/* Enable SPI, Master, set clock rate f_sys/16 */
	SPCR->MSTR  = 1;
    14d8:	ed e2       	ldi	r30, 0x2D	; 45
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	80 61       	ori	r24, 0x10	; 16
    14e0:	80 83       	st	Z, r24
	SPCR->SPR   = SPI_CLOCK_RATE;
    14e2:	ed e2       	ldi	r30, 0x2D	; 45
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8c 7f       	andi	r24, 0xFC	; 252
    14ea:	81 60       	ori	r24, 0x01	; 1
    14ec:	80 83       	st	Z, r24
	SPSR->SPI2X = SPI_2XSPEED;
    14ee:	ee e2       	ldi	r30, 0x2E	; 46
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8e 7f       	andi	r24, 0xFE	; 254
    14f6:	80 83       	st	Z, r24
	SPCR->SPE   = 1;
    14f8:	ed e2       	ldi	r30, 0x2D	; 45
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	80 83       	st	Z, r24
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	aa e7       	ldi	r26, 0x7A	; 122
    1508:	b4 e4       	ldi	r27, 0x44	; 68
    150a:	8b 87       	std	Y+11, r24	; 0x0b
    150c:	9c 87       	std	Y+12, r25	; 0x0c
    150e:	ad 87       	std	Y+13, r26	; 0x0d
    1510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	4a e7       	ldi	r20, 0x7A	; 122
    1520:	53 e4       	ldi	r21, 0x43	; 67
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	8f 83       	std	Y+7, r24	; 0x07
    152c:	98 87       	std	Y+8, r25	; 0x08
    152e:	a9 87       	std	Y+9, r26	; 0x09
    1530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1532:	6f 81       	ldd	r22, Y+7	; 0x07
    1534:	78 85       	ldd	r23, Y+8	; 0x08
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e8       	ldi	r20, 0x80	; 128
    1540:	5f e3       	ldi	r21, 0x3F	; 63
    1542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1546:	88 23       	and	r24, r24
    1548:	2c f4       	brge	.+10     	; 0x1554 <MCAL_SPI_MasterInit+0xb8>
		__ticks = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <MCAL_SPI_MasterInit+0x136>
	else if (__tmp > 65535)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	57 e4       	ldi	r21, 0x47	; 71
    1564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	4c f5       	brge	.+82     	; 0x15be <MCAL_SPI_MasterInit+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156c:	6b 85       	ldd	r22, Y+11	; 0x0b
    156e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1570:	8d 85       	ldd	r24, Y+13	; 0x0d
    1572:	9e 85       	ldd	r25, Y+14	; 0x0e
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e2       	ldi	r20, 0x20	; 32
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	0f c0       	rjmp	.+30     	; 0x15b4 <MCAL_SPI_MasterInit+0x118>
    1596:	89 e1       	ldi	r24, 0x19	; 25
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <MCAL_SPI_MasterInit+0x106>
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15aa:	8d 81       	ldd	r24, Y+5	; 0x05
    15ac:	9e 81       	ldd	r25, Y+6	; 0x06
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	69 f7       	brne	.-38     	; 0x1596 <MCAL_SPI_MasterInit+0xfa>
    15bc:	14 c0       	rjmp	.+40     	; 0x15e6 <MCAL_SPI_MasterInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15be:	6f 81       	ldd	r22, Y+7	; 0x07
    15c0:	78 85       	ldd	r23, Y+8	; 0x08
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	9e 81       	ldd	r25, Y+6	; 0x06
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <MCAL_SPI_MasterInit+0x142>
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    15e6:	2e 96       	adiw	r28, 0x0e	; 14
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <MCAL_SPI_SlaveInit>:


void MCAL_SPI_SlaveInit(void)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */
	MCAL_DIO_voidSetPinMode(SPI_MOSI, Input);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	65 e0       	ldi	r22, 0x05	; 5
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SCK , Input);
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	67 e0       	ldi	r22, 0x07	; 7
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_MISO, Output );
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SS  , Input );
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	64 e0       	ldi	r22, 0x04	; 4
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>

	/* Enable SPI */
	SPCR->SPE  = 1;
    1628:	ed e2       	ldi	r30, 0x2D	; 45
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 64       	ori	r24, 0x40	; 64
    1630:	80 83       	st	Z, r24
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <MCAL_SPI_MasterTransmit>:


void MCAL_SPI_MasterTransmit(u8 Copy_Data)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission, load the data byte to the SPI Data Register */
	SPDR = Copy_Data;
    1644:	ef e2       	ldi	r30, 0x2F	; 47
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!(SPSR->SPIF == 1));
    164c:	ee e2       	ldi	r30, 0x2E	; 46
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 78       	andi	r24, 0x80	; 128
    1654:	88 23       	and	r24, r24
    1656:	d1 f3       	breq	.-12     	; 0x164c <MCAL_SPI_MasterTransmit+0x14>
}
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <MCAL_SPI_SlaveReceive>:


u8 MCAL_SPI_SlaveReceive(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPSR->SPIF == 1));
    1668:	ee e2       	ldi	r30, 0x2E	; 46
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 78       	andi	r24, 0x80	; 128
    1670:	88 23       	and	r24, r24
    1672:	d1 f3       	breq	.-12     	; 0x1668 <MCAL_SPI_SlaveReceive+0x8>

	/* Return data register */
	return SPDR;
    1674:	ef e2       	ldi	r30, 0x2F	; 47
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <MCAL_TIM0_StartTimer>:
void (*TIM0_COMP_ISR) (void);


/* To Start the TIM0 & Select the timer clock */
void MCAL_TIM0_StartTimer()
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= TIM0_CLK_SOUCRE;	// Configured in the TIM0_config.h file
    1688:	a3 e5       	ldi	r26, 0x53	; 83
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e3 e5       	ldi	r30, 0x53	; 83
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	85 60       	ori	r24, 0x05	; 5
    1694:	8c 93       	st	X, r24
}
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <MCAL_TIM0_PresetTimer>:


/* To put the initial value to count from */
void MCAL_TIM0_PresetTimer(u8 Copy_Value)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	0f 92       	push	r0
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Value;
    16a8:	e2 e5       	ldi	r30, 0x52	; 82
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	80 83       	st	Z, r24
}
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <MCAL_TIM0_StopTimer>:


/* To Stop the TIM0 */
void MCAL_TIM0_StopTimer()
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
    16c0:	a3 e5       	ldi	r26, 0x53	; 83
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e3 e5       	ldi	r30, 0x53	; 83
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	88 7f       	andi	r24, 0xF8	; 248
    16cc:	8c 93       	st	X, r24
}
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <MCAL_TIM0_SetTimerCompareMode>:


/* To select the TIM0 mode of operation */
void MCAL_TIM0_SetTimerCompareMode(u8 Mode)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <MCAL_TIM0_SetTimerCompareMode+0x6>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3b 83       	std	Y+3, r19	; 0x03
    16ea:	2a 83       	std	Y+2, r18	; 0x02
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	86 30       	cpi	r24, 0x06	; 6
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <MCAL_TIM0_SetTimerCompareMode+0x24>
    16f6:	02 c1       	rjmp	.+516    	; 0x18fc <MCAL_TIM0_SetTimerCompareMode+0x228>
    16f8:	2a 81       	ldd	r18, Y+2	; 0x02
    16fa:	3b 81       	ldd	r19, Y+3	; 0x03
    16fc:	27 30       	cpi	r18, 0x07	; 7
    16fe:	31 05       	cpc	r19, r1
    1700:	24 f5       	brge	.+72     	; 0x174a <MCAL_TIM0_SetTimerCompareMode+0x76>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	9b 81       	ldd	r25, Y+3	; 0x03
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <MCAL_TIM0_SetTimerCompareMode+0x3a>
    170c:	83 c0       	rjmp	.+262    	; 0x1814 <MCAL_TIM0_SetTimerCompareMode+0x140>
    170e:	2a 81       	ldd	r18, Y+2	; 0x02
    1710:	3b 81       	ldd	r19, Y+3	; 0x03
    1712:	23 30       	cpi	r18, 0x03	; 3
    1714:	31 05       	cpc	r19, r1
    1716:	64 f4       	brge	.+24     	; 0x1730 <MCAL_TIM0_SetTimerCompareMode+0x5c>
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	9b 81       	ldd	r25, Y+3	; 0x03
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	09 f4       	brne	.+2      	; 0x1722 <MCAL_TIM0_SetTimerCompareMode+0x4e>
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <MCAL_TIM0_SetTimerCompareMode+0xcc>
    1722:	2a 81       	ldd	r18, Y+2	; 0x02
    1724:	3b 81       	ldd	r19, Y+3	; 0x03
    1726:	21 30       	cpi	r18, 0x01	; 1
    1728:	31 05       	cpc	r19, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <MCAL_TIM0_SetTimerCompareMode+0x5a>
    172c:	56 c0       	rjmp	.+172    	; 0x17da <MCAL_TIM0_SetTimerCompareMode+0x106>
    172e:	cd c1       	rjmp	.+922    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <MCAL_TIM0_SetTimerCompareMode+0x68>
    173a:	a6 c0       	rjmp	.+332    	; 0x1888 <MCAL_TIM0_SetTimerCompareMode+0x1b4>
    173c:	2a 81       	ldd	r18, Y+2	; 0x02
    173e:	3b 81       	ldd	r19, Y+3	; 0x03
    1740:	25 30       	cpi	r18, 0x05	; 5
    1742:	31 05       	cpc	r19, r1
    1744:	0c f0       	brlt	.+2      	; 0x1748 <MCAL_TIM0_SetTimerCompareMode+0x74>
    1746:	bd c0       	rjmp	.+378    	; 0x18c2 <MCAL_TIM0_SetTimerCompareMode+0x1ee>
    1748:	82 c0       	rjmp	.+260    	; 0x184e <MCAL_TIM0_SetTimerCompareMode+0x17a>
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	8a 30       	cpi	r24, 0x0A	; 10
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <MCAL_TIM0_SetTimerCompareMode+0x82>
    1754:	47 c1       	rjmp	.+654    	; 0x19e4 <MCAL_TIM0_SetTimerCompareMode+0x310>
    1756:	2a 81       	ldd	r18, Y+2	; 0x02
    1758:	3b 81       	ldd	r19, Y+3	; 0x03
    175a:	2b 30       	cpi	r18, 0x0B	; 11
    175c:	31 05       	cpc	r19, r1
    175e:	6c f4       	brge	.+26     	; 0x177a <MCAL_TIM0_SetTimerCompareMode+0xa6>
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	91 05       	cpc	r25, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <MCAL_TIM0_SetTimerCompareMode+0x98>
    176a:	02 c1       	rjmp	.+516    	; 0x1970 <MCAL_TIM0_SetTimerCompareMode+0x29c>
    176c:	2a 81       	ldd	r18, Y+2	; 0x02
    176e:	3b 81       	ldd	r19, Y+3	; 0x03
    1770:	29 30       	cpi	r18, 0x09	; 9
    1772:	31 05       	cpc	r19, r1
    1774:	0c f0       	brlt	.+2      	; 0x1778 <MCAL_TIM0_SetTimerCompareMode+0xa4>
    1776:	19 c1       	rjmp	.+562    	; 0x19aa <MCAL_TIM0_SetTimerCompareMode+0x2d6>
    1778:	de c0       	rjmp	.+444    	; 0x1936 <MCAL_TIM0_SetTimerCompareMode+0x262>
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	8c 30       	cpi	r24, 0x0C	; 12
    1780:	91 05       	cpc	r25, r1
    1782:	09 f4       	brne	.+2      	; 0x1786 <MCAL_TIM0_SetTimerCompareMode+0xb2>
    1784:	69 c1       	rjmp	.+722    	; 0x1a58 <MCAL_TIM0_SetTimerCompareMode+0x384>
    1786:	2a 81       	ldd	r18, Y+2	; 0x02
    1788:	3b 81       	ldd	r19, Y+3	; 0x03
    178a:	2c 30       	cpi	r18, 0x0C	; 12
    178c:	31 05       	cpc	r19, r1
    178e:	0c f4       	brge	.+2      	; 0x1792 <MCAL_TIM0_SetTimerCompareMode+0xbe>
    1790:	46 c1       	rjmp	.+652    	; 0x1a1e <MCAL_TIM0_SetTimerCompareMode+0x34a>
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	8d 30       	cpi	r24, 0x0D	; 13
    1798:	91 05       	cpc	r25, r1
    179a:	09 f4       	brne	.+2      	; 0x179e <MCAL_TIM0_SetTimerCompareMode+0xca>
    179c:	7a c1       	rjmp	.+756    	; 0x1a92 <MCAL_TIM0_SetTimerCompareMode+0x3be>
    179e:	95 c1       	rjmp	.+810    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
	{
	/* ============== NORMAL MODE ============== */
	case TIM0_NORMAL_MODE_OUTPUT_COMPARE_OFF:
		CLR_BIT(TCCR0,6);	//WGM00
    17a0:	a3 e5       	ldi	r26, 0x53	; 83
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e3 e5       	ldi	r30, 0x53	; 83
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8f 7b       	andi	r24, 0xBF	; 191
    17ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    17ae:	a3 e5       	ldi	r26, 0x53	; 83
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e3 e5       	ldi	r30, 0x53	; 83
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	87 7f       	andi	r24, 0xF7	; 247
    17ba:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    17bc:	a3 e5       	ldi	r26, 0x53	; 83
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e3 e5       	ldi	r30, 0x53	; 83
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8f 7e       	andi	r24, 0xEF	; 239
    17c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    17ca:	a3 e5       	ldi	r26, 0x53	; 83
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e3 e5       	ldi	r30, 0x53	; 83
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 7d       	andi	r24, 0xDF	; 223
    17d6:	8c 93       	st	X, r24
    17d8:	78 c1       	rjmp	.+752    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_NORMAL_MODE_TOGGLE_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    17da:	a3 e5       	ldi	r26, 0x53	; 83
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 e5       	ldi	r30, 0x53	; 83
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7b       	andi	r24, 0xBF	; 191
    17e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    17e8:	a3 e5       	ldi	r26, 0x53	; 83
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e3 e5       	ldi	r30, 0x53	; 83
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	87 7f       	andi	r24, 0xF7	; 247
    17f4:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    17f6:	a3 e5       	ldi	r26, 0x53	; 83
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e3 e5       	ldi	r30, 0x53	; 83
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 61       	ori	r24, 0x10	; 16
    1802:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    1804:	a3 e5       	ldi	r26, 0x53	; 83
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e3 e5       	ldi	r30, 0x53	; 83
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8f 7d       	andi	r24, 0xDF	; 223
    1810:	8c 93       	st	X, r24
    1812:	5b c1       	rjmp	.+694    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_NORMAL_MODE_CLEAR_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    1814:	a3 e5       	ldi	r26, 0x53	; 83
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e3 e5       	ldi	r30, 0x53	; 83
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8f 7b       	andi	r24, 0xBF	; 191
    1820:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1822:	a3 e5       	ldi	r26, 0x53	; 83
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e3 e5       	ldi	r30, 0x53	; 83
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	87 7f       	andi	r24, 0xF7	; 247
    182e:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1830:	a3 e5       	ldi	r26, 0x53	; 83
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e3 e5       	ldi	r30, 0x53	; 83
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8f 7e       	andi	r24, 0xEF	; 239
    183c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    183e:	a3 e5       	ldi	r26, 0x53	; 83
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e3 e5       	ldi	r30, 0x53	; 83
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 62       	ori	r24, 0x20	; 32
    184a:	8c 93       	st	X, r24
    184c:	3e c1       	rjmp	.+636    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_NORMAL_MODE_SET_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    184e:	a3 e5       	ldi	r26, 0x53	; 83
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e3 e5       	ldi	r30, 0x53	; 83
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	8f 7b       	andi	r24, 0xBF	; 191
    185a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    185c:	a3 e5       	ldi	r26, 0x53	; 83
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e3 e5       	ldi	r30, 0x53	; 83
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	87 7f       	andi	r24, 0xF7	; 247
    1868:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    186a:	a3 e5       	ldi	r26, 0x53	; 83
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e3 e5       	ldi	r30, 0x53	; 83
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 61       	ori	r24, 0x10	; 16
    1876:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1878:	a3 e5       	ldi	r26, 0x53	; 83
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e3 e5       	ldi	r30, 0x53	; 83
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 62       	ori	r24, 0x20	; 32
    1884:	8c 93       	st	X, r24
    1886:	21 c1       	rjmp	.+578    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

		/* ============== CTC MODE ============== */
	case TIM0_CTC_MODE_OUTPUT_COMPARE_OFF:
		CLR_BIT(TCCR0,6);	//WGM00
    1888:	a3 e5       	ldi	r26, 0x53	; 83
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e3 e5       	ldi	r30, 0x53	; 83
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8f 7b       	andi	r24, 0xBF	; 191
    1894:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1896:	a3 e5       	ldi	r26, 0x53	; 83
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e3 e5       	ldi	r30, 0x53	; 83
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	88 60       	ori	r24, 0x08	; 8
    18a2:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    18a4:	a3 e5       	ldi	r26, 0x53	; 83
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e3 e5       	ldi	r30, 0x53	; 83
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	8f 7e       	andi	r24, 0xEF	; 239
    18b0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    18b2:	a3 e5       	ldi	r26, 0x53	; 83
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e3 e5       	ldi	r30, 0x53	; 83
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 7d       	andi	r24, 0xDF	; 223
    18be:	8c 93       	st	X, r24
    18c0:	04 c1       	rjmp	.+520    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_CTC_MODE_TOGGLE_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    18c2:	a3 e5       	ldi	r26, 0x53	; 83
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e3 e5       	ldi	r30, 0x53	; 83
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	8f 7b       	andi	r24, 0xBF	; 191
    18ce:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    18d0:	a3 e5       	ldi	r26, 0x53	; 83
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e3 e5       	ldi	r30, 0x53	; 83
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	88 60       	ori	r24, 0x08	; 8
    18dc:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    18de:	a3 e5       	ldi	r26, 0x53	; 83
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e3 e5       	ldi	r30, 0x53	; 83
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 61       	ori	r24, 0x10	; 16
    18ea:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    18ec:	a3 e5       	ldi	r26, 0x53	; 83
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e3 e5       	ldi	r30, 0x53	; 83
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 7d       	andi	r24, 0xDF	; 223
    18f8:	8c 93       	st	X, r24
    18fa:	e7 c0       	rjmp	.+462    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_CTC_MODE_CLEAR_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    18fc:	a3 e5       	ldi	r26, 0x53	; 83
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e3 e5       	ldi	r30, 0x53	; 83
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8f 7b       	andi	r24, 0xBF	; 191
    1908:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    190a:	a3 e5       	ldi	r26, 0x53	; 83
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e3 e5       	ldi	r30, 0x53	; 83
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	88 60       	ori	r24, 0x08	; 8
    1916:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1918:	a3 e5       	ldi	r26, 0x53	; 83
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e3 e5       	ldi	r30, 0x53	; 83
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 7e       	andi	r24, 0xEF	; 239
    1924:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1926:	a3 e5       	ldi	r26, 0x53	; 83
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e3 e5       	ldi	r30, 0x53	; 83
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 62       	ori	r24, 0x20	; 32
    1932:	8c 93       	st	X, r24
    1934:	ca c0       	rjmp	.+404    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_CTC_MODE_SET_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    1936:	a3 e5       	ldi	r26, 0x53	; 83
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e3 e5       	ldi	r30, 0x53	; 83
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8f 7b       	andi	r24, 0xBF	; 191
    1942:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1944:	a3 e5       	ldi	r26, 0x53	; 83
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e3 e5       	ldi	r30, 0x53	; 83
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	88 60       	ori	r24, 0x08	; 8
    1950:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1952:	a3 e5       	ldi	r26, 0x53	; 83
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e3 e5       	ldi	r30, 0x53	; 83
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 61       	ori	r24, 0x10	; 16
    195e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1960:	a3 e5       	ldi	r26, 0x53	; 83
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e3 e5       	ldi	r30, 0x53	; 83
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 62       	ori	r24, 0x20	; 32
    196c:	8c 93       	st	X, r24
    196e:	ad c0       	rjmp	.+346    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

		/* ============== FAST PWM MODE ============== */
	case TIM0_FAST_PWM_MODE_OUTPUT_COMPARE_OFF:
		SET_BIT(TCCR0,6);	//WGM00
    1970:	a3 e5       	ldi	r26, 0x53	; 83
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e3 e5       	ldi	r30, 0x53	; 83
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	80 64       	ori	r24, 0x40	; 64
    197c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    197e:	a3 e5       	ldi	r26, 0x53	; 83
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e3 e5       	ldi	r30, 0x53	; 83
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	88 60       	ori	r24, 0x08	; 8
    198a:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    198c:	a3 e5       	ldi	r26, 0x53	; 83
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e3 e5       	ldi	r30, 0x53	; 83
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7e       	andi	r24, 0xEF	; 239
    1998:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    199a:	a3 e5       	ldi	r26, 0x53	; 83
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e3 e5       	ldi	r30, 0x53	; 83
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7d       	andi	r24, 0xDF	; 223
    19a6:	8c 93       	st	X, r24
    19a8:	90 c0       	rjmp	.+288    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_FAST_PWM_MODE_NON_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    19aa:	a3 e5       	ldi	r26, 0x53	; 83
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e3 e5       	ldi	r30, 0x53	; 83
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 64       	ori	r24, 0x40	; 64
    19b6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    19b8:	a3 e5       	ldi	r26, 0x53	; 83
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e3 e5       	ldi	r30, 0x53	; 83
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	88 60       	ori	r24, 0x08	; 8
    19c4:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    19c6:	a3 e5       	ldi	r26, 0x53	; 83
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e3 e5       	ldi	r30, 0x53	; 83
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 7e       	andi	r24, 0xEF	; 239
    19d2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    19d4:	a3 e5       	ldi	r26, 0x53	; 83
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e3 e5       	ldi	r30, 0x53	; 83
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 62       	ori	r24, 0x20	; 32
    19e0:	8c 93       	st	X, r24
    19e2:	73 c0       	rjmp	.+230    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_FAST_PWM_MODE_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    19e4:	a3 e5       	ldi	r26, 0x53	; 83
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e3 e5       	ldi	r30, 0x53	; 83
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 64       	ori	r24, 0x40	; 64
    19f0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    19f2:	a3 e5       	ldi	r26, 0x53	; 83
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e3 e5       	ldi	r30, 0x53	; 83
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	88 60       	ori	r24, 0x08	; 8
    19fe:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1a00:	a3 e5       	ldi	r26, 0x53	; 83
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e3 e5       	ldi	r30, 0x53	; 83
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 61       	ori	r24, 0x10	; 16
    1a0c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1a0e:	a3 e5       	ldi	r26, 0x53	; 83
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e3 e5       	ldi	r30, 0x53	; 83
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 62       	ori	r24, 0x20	; 32
    1a1a:	8c 93       	st	X, r24
    1a1c:	56 c0       	rjmp	.+172    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

		/* ============== PHASE CORRECT PWM MODE ============== */
	case TIM0_PHASE_CORRECT_PWM_MODE_OUTPUT_COMPARE_OFF:
		SET_BIT(TCCR0,6);	//WGM00
    1a1e:	a3 e5       	ldi	r26, 0x53	; 83
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e3 e5       	ldi	r30, 0x53	; 83
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 64       	ori	r24, 0x40	; 64
    1a2a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1a2c:	a3 e5       	ldi	r26, 0x53	; 83
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e3 e5       	ldi	r30, 0x53	; 83
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	87 7f       	andi	r24, 0xF7	; 247
    1a38:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1a3a:	a3 e5       	ldi	r26, 0x53	; 83
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e5       	ldi	r30, 0x53	; 83
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	8f 7e       	andi	r24, 0xEF	; 239
    1a46:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    1a48:	a3 e5       	ldi	r26, 0x53	; 83
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e5       	ldi	r30, 0x53	; 83
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 7d       	andi	r24, 0xDF	; 223
    1a54:	8c 93       	st	X, r24
    1a56:	39 c0       	rjmp	.+114    	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_PHASE_CORRECT_PWM_MODE_NON_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    1a58:	a3 e5       	ldi	r26, 0x53	; 83
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e3 e5       	ldi	r30, 0x53	; 83
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 64       	ori	r24, 0x40	; 64
    1a64:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1a66:	a3 e5       	ldi	r26, 0x53	; 83
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e3 e5       	ldi	r30, 0x53	; 83
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	87 7f       	andi	r24, 0xF7	; 247
    1a72:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1a74:	a3 e5       	ldi	r26, 0x53	; 83
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e3 e5       	ldi	r30, 0x53	; 83
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 7e       	andi	r24, 0xEF	; 239
    1a80:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1a82:	a3 e5       	ldi	r26, 0x53	; 83
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e3 e5       	ldi	r30, 0x53	; 83
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 62       	ori	r24, 0x20	; 32
    1a8e:	8c 93       	st	X, r24
    1a90:	1c c0       	rjmp	.+56     	; 0x1aca <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_PHASE_CORRECT_PWM_MODE_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    1a92:	a3 e5       	ldi	r26, 0x53	; 83
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e3 e5       	ldi	r30, 0x53	; 83
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	80 64       	ori	r24, 0x40	; 64
    1a9e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1aa0:	a3 e5       	ldi	r26, 0x53	; 83
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e3 e5       	ldi	r30, 0x53	; 83
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	87 7f       	andi	r24, 0xF7	; 247
    1aac:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1aae:	a3 e5       	ldi	r26, 0x53	; 83
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e3 e5       	ldi	r30, 0x53	; 83
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	80 61       	ori	r24, 0x10	; 16
    1aba:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1abc:	a3 e5       	ldi	r26, 0x53	; 83
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e3 e5       	ldi	r30, 0x53	; 83
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 62       	ori	r24, 0x20	; 32
    1ac8:	8c 93       	st	X, r24
		break;
	}

}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <MCAL_TIM0_ClearTimer>:


/* To clear the timer 0 */
void MCAL_TIM0_ClearTimer()
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    1ade:	e2 e5       	ldi	r30, 0x52	; 82
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	10 82       	st	Z, r1
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <MCAL_TIM0_GetElapsedTime>:


/* To get the elapsed time since the timer starts from BOTTOM (0x00) */
u8 MCAL_TIM0_GetElapsedTime()
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1af2:	e2 e5       	ldi	r30, 0x52	; 82
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <MCAL_TIM0_GetRemainingTime>:


/* To get the remaining time to reach the TOP value */
u8 MCAL_TIM0_GetRemainingTime(u8 TOP)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
	return (TOP - TCNT0);
    1b0a:	e2 e5       	ldi	r30, 0x52	; 82
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	90 81       	ld	r25, Z
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	89 1b       	sub	r24, r25
}
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <MCAL_TIM0_BusyWait>:


/* To let the CPU wait for a specified time (Delay in ms) */
void MCAL_TIM0_BusyWait(u32 Copy_Delay)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <MCAL_TIM0_BusyWait+0x6>
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <MCAL_TIM0_BusyWait+0x8>
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	69 83       	std	Y+1, r22	; 0x01
    1b2c:	7a 83       	std	Y+2, r23	; 0x02
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	9c 83       	std	Y+4, r25	; 0x04
	MCAL_TIM0_SetCompareValue(199);
    1b32:	87 ec       	ldi	r24, 0xC7	; 199
    1b34:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <MCAL_TIM0_SetCompareValue>
	MCAL_TIM0_StartTimer();
    1b38:	0e 94 40 0b 	call	0x1680	; 0x1680 <MCAL_TIM0_StartTimer>
    1b3c:	10 c0       	rjmp	.+32     	; 0x1b5e <MCAL_TIM0_BusyWait+0x42>
	while(Copy_Delay--)
	{
		while(!GET_BIT(TIFR,0));
    1b3e:	e8 e5       	ldi	r30, 0x58	; 88
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	81 70       	andi	r24, 0x01	; 1
    1b4a:	90 70       	andi	r25, 0x00	; 0
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	b9 f3       	breq	.-18     	; 0x1b3e <MCAL_TIM0_BusyWait+0x22>
		SET_BIT(TIFR,0);
    1b50:	a8 e5       	ldi	r26, 0x58	; 88
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e5       	ldi	r30, 0x58	; 88
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	8c 93       	st	X, r24
/* To let the CPU wait for a specified time (Delay in ms) */
void MCAL_TIM0_BusyWait(u32 Copy_Delay)
{
	MCAL_TIM0_SetCompareValue(199);
	MCAL_TIM0_StartTimer();
	while(Copy_Delay--)
    1b5e:	1d 82       	std	Y+5, r1	; 0x05
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	9a 81       	ldd	r25, Y+2	; 0x02
    1b64:	ab 81       	ldd	r26, Y+3	; 0x03
    1b66:	bc 81       	ldd	r27, Y+4	; 0x04
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	a1 05       	cpc	r26, r1
    1b6c:	b1 05       	cpc	r27, r1
    1b6e:	11 f0       	breq	.+4      	; 0x1b74 <MCAL_TIM0_BusyWait+0x58>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	ab 81       	ldd	r26, Y+3	; 0x03
    1b7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	a1 09       	sbc	r26, r1
    1b80:	b1 09       	sbc	r27, r1
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	ab 83       	std	Y+3, r26	; 0x03
    1b88:	bc 83       	std	Y+4, r27	; 0x04
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	88 23       	and	r24, r24
    1b8e:	b9 f6       	brne	.-82     	; 0x1b3e <MCAL_TIM0_BusyWait+0x22>
	{
		while(!GET_BIT(TIFR,0));
		SET_BIT(TIFR,0);
	}
	MCAL_TIM0_StartTimer();
    1b90:	0e 94 40 0b 	call	0x1680	; 0x1680 <MCAL_TIM0_StartTimer>
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <MCAL_TIM0_SetCompareValue>:


/* To set the compare value/threshold for timer 0 */
void MCAL_TIM0_SetCompareValue(u8 TOP)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	0f 92       	push	r0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = TOP;
    1bb0:	ec e5       	ldi	r30, 0x5C	; 92
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	80 83       	st	Z, r24
}
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <MCAL_TIM0_EnableOVFInterrupt>:


/* To enable the timer 0 interrupt on overflow */
void MCAL_TIM0_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <MCAL_TIM0_EnableOVFInterrupt+0x6>
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,0);
    1bce:	a9 e5       	ldi	r26, 0x59	; 89
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e9 e5       	ldi	r30, 0x59	; 89
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 60       	ori	r24, 0x01	; 1
    1bda:	8c 93       	st	X, r24
	if(CallbackFunction != NULL)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	31 f0       	breq	.+12     	; 0x1bf0 <MCAL_TIM0_EnableOVFInterrupt+0x30>
	{
		TIM0_OVF_ISR = CallbackFunction;
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	90 93 6b 00 	sts	0x006B, r25
    1bec:	80 93 6a 00 	sts	0x006A, r24
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <MCAL_TIM0_EnableCOMPInterrupt>:


/* To enable the timer 0 interrupt on compare match */
void MCAL_TIM0_EnableCOMPInterrupt(void(*CallbackFunction)(void))
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <MCAL_TIM0_EnableCOMPInterrupt+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,1);
    1c08:	a9 e5       	ldi	r26, 0x59	; 89
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e9 e5       	ldi	r30, 0x59	; 89
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	82 60       	ori	r24, 0x02	; 2
    1c14:	8c 93       	st	X, r24
	if(CallbackFunction != NULL)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	31 f0       	breq	.+12     	; 0x1c2a <MCAL_TIM0_EnableCOMPInterrupt+0x30>
	{
		TIM0_COMP_ISR = CallbackFunction;
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	90 93 69 00 	sts	0x0069, r25
    1c26:	80 93 68 00 	sts	0x0068, r24
	}
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <MCAL_TIM0_DisableOVFInterrupt>:


/* To disable the timer 0 interrupt on overflow */
void MCAL_TIM0_DisableOVFInterrupt()
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    1c3c:	a9 e5       	ldi	r26, 0x59	; 89
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e9 e5       	ldi	r30, 0x59	; 89
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8e 7f       	andi	r24, 0xFE	; 254
    1c48:	8c 93       	st	X, r24
	TIM0_OVF_ISR = NULL;
    1c4a:	10 92 6b 00 	sts	0x006B, r1
    1c4e:	10 92 6a 00 	sts	0x006A, r1
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <MCAL_TIM0_DisableCOMPInterrupt>:


/* To disable the timer 0 interrupt on compare match */
void MCAL_TIM0_DisableCOMPInterrupt()
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    1c60:	a9 e5       	ldi	r26, 0x59	; 89
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e9 e5       	ldi	r30, 0x59	; 89
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8d 7f       	andi	r24, 0xFD	; 253
    1c6c:	8c 93       	st	X, r24
	TIM0_COMP_ISR = NULL;
    1c6e:	10 92 69 00 	sts	0x0069, r1
    1c72:	10 92 68 00 	sts	0x0068, r1
}
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <__vector_10>:


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void)		// TIMER0 COMP
{
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_COMP_ISR != NULL)
    1ca6:	80 91 68 00 	lds	r24, 0x0068
    1caa:	90 91 69 00 	lds	r25, 0x0069
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <__vector_10+0x40>
	{
		TIM0_COMP_ISR();
    1cb2:	e0 91 68 00 	lds	r30, 0x0068
    1cb6:	f0 91 69 00 	lds	r31, 0x0069
    1cba:	09 95       	icall
	}
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	0f 90       	pop	r0
    1cde:	1f 90       	pop	r1
    1ce0:	18 95       	reti

00001ce2 <__vector_11>:


void __vector_11(void) __attribute__((signal, used));
void __vector_11(void)		// TIMER0 OVF
{
    1ce2:	1f 92       	push	r1
    1ce4:	0f 92       	push	r0
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	0f 92       	push	r0
    1cea:	11 24       	eor	r1, r1
    1cec:	2f 93       	push	r18
    1cee:	3f 93       	push	r19
    1cf0:	4f 93       	push	r20
    1cf2:	5f 93       	push	r21
    1cf4:	6f 93       	push	r22
    1cf6:	7f 93       	push	r23
    1cf8:	8f 93       	push	r24
    1cfa:	9f 93       	push	r25
    1cfc:	af 93       	push	r26
    1cfe:	bf 93       	push	r27
    1d00:	ef 93       	push	r30
    1d02:	ff 93       	push	r31
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_OVF_ISR != NULL)
    1d0c:	80 91 6a 00 	lds	r24, 0x006A
    1d10:	90 91 6b 00 	lds	r25, 0x006B
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	29 f0       	breq	.+10     	; 0x1d22 <__vector_11+0x40>
	{
		TIM0_OVF_ISR();
    1d18:	e0 91 6a 00 	lds	r30, 0x006A
    1d1c:	f0 91 6b 00 	lds	r31, 0x006B
    1d20:	09 95       	icall
	}
}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <MCAL_TIM1_EnableTimer>:
void (*TIM1_CAPT_ISR) (void);


/* To Enable the TIM1 & Select the timer 1 clock */
void MCAL_TIM1_EnableTimer()
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= TIM1_CLK_SOUCRE;
    1d50:	ae e4       	ldi	r26, 0x4E	; 78
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	ee e4       	ldi	r30, 0x4E	; 78
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	8c 93       	st	X, r24
}
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <MCAL_TIM1_StopTimer>:


/* To Stop the TIM1 */
void MCAL_TIM1_StopTimer()
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    1d6c:	ae e4       	ldi	r26, 0x4E	; 78
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ee e4       	ldi	r30, 0x4E	; 78
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	88 7f       	andi	r24, 0xF8	; 248
    1d78:	8c 93       	st	X, r24
}
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <MCAL_TIM1_Preset>:


void MCAL_TIM1_Preset(u16 Copy_PresetValue)
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <MCAL_TIM1_Preset+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_PresetValue;
    1d8e:	ec e4       	ldi	r30, 0x4C	; 76
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <MCAL_TIM1_SetTimerCompareMode>:


/* To select the TIM1 mode of operation */
void MCAL_TIM1_SetTimerCompareMode(u8 Mode)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <MCAL_TIM1_SetTimerCompareMode+0x6>
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	3b 83       	std	Y+3, r19	; 0x03
    1dba:	2a 83       	std	Y+2, r18	; 0x02
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	8e 30       	cpi	r24, 0x0E	; 14
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <MCAL_TIM1_SetTimerCompareMode+0x24>
    1dc6:	89 c2       	rjmp	.+1298   	; 0x22da <MCAL_TIM1_SetTimerCompareMode+0x536>
    1dc8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dca:	3b 81       	ldd	r19, Y+3	; 0x03
    1dcc:	2f 30       	cpi	r18, 0x0F	; 15
    1dce:	31 05       	cpc	r19, r1
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <MCAL_TIM1_SetTimerCompareMode+0x30>
    1dd2:	54 c0       	rjmp	.+168    	; 0x1e7c <MCAL_TIM1_SetTimerCompareMode+0xd8>
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	86 30       	cpi	r24, 0x06	; 6
    1dda:	91 05       	cpc	r25, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <MCAL_TIM1_SetTimerCompareMode+0x3c>
    1dde:	81 c1       	rjmp	.+770    	; 0x20e2 <MCAL_TIM1_SetTimerCompareMode+0x33e>
    1de0:	2a 81       	ldd	r18, Y+2	; 0x02
    1de2:	3b 81       	ldd	r19, Y+3	; 0x03
    1de4:	27 30       	cpi	r18, 0x07	; 7
    1de6:	31 05       	cpc	r19, r1
    1de8:	24 f5       	brge	.+72     	; 0x1e32 <MCAL_TIM1_SetTimerCompareMode+0x8e>
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	9b 81       	ldd	r25, Y+3	; 0x03
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <MCAL_TIM1_SetTimerCompareMode+0x52>
    1df4:	e6 c0       	rjmp	.+460    	; 0x1fc2 <MCAL_TIM1_SetTimerCompareMode+0x21e>
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	23 30       	cpi	r18, 0x03	; 3
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	64 f4       	brge	.+24     	; 0x1e18 <MCAL_TIM1_SetTimerCompareMode+0x74>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <MCAL_TIM1_SetTimerCompareMode+0x66>
    1e08:	94 c0       	rjmp	.+296    	; 0x1f32 <MCAL_TIM1_SetTimerCompareMode+0x18e>
    1e0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0e:	21 30       	cpi	r18, 0x01	; 1
    1e10:	31 05       	cpc	r19, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <MCAL_TIM1_SetTimerCompareMode+0x72>
    1e14:	b2 c0       	rjmp	.+356    	; 0x1f7a <MCAL_TIM1_SetTimerCompareMode+0x1d6>
    1e16:	a8 c2       	rjmp	.+1360   	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1c:	84 30       	cpi	r24, 0x04	; 4
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <MCAL_TIM1_SetTimerCompareMode+0x80>
    1e22:	17 c1       	rjmp	.+558    	; 0x2052 <MCAL_TIM1_SetTimerCompareMode+0x2ae>
    1e24:	2a 81       	ldd	r18, Y+2	; 0x02
    1e26:	3b 81       	ldd	r19, Y+3	; 0x03
    1e28:	25 30       	cpi	r18, 0x05	; 5
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <MCAL_TIM1_SetTimerCompareMode+0x8c>
    1e2e:	35 c1       	rjmp	.+618    	; 0x209a <MCAL_TIM1_SetTimerCompareMode+0x2f6>
    1e30:	ec c0       	rjmp	.+472    	; 0x200a <MCAL_TIM1_SetTimerCompareMode+0x266>
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	9b 81       	ldd	r25, Y+3	; 0x03
    1e36:	8a 30       	cpi	r24, 0x0A	; 10
    1e38:	91 05       	cpc	r25, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <MCAL_TIM1_SetTimerCompareMode+0x9a>
    1e3c:	d0 c1       	rjmp	.+928    	; 0x21de <MCAL_TIM1_SetTimerCompareMode+0x43a>
    1e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e40:	3b 81       	ldd	r19, Y+3	; 0x03
    1e42:	2b 30       	cpi	r18, 0x0B	; 11
    1e44:	31 05       	cpc	r19, r1
    1e46:	6c f4       	brge	.+26     	; 0x1e62 <MCAL_TIM1_SetTimerCompareMode+0xbe>
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <MCAL_TIM1_SetTimerCompareMode+0xb0>
    1e52:	8f c1       	rjmp	.+798    	; 0x2172 <MCAL_TIM1_SetTimerCompareMode+0x3ce>
    1e54:	2a 81       	ldd	r18, Y+2	; 0x02
    1e56:	3b 81       	ldd	r19, Y+3	; 0x03
    1e58:	29 30       	cpi	r18, 0x09	; 9
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	0c f0       	brlt	.+2      	; 0x1e60 <MCAL_TIM1_SetTimerCompareMode+0xbc>
    1e5e:	ad c1       	rjmp	.+858    	; 0x21ba <MCAL_TIM1_SetTimerCompareMode+0x416>
    1e60:	64 c1       	rjmp	.+712    	; 0x212a <MCAL_TIM1_SetTimerCompareMode+0x386>
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	8c 30       	cpi	r24, 0x0C	; 12
    1e68:	91 05       	cpc	r25, r1
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <MCAL_TIM1_SetTimerCompareMode+0xca>
    1e6c:	00 c2       	rjmp	.+1024   	; 0x226e <MCAL_TIM1_SetTimerCompareMode+0x4ca>
    1e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e70:	3b 81       	ldd	r19, Y+3	; 0x03
    1e72:	2d 30       	cpi	r18, 0x0D	; 13
    1e74:	31 05       	cpc	r19, r1
    1e76:	0c f0       	brlt	.+2      	; 0x1e7a <MCAL_TIM1_SetTimerCompareMode+0xd6>
    1e78:	1e c2       	rjmp	.+1084   	; 0x22b6 <MCAL_TIM1_SetTimerCompareMode+0x512>
    1e7a:	d5 c1       	rjmp	.+938    	; 0x2226 <MCAL_TIM1_SetTimerCompareMode+0x482>
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	86 31       	cpi	r24, 0x16	; 22
    1e82:	91 05       	cpc	r25, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <MCAL_TIM1_SetTimerCompareMode+0xe4>
    1e86:	3f c1       	rjmp	.+638    	; 0x2106 <MCAL_TIM1_SetTimerCompareMode+0x362>
    1e88:	2a 81       	ldd	r18, Y+2	; 0x02
    1e8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e8c:	27 31       	cpi	r18, 0x17	; 23
    1e8e:	31 05       	cpc	r19, r1
    1e90:	2c f5       	brge	.+74     	; 0x1edc <MCAL_TIM1_SetTimerCompareMode+0x138>
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	82 31       	cpi	r24, 0x12	; 18
    1e98:	91 05       	cpc	r25, r1
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <MCAL_TIM1_SetTimerCompareMode+0xfa>
    1e9c:	a4 c0       	rjmp	.+328    	; 0x1fe6 <MCAL_TIM1_SetTimerCompareMode+0x242>
    1e9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea2:	23 31       	cpi	r18, 0x13	; 19
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	6c f4       	brge	.+26     	; 0x1ec2 <MCAL_TIM1_SetTimerCompareMode+0x11e>
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	80 31       	cpi	r24, 0x10	; 16
    1eae:	91 05       	cpc	r25, r1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <MCAL_TIM1_SetTimerCompareMode+0x110>
    1eb2:	51 c0       	rjmp	.+162    	; 0x1f56 <MCAL_TIM1_SetTimerCompareMode+0x1b2>
    1eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1eb6:	3b 81       	ldd	r19, Y+3	; 0x03
    1eb8:	21 31       	cpi	r18, 0x11	; 17
    1eba:	31 05       	cpc	r19, r1
    1ebc:	0c f0       	brlt	.+2      	; 0x1ec0 <MCAL_TIM1_SetTimerCompareMode+0x11c>
    1ebe:	6f c0       	rjmp	.+222    	; 0x1f9e <MCAL_TIM1_SetTimerCompareMode+0x1fa>
    1ec0:	30 c2       	rjmp	.+1120   	; 0x2322 <MCAL_TIM1_SetTimerCompareMode+0x57e>
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	84 31       	cpi	r24, 0x14	; 20
    1ec8:	91 05       	cpc	r25, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <MCAL_TIM1_SetTimerCompareMode+0x12a>
    1ecc:	d4 c0       	rjmp	.+424    	; 0x2076 <MCAL_TIM1_SetTimerCompareMode+0x2d2>
    1ece:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ed2:	25 31       	cpi	r18, 0x15	; 21
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	0c f0       	brlt	.+2      	; 0x1eda <MCAL_TIM1_SetTimerCompareMode+0x136>
    1ed8:	f2 c0       	rjmp	.+484    	; 0x20be <MCAL_TIM1_SetTimerCompareMode+0x31a>
    1eda:	a9 c0       	rjmp	.+338    	; 0x202e <MCAL_TIM1_SetTimerCompareMode+0x28a>
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	8a 31       	cpi	r24, 0x1A	; 26
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <MCAL_TIM1_SetTimerCompareMode+0x144>
    1ee6:	b1 c1       	rjmp	.+866    	; 0x224a <MCAL_TIM1_SetTimerCompareMode+0x4a6>
    1ee8:	2a 81       	ldd	r18, Y+2	; 0x02
    1eea:	3b 81       	ldd	r19, Y+3	; 0x03
    1eec:	2b 31       	cpi	r18, 0x1B	; 27
    1eee:	31 05       	cpc	r19, r1
    1ef0:	6c f4       	brge	.+26     	; 0x1f0c <MCAL_TIM1_SetTimerCompareMode+0x168>
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	88 31       	cpi	r24, 0x18	; 24
    1ef8:	91 05       	cpc	r25, r1
    1efa:	09 f4       	brne	.+2      	; 0x1efe <MCAL_TIM1_SetTimerCompareMode+0x15a>
    1efc:	4c c1       	rjmp	.+664    	; 0x2196 <MCAL_TIM1_SetTimerCompareMode+0x3f2>
    1efe:	2a 81       	ldd	r18, Y+2	; 0x02
    1f00:	3b 81       	ldd	r19, Y+3	; 0x03
    1f02:	29 31       	cpi	r18, 0x19	; 25
    1f04:	31 05       	cpc	r19, r1
    1f06:	0c f0       	brlt	.+2      	; 0x1f0a <MCAL_TIM1_SetTimerCompareMode+0x166>
    1f08:	7c c1       	rjmp	.+760    	; 0x2202 <MCAL_TIM1_SetTimerCompareMode+0x45e>
    1f0a:	21 c1       	rjmp	.+578    	; 0x214e <MCAL_TIM1_SetTimerCompareMode+0x3aa>
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f10:	8c 31       	cpi	r24, 0x1C	; 28
    1f12:	91 05       	cpc	r25, r1
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <MCAL_TIM1_SetTimerCompareMode+0x174>
    1f16:	f3 c1       	rjmp	.+998    	; 0x22fe <MCAL_TIM1_SetTimerCompareMode+0x55a>
    1f18:	2a 81       	ldd	r18, Y+2	; 0x02
    1f1a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f1c:	2c 31       	cpi	r18, 0x1C	; 28
    1f1e:	31 05       	cpc	r19, r1
    1f20:	0c f4       	brge	.+2      	; 0x1f24 <MCAL_TIM1_SetTimerCompareMode+0x180>
    1f22:	b7 c1       	rjmp	.+878    	; 0x2292 <MCAL_TIM1_SetTimerCompareMode+0x4ee>
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	8d 31       	cpi	r24, 0x1D	; 29
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <MCAL_TIM1_SetTimerCompareMode+0x18c>
    1f2e:	0b c2       	rjmp	.+1046   	; 0x2346 <MCAL_TIM1_SetTimerCompareMode+0x5a2>
    1f30:	1b c2       	rjmp	.+1078   	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
	{

	/* ============== NORMAL MODE ============== */
	case TIM1_NORMAL_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    1f32:	af e4       	ldi	r26, 0x4F	; 79
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e4       	ldi	r30, 0x4F	; 79
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8f 77       	andi	r24, 0x7F	; 127
    1f3e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    1f40:	af e4       	ldi	r26, 0x4F	; 79
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ef e4       	ldi	r30, 0x4F	; 79
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 7b       	andi	r24, 0xBF	; 191
    1f4c:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    1f54:	09 c2       	rjmp	.+1042   	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    1f56:	af e4       	ldi	r26, 0x4F	; 79
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	ef e4       	ldi	r30, 0x4F	; 79
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	8f 7d       	andi	r24, 0xDF	; 223
    1f62:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    1f64:	af e4       	ldi	r26, 0x4F	; 79
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	ef e4       	ldi	r30, 0x4F	; 79
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8f 7e       	andi	r24, 0xEF	; 239
    1f70:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    1f78:	f7 c1       	rjmp	.+1006   	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    1f7a:	af e4       	ldi	r26, 0x4F	; 79
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	ef e4       	ldi	r30, 0x4F	; 79
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8f 77       	andi	r24, 0x7F	; 127
    1f86:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    1f88:	af e4       	ldi	r26, 0x4F	; 79
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ef e4       	ldi	r30, 0x4F	; 79
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 64       	ori	r24, 0x40	; 64
    1f94:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    1f9c:	e5 c1       	rjmp	.+970    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_TOGGLE_OC1B_ON_COMPARE:
		CLR_BIT(TCCR1A,5);	//COM1B1
    1f9e:	af e4       	ldi	r26, 0x4F	; 79
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	ef e4       	ldi	r30, 0x4F	; 79
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	8f 7d       	andi	r24, 0xDF	; 223
    1faa:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    1fac:	af e4       	ldi	r26, 0x4F	; 79
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	ef e4       	ldi	r30, 0x4F	; 79
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 61       	ori	r24, 0x10	; 16
    1fb8:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    1fc0:	d3 c1       	rjmp	.+934    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_CLEAR_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    1fc2:	af e4       	ldi	r26, 0x4F	; 79
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	ef e4       	ldi	r30, 0x4F	; 79
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    1fd0:	af e4       	ldi	r26, 0x4F	; 79
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	ef e4       	ldi	r30, 0x4F	; 79
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 7b       	andi	r24, 0xBF	; 191
    1fdc:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    1fe4:	c1 c1       	rjmp	.+898    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_CLEAR_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    1fe6:	af e4       	ldi	r26, 0x4F	; 79
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	ef e4       	ldi	r30, 0x4F	; 79
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	80 62       	ori	r24, 0x20	; 32
    1ff2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    1ff4:	af e4       	ldi	r26, 0x4F	; 79
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ef e4       	ldi	r30, 0x4F	; 79
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 7e       	andi	r24, 0xEF	; 239
    2000:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2008:	af c1       	rjmp	.+862    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_SET_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    200a:	af e4       	ldi	r26, 0x4F	; 79
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	ef e4       	ldi	r30, 0x4F	; 79
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	80 68       	ori	r24, 0x80	; 128
    2016:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    2018:	af e4       	ldi	r26, 0x4F	; 79
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ef e4       	ldi	r30, 0x4F	; 79
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    202c:	9d c1       	rjmp	.+826    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_SET_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    202e:	af e4       	ldi	r26, 0x4F	; 79
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ef e4       	ldi	r30, 0x4F	; 79
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 62       	ori	r24, 0x20	; 32
    203a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    203c:	af e4       	ldi	r26, 0x4F	; 79
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ef e4       	ldi	r30, 0x4F	; 79
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	80 61       	ori	r24, 0x10	; 16
    2048:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2050:	8b c1       	rjmp	.+790    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	/* =============== CTC MODE ================ */
	case TIM1_CTC_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    2052:	af e4       	ldi	r26, 0x4F	; 79
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	ef e4       	ldi	r30, 0x4F	; 79
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 77       	andi	r24, 0x7F	; 127
    205e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2060:	af e4       	ldi	r26, 0x4F	; 79
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	ef e4       	ldi	r30, 0x4F	; 79
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8f 7b       	andi	r24, 0xBF	; 191
    206c:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    206e:	84 e0       	ldi	r24, 0x04	; 4
    2070:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2074:	79 c1       	rjmp	.+754    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2076:	af e4       	ldi	r26, 0x4F	; 79
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	ef e4       	ldi	r30, 0x4F	; 79
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	8f 7d       	andi	r24, 0xDF	; 223
    2082:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2084:	af e4       	ldi	r26, 0x4F	; 79
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	ef e4       	ldi	r30, 0x4F	; 79
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 7e       	andi	r24, 0xEF	; 239
    2090:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    2092:	84 e0       	ldi	r24, 0x04	; 4
    2094:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2098:	67 c1       	rjmp	.+718    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    209a:	af e4       	ldi	r26, 0x4F	; 79
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ef e4       	ldi	r30, 0x4F	; 79
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8f 77       	andi	r24, 0x7F	; 127
    20a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    20a8:	af e4       	ldi	r26, 0x4F	; 79
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ef e4       	ldi	r30, 0x4F	; 79
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 64       	ori	r24, 0x40	; 64
    20b4:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    20b6:	84 e0       	ldi	r24, 0x04	; 4
    20b8:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    20bc:	55 c1       	rjmp	.+682    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_TOGGLE_OC1B_ON_COMPARE:
		CLR_BIT(TCCR1A,5);	//COM1B1
    20be:	af e4       	ldi	r26, 0x4F	; 79
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	ef e4       	ldi	r30, 0x4F	; 79
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	8f 7d       	andi	r24, 0xDF	; 223
    20ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    20cc:	af e4       	ldi	r26, 0x4F	; 79
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ef e4       	ldi	r30, 0x4F	; 79
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 61       	ori	r24, 0x10	; 16
    20d8:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    20da:	84 e0       	ldi	r24, 0x04	; 4
    20dc:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    20e0:	43 c1       	rjmp	.+646    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_CLEAR_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    20e2:	af e4       	ldi	r26, 0x4F	; 79
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ef e4       	ldi	r30, 0x4F	; 79
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 68       	ori	r24, 0x80	; 128
    20ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    20f0:	af e4       	ldi	r26, 0x4F	; 79
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ef e4       	ldi	r30, 0x4F	; 79
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8f 7b       	andi	r24, 0xBF	; 191
    20fc:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    20fe:	84 e0       	ldi	r24, 0x04	; 4
    2100:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2104:	31 c1       	rjmp	.+610    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_CLEAR_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    2106:	af e4       	ldi	r26, 0x4F	; 79
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	ef e4       	ldi	r30, 0x4F	; 79
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 62       	ori	r24, 0x20	; 32
    2112:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2114:	af e4       	ldi	r26, 0x4F	; 79
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	ef e4       	ldi	r30, 0x4F	; 79
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8f 7e       	andi	r24, 0xEF	; 239
    2120:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    2122:	84 e0       	ldi	r24, 0x04	; 4
    2124:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2128:	1f c1       	rjmp	.+574    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_SET_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    212a:	af e4       	ldi	r26, 0x4F	; 79
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ef e4       	ldi	r30, 0x4F	; 79
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 68       	ori	r24, 0x80	; 128
    2136:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    2138:	af e4       	ldi	r26, 0x4F	; 79
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ef e4       	ldi	r30, 0x4F	; 79
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	80 64       	ori	r24, 0x40	; 64
    2144:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    2146:	84 e0       	ldi	r24, 0x04	; 4
    2148:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    214c:	0d c1       	rjmp	.+538    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_SET_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    214e:	af e4       	ldi	r26, 0x4F	; 79
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	ef e4       	ldi	r30, 0x4F	; 79
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 62       	ori	r24, 0x20	; 32
    215a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    215c:	af e4       	ldi	r26, 0x4F	; 79
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	ef e4       	ldi	r30, 0x4F	; 79
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 61       	ori	r24, 0x10	; 16
    2168:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    216a:	84 e0       	ldi	r24, 0x04	; 4
    216c:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2170:	fb c0       	rjmp	.+502    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	/* ============= FAST PWM MODE ============ */
	case TIM1_FAST_PWM_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    2172:	af e4       	ldi	r26, 0x4F	; 79
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ef e4       	ldi	r30, 0x4F	; 79
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8f 77       	andi	r24, 0x7F	; 127
    217e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2180:	af e4       	ldi	r26, 0x4F	; 79
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ef e4       	ldi	r30, 0x4F	; 79
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8f 7b       	andi	r24, 0xBF	; 191
    218c:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    218e:	8e e0       	ldi	r24, 0x0E	; 14
    2190:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2194:	e9 c0       	rjmp	.+466    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2196:	af e4       	ldi	r26, 0x4F	; 79
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ef e4       	ldi	r30, 0x4F	; 79
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7d       	andi	r24, 0xDF	; 223
    21a2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    21a4:	af e4       	ldi	r26, 0x4F	; 79
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	ef e4       	ldi	r30, 0x4F	; 79
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8f 7e       	andi	r24, 0xEF	; 239
    21b0:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    21b2:	8e e0       	ldi	r24, 0x0E	; 14
    21b4:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    21b8:	d7 c0       	rjmp	.+430    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    21ba:	af e4       	ldi	r26, 0x4F	; 79
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ef e4       	ldi	r30, 0x4F	; 79
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 77       	andi	r24, 0x7F	; 127
    21c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    21c8:	af e4       	ldi	r26, 0x4F	; 79
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ef e4       	ldi	r30, 0x4F	; 79
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	80 64       	ori	r24, 0x40	; 64
    21d4:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    21d6:	8e e0       	ldi	r24, 0x0E	; 14
    21d8:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    21dc:	c5 c0       	rjmp	.+394    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1A_NON_INVERTED:
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_IC_MODE);
    21de:	8d e0       	ldi	r24, 0x0D	; 13
    21e0:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
		SET_BIT(TCCR1A,7);	//COM1A1
    21e4:	af e4       	ldi	r26, 0x4F	; 79
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	ef e4       	ldi	r30, 0x4F	; 79
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 68       	ori	r24, 0x80	; 128
    21f0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    21f2:	af e4       	ldi	r26, 0x4F	; 79
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef e4       	ldi	r30, 0x4F	; 79
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8f 7b       	andi	r24, 0xBF	; 191
    21fe:	8c 93       	st	X, r24
    2200:	b3 c0       	rjmp	.+358    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1B_NON_INVERTED:
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_IC_MODE);
    2202:	8d e0       	ldi	r24, 0x0D	; 13
    2204:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
		SET_BIT(TCCR1A,5);	//COM1B1
    2208:	af e4       	ldi	r26, 0x4F	; 79
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	ef e4       	ldi	r30, 0x4F	; 79
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	80 62       	ori	r24, 0x20	; 32
    2214:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2216:	af e4       	ldi	r26, 0x4F	; 79
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ef e4       	ldi	r30, 0x4F	; 79
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 7e       	andi	r24, 0xEF	; 239
    2222:	8c 93       	st	X, r24
    2224:	a1 c0       	rjmp	.+322    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1A_INVERTED:
		SET_BIT(TCCR1A,7);	//COM1A1
    2226:	af e4       	ldi	r26, 0x4F	; 79
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ef e4       	ldi	r30, 0x4F	; 79
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 68       	ori	r24, 0x80	; 128
    2232:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    2234:	af e4       	ldi	r26, 0x4F	; 79
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	ef e4       	ldi	r30, 0x4F	; 79
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	80 64       	ori	r24, 0x40	; 64
    2240:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    2242:	8e e0       	ldi	r24, 0x0E	; 14
    2244:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2248:	8f c0       	rjmp	.+286    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1B_INVERTED:
		SET_BIT(TCCR1A,5);	//COM1B1
    224a:	af e4       	ldi	r26, 0x4F	; 79
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ef e4       	ldi	r30, 0x4F	; 79
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 62       	ori	r24, 0x20	; 32
    2256:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    2258:	af e4       	ldi	r26, 0x4F	; 79
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	ef e4       	ldi	r30, 0x4F	; 79
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 61       	ori	r24, 0x10	; 16
    2264:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    2266:	8e e0       	ldi	r24, 0x0E	; 14
    2268:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    226c:	7d c0       	rjmp	.+250    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	/* === PHASE (AND FREQUENCY) CORRECT PWM MODE === */
	case TIM1_PHASE_CORRECT_PWM_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    226e:	af e4       	ldi	r26, 0x4F	; 79
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ef e4       	ldi	r30, 0x4F	; 79
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 77       	andi	r24, 0x7F	; 127
    227a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    227c:	af e4       	ldi	r26, 0x4F	; 79
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	ef e4       	ldi	r30, 0x4F	; 79
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	8f 7b       	andi	r24, 0xBF	; 191
    2288:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    228a:	8b e0       	ldi	r24, 0x0B	; 11
    228c:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2290:	6b c0       	rjmp	.+214    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2292:	af e4       	ldi	r26, 0x4F	; 79
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ef e4       	ldi	r30, 0x4F	; 79
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8f 7d       	andi	r24, 0xDF	; 223
    229e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    22a0:	af e4       	ldi	r26, 0x4F	; 79
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	ef e4       	ldi	r30, 0x4F	; 79
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 7e       	andi	r24, 0xEF	; 239
    22ac:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    22ae:	8b e0       	ldi	r24, 0x0B	; 11
    22b0:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    22b4:	59 c0       	rjmp	.+178    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    22b6:	af e4       	ldi	r26, 0x4F	; 79
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ef e4       	ldi	r30, 0x4F	; 79
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8f 77       	andi	r24, 0x7F	; 127
    22c2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    22c4:	af e4       	ldi	r26, 0x4F	; 79
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ef e4       	ldi	r30, 0x4F	; 79
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	80 64       	ori	r24, 0x40	; 64
    22d0:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    22d2:	8b e0       	ldi	r24, 0x0B	; 11
    22d4:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    22d8:	47 c0       	rjmp	.+142    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1A_NON_INVERTED:
		SET_BIT(TCCR1A,7);	//COM1A1
    22da:	af e4       	ldi	r26, 0x4F	; 79
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ef e4       	ldi	r30, 0x4F	; 79
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	80 68       	ori	r24, 0x80	; 128
    22e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    22e8:	af e4       	ldi	r26, 0x4F	; 79
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	ef e4       	ldi	r30, 0x4F	; 79
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8f 7b       	andi	r24, 0xBF	; 191
    22f4:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    22f6:	8b e0       	ldi	r24, 0x0B	; 11
    22f8:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    22fc:	35 c0       	rjmp	.+106    	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1B_NON_INVERTED:
		SET_BIT(TCCR1A,5);	//COM1B1
    22fe:	af e4       	ldi	r26, 0x4F	; 79
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	ef e4       	ldi	r30, 0x4F	; 79
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 62       	ori	r24, 0x20	; 32
    230a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    230c:	af e4       	ldi	r26, 0x4F	; 79
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	ef e4       	ldi	r30, 0x4F	; 79
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 7e       	andi	r24, 0xEF	; 239
    2318:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    231a:	8b e0       	ldi	r24, 0x0B	; 11
    231c:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2320:	23 c0       	rjmp	.+70     	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1A_INVERTED:
		SET_BIT(TCCR1A,7);	//COM1A1
    2322:	af e4       	ldi	r26, 0x4F	; 79
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	ef e4       	ldi	r30, 0x4F	; 79
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    2330:	af e4       	ldi	r26, 0x4F	; 79
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	ef e4       	ldi	r30, 0x4F	; 79
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    233e:	8b e0       	ldi	r24, 0x0B	; 11
    2340:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
    2344:	11 c0       	rjmp	.+34     	; 0x2368 <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1B_INVERTED:
		SET_BIT(TCCR1A,5);	//COM1B1
    2346:	af e4       	ldi	r26, 0x4F	; 79
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 62       	ori	r24, 0x20	; 32
    2352:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    2354:	af e4       	ldi	r26, 0x4F	; 79
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	ef e4       	ldi	r30, 0x4F	; 79
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	80 61       	ori	r24, 0x10	; 16
    2360:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    2362:	8b e0       	ldi	r24, 0x0B	; 11
    2364:	0e 94 ba 11 	call	0x2374	; 0x2374 <MCAL_TIM1_SetTimerModeOfOperation>
		break;
	}
}
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <MCAL_TIM1_SetTimerModeOfOperation>:


/* To select the TIM1 Waveform generation mode */
void MCAL_TIM1_SetTimerModeOfOperation(u8 Mode)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <MCAL_TIM1_SetTimerModeOfOperation+0x6>
    237a:	0f 92       	push	r0
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	3b 83       	std	Y+3, r19	; 0x03
    238a:	2a 83       	std	Y+2, r18	; 0x02
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	87 30       	cpi	r24, 0x07	; 7
    2392:	91 05       	cpc	r25, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <MCAL_TIM1_SetTimerModeOfOperation+0x24>
    2396:	24 c1       	rjmp	.+584    	; 0x25e0 <MCAL_TIM1_SetTimerModeOfOperation+0x26c>
    2398:	2a 81       	ldd	r18, Y+2	; 0x02
    239a:	3b 81       	ldd	r19, Y+3	; 0x03
    239c:	28 30       	cpi	r18, 0x08	; 8
    239e:	31 05       	cpc	r19, r1
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <MCAL_TIM1_SetTimerModeOfOperation+0x80>
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	9b 81       	ldd	r25, Y+3	; 0x03
    23a6:	83 30       	cpi	r24, 0x03	; 3
    23a8:	91 05       	cpc	r25, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <MCAL_TIM1_SetTimerModeOfOperation+0x3a>
    23ac:	a5 c0       	rjmp	.+330    	; 0x24f8 <MCAL_TIM1_SetTimerModeOfOperation+0x184>
    23ae:	2a 81       	ldd	r18, Y+2	; 0x02
    23b0:	3b 81       	ldd	r19, Y+3	; 0x03
    23b2:	24 30       	cpi	r18, 0x04	; 4
    23b4:	31 05       	cpc	r19, r1
    23b6:	8c f4       	brge	.+34     	; 0x23da <MCAL_TIM1_SetTimerModeOfOperation+0x66>
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <MCAL_TIM1_SetTimerModeOfOperation+0x50>
    23c2:	60 c0       	rjmp	.+192    	; 0x2484 <MCAL_TIM1_SetTimerModeOfOperation+0x110>
    23c4:	2a 81       	ldd	r18, Y+2	; 0x02
    23c6:	3b 81       	ldd	r19, Y+3	; 0x03
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	0c f0       	brlt	.+2      	; 0x23d0 <MCAL_TIM1_SetTimerModeOfOperation+0x5c>
    23ce:	77 c0       	rjmp	.+238    	; 0x24be <MCAL_TIM1_SetTimerModeOfOperation+0x14a>
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	c9 f1       	breq	.+114    	; 0x244a <MCAL_TIM1_SetTimerModeOfOperation+0xd6>
    23d8:	ea c1       	rjmp	.+980    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
    23da:	2a 81       	ldd	r18, Y+2	; 0x02
    23dc:	3b 81       	ldd	r19, Y+3	; 0x03
    23de:	25 30       	cpi	r18, 0x05	; 5
    23e0:	31 05       	cpc	r19, r1
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <MCAL_TIM1_SetTimerModeOfOperation+0x72>
    23e4:	c3 c0       	rjmp	.+390    	; 0x256c <MCAL_TIM1_SetTimerModeOfOperation+0x1f8>
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	86 30       	cpi	r24, 0x06	; 6
    23ec:	91 05       	cpc	r25, r1
    23ee:	0c f0       	brlt	.+2      	; 0x23f2 <MCAL_TIM1_SetTimerModeOfOperation+0x7e>
    23f0:	da c0       	rjmp	.+436    	; 0x25a6 <MCAL_TIM1_SetTimerModeOfOperation+0x232>
    23f2:	9f c0       	rjmp	.+318    	; 0x2532 <MCAL_TIM1_SetTimerModeOfOperation+0x1be>
    23f4:	2a 81       	ldd	r18, Y+2	; 0x02
    23f6:	3b 81       	ldd	r19, Y+3	; 0x03
    23f8:	2b 30       	cpi	r18, 0x0B	; 11
    23fa:	31 05       	cpc	r19, r1
    23fc:	09 f4       	brne	.+2      	; 0x2400 <MCAL_TIM1_SetTimerModeOfOperation+0x8c>
    23fe:	64 c1       	rjmp	.+712    	; 0x26c8 <MCAL_TIM1_SetTimerModeOfOperation+0x354>
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	8c 30       	cpi	r24, 0x0C	; 12
    2406:	91 05       	cpc	r25, r1
    2408:	6c f4       	brge	.+26     	; 0x2424 <MCAL_TIM1_SetTimerModeOfOperation+0xb0>
    240a:	2a 81       	ldd	r18, Y+2	; 0x02
    240c:	3b 81       	ldd	r19, Y+3	; 0x03
    240e:	29 30       	cpi	r18, 0x09	; 9
    2410:	31 05       	cpc	r19, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <MCAL_TIM1_SetTimerModeOfOperation+0xa2>
    2414:	1f c1       	rjmp	.+574    	; 0x2654 <MCAL_TIM1_SetTimerModeOfOperation+0x2e0>
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	9b 81       	ldd	r25, Y+3	; 0x03
    241a:	8a 30       	cpi	r24, 0x0A	; 10
    241c:	91 05       	cpc	r25, r1
    241e:	0c f0       	brlt	.+2      	; 0x2422 <MCAL_TIM1_SetTimerModeOfOperation+0xae>
    2420:	36 c1       	rjmp	.+620    	; 0x268e <MCAL_TIM1_SetTimerModeOfOperation+0x31a>
    2422:	fb c0       	rjmp	.+502    	; 0x261a <MCAL_TIM1_SetTimerModeOfOperation+0x2a6>
    2424:	2a 81       	ldd	r18, Y+2	; 0x02
    2426:	3b 81       	ldd	r19, Y+3	; 0x03
    2428:	2d 30       	cpi	r18, 0x0D	; 13
    242a:	31 05       	cpc	r19, r1
    242c:	09 f4       	brne	.+2      	; 0x2430 <MCAL_TIM1_SetTimerModeOfOperation+0xbc>
    242e:	86 c1       	rjmp	.+780    	; 0x273c <MCAL_TIM1_SetTimerModeOfOperation+0x3c8>
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	9b 81       	ldd	r25, Y+3	; 0x03
    2434:	8d 30       	cpi	r24, 0x0D	; 13
    2436:	91 05       	cpc	r25, r1
    2438:	0c f4       	brge	.+2      	; 0x243c <MCAL_TIM1_SetTimerModeOfOperation+0xc8>
    243a:	63 c1       	rjmp	.+710    	; 0x2702 <MCAL_TIM1_SetTimerModeOfOperation+0x38e>
    243c:	2a 81       	ldd	r18, Y+2	; 0x02
    243e:	3b 81       	ldd	r19, Y+3	; 0x03
    2440:	2e 30       	cpi	r18, 0x0E	; 14
    2442:	31 05       	cpc	r19, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <MCAL_TIM1_SetTimerModeOfOperation+0xd4>
    2446:	97 c1       	rjmp	.+814    	; 0x2776 <MCAL_TIM1_SetTimerModeOfOperation+0x402>
    2448:	b2 c1       	rjmp	.+868    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
	{
	case TIM1_NORMAL_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    244a:	af e4       	ldi	r26, 0x4F	; 79
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	ef e4       	ldi	r30, 0x4F	; 79
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	8e 7f       	andi	r24, 0xFE	; 254
    2456:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2458:	af e4       	ldi	r26, 0x4F	; 79
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ef e4       	ldi	r30, 0x4F	; 79
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8d 7f       	andi	r24, 0xFD	; 253
    2464:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2466:	ae e4       	ldi	r26, 0x4E	; 78
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ee e4       	ldi	r30, 0x4E	; 78
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	87 7f       	andi	r24, 0xF7	; 247
    2472:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2474:	ae e4       	ldi	r26, 0x4E	; 78
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	ee e4       	ldi	r30, 0x4E	; 78
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	8f 7e       	andi	r24, 0xEF	; 239
    2480:	8c 93       	st	X, r24
    2482:	95 c1       	rjmp	.+810    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_8_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    2484:	af e4       	ldi	r26, 0x4F	; 79
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	ef e4       	ldi	r30, 0x4F	; 79
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	81 60       	ori	r24, 0x01	; 1
    2490:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2492:	af e4       	ldi	r26, 0x4F	; 79
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	8d 7f       	andi	r24, 0xFD	; 253
    249e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    24a0:	ae e4       	ldi	r26, 0x4E	; 78
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ee e4       	ldi	r30, 0x4E	; 78
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	87 7f       	andi	r24, 0xF7	; 247
    24ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    24ae:	ae e4       	ldi	r26, 0x4E	; 78
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ee e4       	ldi	r30, 0x4E	; 78
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8f 7e       	andi	r24, 0xEF	; 239
    24ba:	8c 93       	st	X, r24
    24bc:	78 c1       	rjmp	.+752    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_9_BIT_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    24be:	af e4       	ldi	r26, 0x4F	; 79
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	ef e4       	ldi	r30, 0x4F	; 79
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	8e 7f       	andi	r24, 0xFE	; 254
    24ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    24cc:	af e4       	ldi	r26, 0x4F	; 79
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	ef e4       	ldi	r30, 0x4F	; 79
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	80 81       	ld	r24, Z
    24d6:	82 60       	ori	r24, 0x02	; 2
    24d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    24da:	ae e4       	ldi	r26, 0x4E	; 78
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	ee e4       	ldi	r30, 0x4E	; 78
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	87 7f       	andi	r24, 0xF7	; 247
    24e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    24e8:	ae e4       	ldi	r26, 0x4E	; 78
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ee e4       	ldi	r30, 0x4E	; 78
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 7e       	andi	r24, 0xEF	; 239
    24f4:	8c 93       	st	X, r24
    24f6:	5b c1       	rjmp	.+694    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_10_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    24f8:	af e4       	ldi	r26, 0x4F	; 79
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	ef e4       	ldi	r30, 0x4F	; 79
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	81 60       	ori	r24, 0x01	; 1
    2504:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    2506:	af e4       	ldi	r26, 0x4F	; 79
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	ef e4       	ldi	r30, 0x4F	; 79
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	82 60       	ori	r24, 0x02	; 2
    2512:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2514:	ae e4       	ldi	r26, 0x4E	; 78
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	ee e4       	ldi	r30, 0x4E	; 78
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	87 7f       	andi	r24, 0xF7	; 247
    2520:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2522:	ae e4       	ldi	r26, 0x4E	; 78
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ee e4       	ldi	r30, 0x4E	; 78
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8f 7e       	andi	r24, 0xEF	; 239
    252e:	8c 93       	st	X, r24
    2530:	3e c1       	rjmp	.+636    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_CTC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    2532:	af e4       	ldi	r26, 0x4F	; 79
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e4       	ldi	r30, 0x4F	; 79
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	8e 7f       	andi	r24, 0xFE	; 254
    253e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2540:	af e4       	ldi	r26, 0x4F	; 79
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	ef e4       	ldi	r30, 0x4F	; 79
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8d 7f       	andi	r24, 0xFD	; 253
    254c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    254e:	ae e4       	ldi	r26, 0x4E	; 78
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ee e4       	ldi	r30, 0x4E	; 78
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	88 60       	ori	r24, 0x08	; 8
    255a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    255c:	ae e4       	ldi	r26, 0x4E	; 78
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ee e4       	ldi	r30, 0x4E	; 78
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8f 7e       	andi	r24, 0xEF	; 239
    2568:	8c 93       	st	X, r24
    256a:	21 c1       	rjmp	.+578    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_8_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    256c:	af e4       	ldi	r26, 0x4F	; 79
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ef e4       	ldi	r30, 0x4F	; 79
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	81 60       	ori	r24, 0x01	; 1
    2578:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    257a:	af e4       	ldi	r26, 0x4F	; 79
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	ef e4       	ldi	r30, 0x4F	; 79
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	8d 7f       	andi	r24, 0xFD	; 253
    2586:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    2588:	ae e4       	ldi	r26, 0x4E	; 78
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	ee e4       	ldi	r30, 0x4E	; 78
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	88 60       	ori	r24, 0x08	; 8
    2594:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2596:	ae e4       	ldi	r26, 0x4E	; 78
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ee e4       	ldi	r30, 0x4E	; 78
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	8f 7e       	andi	r24, 0xEF	; 239
    25a2:	8c 93       	st	X, r24
    25a4:	04 c1       	rjmp	.+520    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_9_BIT_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    25a6:	af e4       	ldi	r26, 0x4F	; 79
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	ef e4       	ldi	r30, 0x4F	; 79
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	8e 7f       	andi	r24, 0xFE	; 254
    25b2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    25b4:	af e4       	ldi	r26, 0x4F	; 79
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	ef e4       	ldi	r30, 0x4F	; 79
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	82 60       	ori	r24, 0x02	; 2
    25c0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    25c2:	ae e4       	ldi	r26, 0x4E	; 78
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ee e4       	ldi	r30, 0x4E	; 78
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	88 60       	ori	r24, 0x08	; 8
    25ce:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    25d0:	ae e4       	ldi	r26, 0x4E	; 78
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	ee e4       	ldi	r30, 0x4E	; 78
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8f 7e       	andi	r24, 0xEF	; 239
    25dc:	8c 93       	st	X, r24
    25de:	e7 c0       	rjmp	.+462    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_10_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    25e0:	af e4       	ldi	r26, 0x4F	; 79
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	ef e4       	ldi	r30, 0x4F	; 79
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	81 60       	ori	r24, 0x01	; 1
    25ec:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    25ee:	af e4       	ldi	r26, 0x4F	; 79
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ef e4       	ldi	r30, 0x4F	; 79
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	82 60       	ori	r24, 0x02	; 2
    25fa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    25fc:	ae e4       	ldi	r26, 0x4E	; 78
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	ee e4       	ldi	r30, 0x4E	; 78
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	88 60       	ori	r24, 0x08	; 8
    2608:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    260a:	ae e4       	ldi	r26, 0x4E	; 78
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	ee e4       	ldi	r30, 0x4E	; 78
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8f 7e       	andi	r24, 0xEF	; 239
    2616:	8c 93       	st	X, r24
    2618:	ca c0       	rjmp	.+404    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_AND_FREQUENCY_CORRECT_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    261a:	af e4       	ldi	r26, 0x4F	; 79
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ef e4       	ldi	r30, 0x4F	; 79
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8e 7f       	andi	r24, 0xFE	; 254
    2626:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2628:	af e4       	ldi	r26, 0x4F	; 79
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ef e4       	ldi	r30, 0x4F	; 79
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	8d 7f       	andi	r24, 0xFD	; 253
    2634:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2636:	ae e4       	ldi	r26, 0x4E	; 78
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ee e4       	ldi	r30, 0x4E	; 78
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	87 7f       	andi	r24, 0xF7	; 247
    2642:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    2644:	ae e4       	ldi	r26, 0x4E	; 78
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ee e4       	ldi	r30, 0x4E	; 78
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	80 61       	ori	r24, 0x10	; 16
    2650:	8c 93       	st	X, r24
    2652:	ad c0       	rjmp	.+346    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_AND_FREQUENCY_CORRECT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    2654:	af e4       	ldi	r26, 0x4F	; 79
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	ef e4       	ldi	r30, 0x4F	; 79
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	81 60       	ori	r24, 0x01	; 1
    2660:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2662:	af e4       	ldi	r26, 0x4F	; 79
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ef e4       	ldi	r30, 0x4F	; 79
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8d 7f       	andi	r24, 0xFD	; 253
    266e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2670:	ae e4       	ldi	r26, 0x4E	; 78
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	ee e4       	ldi	r30, 0x4E	; 78
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	87 7f       	andi	r24, 0xF7	; 247
    267c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    267e:	ae e4       	ldi	r26, 0x4E	; 78
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	ee e4       	ldi	r30, 0x4E	; 78
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	80 61       	ori	r24, 0x10	; 16
    268a:	8c 93       	st	X, r24
    268c:	90 c0       	rjmp	.+288    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    268e:	af e4       	ldi	r26, 0x4F	; 79
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ef e4       	ldi	r30, 0x4F	; 79
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	8e 7f       	andi	r24, 0xFE	; 254
    269a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    269c:	af e4       	ldi	r26, 0x4F	; 79
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ef e4       	ldi	r30, 0x4F	; 79
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	82 60       	ori	r24, 0x02	; 2
    26a8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    26aa:	ae e4       	ldi	r26, 0x4E	; 78
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	ee e4       	ldi	r30, 0x4E	; 78
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	87 7f       	andi	r24, 0xF7	; 247
    26b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    26b8:	ae e4       	ldi	r26, 0x4E	; 78
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ee e4       	ldi	r30, 0x4E	; 78
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 61       	ori	r24, 0x10	; 16
    26c4:	8c 93       	st	X, r24
    26c6:	73 c0       	rjmp	.+230    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    26c8:	af e4       	ldi	r26, 0x4F	; 79
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ef e4       	ldi	r30, 0x4F	; 79
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	81 60       	ori	r24, 0x01	; 1
    26d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    26d6:	af e4       	ldi	r26, 0x4F	; 79
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ef e4       	ldi	r30, 0x4F	; 79
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	82 60       	ori	r24, 0x02	; 2
    26e2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    26e4:	ae e4       	ldi	r26, 0x4E	; 78
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	ee e4       	ldi	r30, 0x4E	; 78
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	87 7f       	andi	r24, 0xF7	; 247
    26f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    26f2:	ae e4       	ldi	r26, 0x4E	; 78
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	ee e4       	ldi	r30, 0x4E	; 78
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	80 61       	ori	r24, 0x10	; 16
    26fe:	8c 93       	st	X, r24
    2700:	56 c0       	rjmp	.+172    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_CTC_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    2702:	af e4       	ldi	r26, 0x4F	; 79
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8e 7f       	andi	r24, 0xFE	; 254
    270e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2710:	af e4       	ldi	r26, 0x4F	; 79
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ef e4       	ldi	r30, 0x4F	; 79
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8d 7f       	andi	r24, 0xFD	; 253
    271c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 60       	ori	r24, 0x08	; 8
    272a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    272c:	ae e4       	ldi	r26, 0x4E	; 78
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ee e4       	ldi	r30, 0x4E	; 78
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	80 61       	ori	r24, 0x10	; 16
    2738:	8c 93       	st	X, r24
    273a:	39 c0       	rjmp	.+114    	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    273c:	af e4       	ldi	r26, 0x4F	; 79
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ef e4       	ldi	r30, 0x4F	; 79
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	8e 7f       	andi	r24, 0xFE	; 254
    2748:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    274a:	af e4       	ldi	r26, 0x4F	; 79
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ef e4       	ldi	r30, 0x4F	; 79
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	82 60       	ori	r24, 0x02	; 2
    2756:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    2758:	ae e4       	ldi	r26, 0x4E	; 78
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ee e4       	ldi	r30, 0x4E	; 78
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 60       	ori	r24, 0x08	; 8
    2764:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    2766:	ae e4       	ldi	r26, 0x4E	; 78
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ee e4       	ldi	r30, 0x4E	; 78
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	80 61       	ori	r24, 0x10	; 16
    2772:	8c 93       	st	X, r24
    2774:	1c c0       	rjmp	.+56     	; 0x27ae <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    2776:	af e4       	ldi	r26, 0x4F	; 79
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ef e4       	ldi	r30, 0x4F	; 79
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	81 60       	ori	r24, 0x01	; 1
    2782:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    2784:	af e4       	ldi	r26, 0x4F	; 79
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ef e4       	ldi	r30, 0x4F	; 79
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	82 60       	ori	r24, 0x02	; 2
    2790:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    2792:	ae e4       	ldi	r26, 0x4E	; 78
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ee e4       	ldi	r30, 0x4E	; 78
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 60       	ori	r24, 0x08	; 8
    279e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    27a0:	ae e4       	ldi	r26, 0x4E	; 78
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ee e4       	ldi	r30, 0x4E	; 78
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 61       	ori	r24, 0x10	; 16
    27ac:	8c 93       	st	X, r24
		break;
	}
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <MCAL_TIM1_ClearTimer>:


/* To clear the timer 1 */
void MCAL_TIM1_ClearTimer()
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    27c2:	ec e4       	ldi	r30, 0x4C	; 76
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	11 82       	std	Z+1, r1	; 0x01
    27c8:	10 82       	st	Z, r1
}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <MCAL_TIM1_GetElapsedTime>:


/* To get the elapsed time since the timer started from BOTTOM (0x0000) */
u16 MCAL_TIM1_GetElapsedTime(void)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    27d8:	ec e4       	ldi	r30, 0x4C	; 76
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
}
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <MCAL_TIM1_GetRemainingTime>:


/* To get the remaining time to reach the TOP value */
u16 MCAL_TIM1_GetRemainingTime(u16 TOP)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <MCAL_TIM1_GetRemainingTime+0x6>
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
	return (TOP - TCNT1);
    27f4:	ec e4       	ldi	r30, 0x4C	; 76
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	20 81       	ld	r18, Z
    27fa:	31 81       	ldd	r19, Z+1	; 0x01
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2800:	82 1b       	sub	r24, r18
    2802:	93 0b       	sbc	r25, r19
}
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <MCAL_TIM1_SetCompareValue>:


/* To set the compare value/threshold */
void MCAL_TIM1_SetCompareValue(u8 OC1x, u16 TOP)
{
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	00 d0       	rcall	.+0      	; 0x2814 <MCAL_TIM1_SetCompareValue+0x6>
    2814:	0f 92       	push	r0
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	7b 83       	std	Y+3, r23	; 0x03
    281e:	6a 83       	std	Y+2, r22	; 0x02
	if(OC1x == OC1A)
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	39 f4       	brne	.+14     	; 0x2834 <MCAL_TIM1_SetCompareValue+0x26>
	{
		OCR1A = TOP;
    2826:	ea e4       	ldi	r30, 0x4A	; 74
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	9b 81       	ldd	r25, Y+3	; 0x03
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <MCAL_TIM1_SetCompareValue+0x38>
	}
	else if(OC1x == OC1B)
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	31 f4       	brne	.+12     	; 0x2846 <MCAL_TIM1_SetCompareValue+0x38>
	{
		OCR1B = TOP;
    283a:	e8 e4       	ldi	r30, 0x48	; 72
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	9b 81       	ldd	r25, Y+3	; 0x03
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
	}
}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <MCAL_TIM1_EnableOVFInterrupt>:


/* To enable the timer 1 interrupt on overflow */
void MCAL_TIM1_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <MCAL_TIM1_EnableOVFInterrupt+0x6>
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,2);
    2860:	a9 e5       	ldi	r26, 0x59	; 89
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e9 e5       	ldi	r30, 0x59	; 89
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	84 60       	ori	r24, 0x04	; 4
    286c:	8c 93       	st	X, r24
	TIM1_OVF_ISR = CallbackFunction;
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	90 93 6f 00 	sts	0x006F, r25
    2876:	80 93 6e 00 	sts	0x006E, r24
}
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <MCAL_TIM1_EnableCAPTInterrupt>:


/* To enable the timer 1 interrupt on input capture */
void MCAL_TIM1_EnableCAPTInterrupt(void(*CallbackFunction)(void))
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <MCAL_TIM1_EnableCAPTInterrupt+0x6>
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,5);
    2892:	a9 e5       	ldi	r26, 0x59	; 89
    2894:	b0 e0       	ldi	r27, 0x00	; 0
    2896:	e9 e5       	ldi	r30, 0x59	; 89
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	80 62       	ori	r24, 0x20	; 32
    289e:	8c 93       	st	X, r24
	TIM1_CAPT_ISR = CallbackFunction;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	90 93 73 00 	sts	0x0073, r25
    28a8:	80 93 72 00 	sts	0x0072, r24
}
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <MCAL_TIM1_EnableCOMPInterrupt>:


/* To enable the timer 1 interrupt on compare match */
void MCAL_TIM1_EnableCOMPInterrupt(u8 OC1x, void(*CallbackFunction)(void))
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <MCAL_TIM1_EnableCOMPInterrupt+0x6>
    28bc:	0f 92       	push	r0
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	7b 83       	std	Y+3, r23	; 0x03
    28c6:	6a 83       	std	Y+2, r22	; 0x02
	if(OC1x == OC1A)
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	71 f4       	brne	.+28     	; 0x28ea <MCAL_TIM1_EnableCOMPInterrupt+0x34>
	{
		SET_BIT(TIMSK,4);
    28ce:	a9 e5       	ldi	r26, 0x59	; 89
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e9 e5       	ldi	r30, 0x59	; 89
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 61       	ori	r24, 0x10	; 16
    28da:	8c 93       	st	X, r24
		TIM1_COMPA_ISR = CallbackFunction;
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	9b 81       	ldd	r25, Y+3	; 0x03
    28e0:	90 93 71 00 	sts	0x0071, r25
    28e4:	80 93 70 00 	sts	0x0070, r24
    28e8:	10 c0       	rjmp	.+32     	; 0x290a <MCAL_TIM1_EnableCOMPInterrupt+0x54>
	}
	else if(OC1x == OC1B)
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	82 30       	cpi	r24, 0x02	; 2
    28ee:	69 f4       	brne	.+26     	; 0x290a <MCAL_TIM1_EnableCOMPInterrupt+0x54>
	{
		SET_BIT(TIMSK,3);
    28f0:	a9 e5       	ldi	r26, 0x59	; 89
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e9 e5       	ldi	r30, 0x59	; 89
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	88 60       	ori	r24, 0x08	; 8
    28fc:	8c 93       	st	X, r24
		TIM1_COMPB_ISR = CallbackFunction;
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	90 93 6d 00 	sts	0x006D, r25
    2906:	80 93 6c 00 	sts	0x006C, r24
	}
}
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	08 95       	ret

00002916 <MCAL_TIM1_DisableCAPTInterrupt>:


/* To disable the timer 1 interrupt on input capture */
void MCAL_TIM1_DisableCAPTInterrupt()
{
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,5);
    291e:	a9 e5       	ldi	r26, 0x59	; 89
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e9 e5       	ldi	r30, 0x59	; 89
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	8f 7d       	andi	r24, 0xDF	; 223
    292a:	8c 93       	st	X, r24
	TIM1_CAPT_ISR = NULL;
    292c:	10 92 73 00 	sts	0x0073, r1
    2930:	10 92 72 00 	sts	0x0072, r1
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <MCAL_TIM1_DisableOVFInterrupt>:


/* To disable the timer interrupt on overflow */
void MCAL_TIM1_DisableOVFInterrupt()
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,2);
    2942:	a9 e5       	ldi	r26, 0x59	; 89
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e9 e5       	ldi	r30, 0x59	; 89
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8b 7f       	andi	r24, 0xFB	; 251
    294e:	8c 93       	st	X, r24
	TIM1_OVF_ISR = NULL;
    2950:	10 92 6f 00 	sts	0x006F, r1
    2954:	10 92 6e 00 	sts	0x006E, r1
}
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <MCAL_TIM1_DisableCOMPInterrupt>:


/* To disable the timer interrupt on compare match */
void MCAL_TIM1_DisableCOMPInterrupt(u8 OC1x)
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	0f 92       	push	r0
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	89 83       	std	Y+1, r24	; 0x01
	if(OC1x == OC1A)
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	61 f4       	brne	.+24     	; 0x2988 <MCAL_TIM1_DisableCOMPInterrupt+0x2a>
	{
		CLR_BIT(TIMSK,4);
    2970:	a9 e5       	ldi	r26, 0x59	; 89
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e9 e5       	ldi	r30, 0x59	; 89
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	8f 7e       	andi	r24, 0xEF	; 239
    297c:	8c 93       	st	X, r24
		TIM1_COMPA_ISR = NULL;
    297e:	10 92 71 00 	sts	0x0071, r1
    2982:	10 92 70 00 	sts	0x0070, r1
    2986:	0e c0       	rjmp	.+28     	; 0x29a4 <MCAL_TIM1_DisableCOMPInterrupt+0x46>
	}
	else if(OC1x == OC1B)
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	59 f4       	brne	.+22     	; 0x29a4 <MCAL_TIM1_DisableCOMPInterrupt+0x46>
	{
		CLR_BIT(TIMSK,3);
    298e:	a9 e5       	ldi	r26, 0x59	; 89
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e9 e5       	ldi	r30, 0x59	; 89
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	87 7f       	andi	r24, 0xF7	; 247
    299a:	8c 93       	st	X, r24
		TIM1_COMPB_ISR = NULL;
    299c:	10 92 6d 00 	sts	0x006D, r1
    29a0:	10 92 6c 00 	sts	0x006C, r1
	}

}
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <__vector_6>:


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void)		// TIMER1 CAPT
{
    29ac:	1f 92       	push	r1
    29ae:	0f 92       	push	r0
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	0f 92       	push	r0
    29b4:	11 24       	eor	r1, r1
    29b6:	2f 93       	push	r18
    29b8:	3f 93       	push	r19
    29ba:	4f 93       	push	r20
    29bc:	5f 93       	push	r21
    29be:	6f 93       	push	r22
    29c0:	7f 93       	push	r23
    29c2:	8f 93       	push	r24
    29c4:	9f 93       	push	r25
    29c6:	af 93       	push	r26
    29c8:	bf 93       	push	r27
    29ca:	ef 93       	push	r30
    29cc:	ff 93       	push	r31
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	TIM1_CAPT_ISR();
    29d6:	e0 91 72 00 	lds	r30, 0x0072
    29da:	f0 91 73 00 	lds	r31, 0x0073
    29de:	09 95       	icall
}
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	ff 91       	pop	r31
    29e6:	ef 91       	pop	r30
    29e8:	bf 91       	pop	r27
    29ea:	af 91       	pop	r26
    29ec:	9f 91       	pop	r25
    29ee:	8f 91       	pop	r24
    29f0:	7f 91       	pop	r23
    29f2:	6f 91       	pop	r22
    29f4:	5f 91       	pop	r21
    29f6:	4f 91       	pop	r20
    29f8:	3f 91       	pop	r19
    29fa:	2f 91       	pop	r18
    29fc:	0f 90       	pop	r0
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	0f 90       	pop	r0
    2a02:	1f 90       	pop	r1
    2a04:	18 95       	reti

00002a06 <__vector_7>:


void __vector_7(void) __attribute__((signal, used));
void __vector_7(void)		// TIMER1 COMPA
{
    2a06:	1f 92       	push	r1
    2a08:	0f 92       	push	r0
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	0f 92       	push	r0
    2a0e:	11 24       	eor	r1, r1
    2a10:	2f 93       	push	r18
    2a12:	3f 93       	push	r19
    2a14:	4f 93       	push	r20
    2a16:	5f 93       	push	r21
    2a18:	6f 93       	push	r22
    2a1a:	7f 93       	push	r23
    2a1c:	8f 93       	push	r24
    2a1e:	9f 93       	push	r25
    2a20:	af 93       	push	r26
    2a22:	bf 93       	push	r27
    2a24:	ef 93       	push	r30
    2a26:	ff 93       	push	r31
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	TIM1_COMPA_ISR();
    2a30:	e0 91 70 00 	lds	r30, 0x0070
    2a34:	f0 91 71 00 	lds	r31, 0x0071
    2a38:	09 95       	icall
}
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	ff 91       	pop	r31
    2a40:	ef 91       	pop	r30
    2a42:	bf 91       	pop	r27
    2a44:	af 91       	pop	r26
    2a46:	9f 91       	pop	r25
    2a48:	8f 91       	pop	r24
    2a4a:	7f 91       	pop	r23
    2a4c:	6f 91       	pop	r22
    2a4e:	5f 91       	pop	r21
    2a50:	4f 91       	pop	r20
    2a52:	3f 91       	pop	r19
    2a54:	2f 91       	pop	r18
    2a56:	0f 90       	pop	r0
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	0f 90       	pop	r0
    2a5c:	1f 90       	pop	r1
    2a5e:	18 95       	reti

00002a60 <__vector_8>:


void __vector_8(void) __attribute__((signal, used));
void __vector_8(void)		// TIMER1 COMPB
{
    2a60:	1f 92       	push	r1
    2a62:	0f 92       	push	r0
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	0f 92       	push	r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	2f 93       	push	r18
    2a6c:	3f 93       	push	r19
    2a6e:	4f 93       	push	r20
    2a70:	5f 93       	push	r21
    2a72:	6f 93       	push	r22
    2a74:	7f 93       	push	r23
    2a76:	8f 93       	push	r24
    2a78:	9f 93       	push	r25
    2a7a:	af 93       	push	r26
    2a7c:	bf 93       	push	r27
    2a7e:	ef 93       	push	r30
    2a80:	ff 93       	push	r31
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	TIM1_COMPB_ISR();
    2a8a:	e0 91 6c 00 	lds	r30, 0x006C
    2a8e:	f0 91 6d 00 	lds	r31, 0x006D
    2a92:	09 95       	icall
}
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	ff 91       	pop	r31
    2a9a:	ef 91       	pop	r30
    2a9c:	bf 91       	pop	r27
    2a9e:	af 91       	pop	r26
    2aa0:	9f 91       	pop	r25
    2aa2:	8f 91       	pop	r24
    2aa4:	7f 91       	pop	r23
    2aa6:	6f 91       	pop	r22
    2aa8:	5f 91       	pop	r21
    2aaa:	4f 91       	pop	r20
    2aac:	3f 91       	pop	r19
    2aae:	2f 91       	pop	r18
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	0f 90       	pop	r0
    2ab6:	1f 90       	pop	r1
    2ab8:	18 95       	reti

00002aba <__vector_9>:


void __vector_9(void) __attribute__((signal, used));
void __vector_9(void)		// TIMER1 OVF
{
    2aba:	1f 92       	push	r1
    2abc:	0f 92       	push	r0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	0f 92       	push	r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	2f 93       	push	r18
    2ac6:	3f 93       	push	r19
    2ac8:	4f 93       	push	r20
    2aca:	5f 93       	push	r21
    2acc:	6f 93       	push	r22
    2ace:	7f 93       	push	r23
    2ad0:	8f 93       	push	r24
    2ad2:	9f 93       	push	r25
    2ad4:	af 93       	push	r26
    2ad6:	bf 93       	push	r27
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
	TIM1_OVF_ISR();
    2ae4:	e0 91 6e 00 	lds	r30, 0x006E
    2ae8:	f0 91 6f 00 	lds	r31, 0x006F
    2aec:	09 95       	icall
}
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	ff 91       	pop	r31
    2af4:	ef 91       	pop	r30
    2af6:	bf 91       	pop	r27
    2af8:	af 91       	pop	r26
    2afa:	9f 91       	pop	r25
    2afc:	8f 91       	pop	r24
    2afe:	7f 91       	pop	r23
    2b00:	6f 91       	pop	r22
    2b02:	5f 91       	pop	r21
    2b04:	4f 91       	pop	r20
    2b06:	3f 91       	pop	r19
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <main>:
/** ========================================================================= */



int main(void)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <main+0x6>
    2b1a:	cd b7       	in	r28, 0x3d	; 61
    2b1c:	de b7       	in	r29, 0x3e	; 62
	/* System Initialization */
	InitializeSystem();
    2b1e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <InitializeSystem>


	while(1)
	{
		Instruction = MCAL_SPI_SlaveReceive();
    2b22:	0e 94 30 0b 	call	0x1660	; 0x1660 <MCAL_SPI_SlaveReceive>
    2b26:	80 93 7b 00 	sts	0x007B, r24

		switch(Instruction)
    2b2a:	80 91 7b 00 	lds	r24, 0x007B
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	3a 83       	std	Y+2, r19	; 0x02
    2b34:	29 83       	std	Y+1, r18	; 0x01
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	8d 34       	cpi	r24, 0x4D	; 77
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	59 f0       	breq	.+22     	; 0x2b56 <main+0x42>
    2b40:	29 81       	ldd	r18, Y+1	; 0x01
    2b42:	3a 81       	ldd	r19, Y+2	; 0x02
    2b44:	23 35       	cpi	r18, 0x53	; 83
    2b46:	31 05       	cpc	r19, r1
    2b48:	19 f1       	breq	.+70     	; 0x2b90 <main+0x7c>
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	84 34       	cpi	r24, 0x44	; 68
    2b50:	91 05       	cpc	r25, r1
    2b52:	11 f1       	breq	.+68     	; 0x2b98 <main+0x84>
    2b54:	e6 cf       	rjmp	.-52     	; 0x2b22 <main+0xe>
		{
			case 'M':    // Move the motors
				MotorDirection = MCAL_SPI_SlaveReceive();
    2b56:	0e 94 30 0b 	call	0x1660	; 0x1660 <MCAL_SPI_SlaveReceive>
    2b5a:	80 93 7d 00 	sts	0x007D, r24

				if(MotorDirection == 'R' || MotorDirection == 'F')
    2b5e:	80 91 7d 00 	lds	r24, 0x007D
    2b62:	82 35       	cpi	r24, 0x52	; 82
    2b64:	21 f0       	breq	.+8      	; 0x2b6e <main+0x5a>
    2b66:	80 91 7d 00 	lds	r24, 0x007D
    2b6a:	86 34       	cpi	r24, 0x46	; 70
    2b6c:	49 f4       	brne	.+18     	; 0x2b80 <main+0x6c>
				{
					Speed = MCAL_SPI_SlaveReceive();
    2b6e:	0e 94 30 0b 	call	0x1660	; 0x1660 <MCAL_SPI_SlaveReceive>
    2b72:	80 93 74 00 	sts	0x0074, r24
					MCAL_TIM0_SetCompareValue(Speed);
    2b76:	80 91 74 00 	lds	r24, 0x0074
    2b7a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <MCAL_TIM0_SetCompareValue>
    2b7e:	d1 cf       	rjmp	.-94     	; 0x2b22 <main+0xe>
				}


				else if(MotorDirection == 'L')
    2b80:	80 91 7d 00 	lds	r24, 0x007D
    2b84:	8c 34       	cpi	r24, 0x4C	; 76
    2b86:	69 f6       	brne	.-102    	; 0x2b22 <main+0xe>
				{
					MCAL_TIM0_SetCompareValue(0);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <MCAL_TIM0_SetCompareValue>
    2b8e:	c9 cf       	rjmp	.-110    	; 0x2b22 <main+0xe>
				}
			break;


			case 'S':    // Stop the motors
				MCAL_TIM0_SetCompareValue(0);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <MCAL_TIM0_SetCompareValue>
    2b96:	c5 cf       	rjmp	.-118    	; 0x2b22 <main+0xe>
			break;


			case 'D':    // Door options
				Door = MCAL_SPI_SlaveReceive();
    2b98:	0e 94 30 0b 	call	0x1660	; 0x1660 <MCAL_SPI_SlaveReceive>
    2b9c:	80 93 7a 00 	sts	0x007A, r24

				if(Door == 'C')
    2ba0:	80 91 7a 00 	lds	r24, 0x007A
    2ba4:	83 34       	cpi	r24, 0x43	; 67
    2ba6:	c9 f4       	brne	.+50     	; 0x2bda <main+0xc6>
				{
				    C_State = MCAL_SPI_SlaveReceive();
    2ba8:	0e 94 30 0b 	call	0x1660	; 0x1660 <MCAL_SPI_SlaveReceive>
    2bac:	80 93 75 00 	sts	0x0075, r24

				    if(C_State == '0')
    2bb0:	80 91 75 00 	lds	r24, 0x0075
    2bb4:	80 33       	cpi	r24, 0x30	; 48
    2bb6:	31 f4       	brne	.+12     	; 0x2bc4 <main+0xb0>
				    {
				    	MCAL_TIM1_SetCompareValue(OC1A, 0);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
    2bc2:	af cf       	rjmp	.-162    	; 0x2b22 <main+0xe>
				    }

				    else if(C_State == '1')
    2bc4:	80 91 75 00 	lds	r24, 0x0075
    2bc8:	81 33       	cpi	r24, 0x31	; 49
    2bca:	09 f0       	breq	.+2      	; 0x2bce <main+0xba>
    2bcc:	aa cf       	rjmp	.-172    	; 0x2b22 <main+0xe>
				    {
				    	MCAL_TIM1_SetCompareValue(OC1A, 3000);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	68 eb       	ldi	r22, 0xB8	; 184
    2bd2:	7b e0       	ldi	r23, 0x0B	; 11
    2bd4:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
    2bd8:	a4 cf       	rjmp	.-184    	; 0x2b22 <main+0xe>
				    }
				}

				else if(Door == 'D')
    2bda:	80 91 7a 00 	lds	r24, 0x007A
    2bde:	84 34       	cpi	r24, 0x44	; 68
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <main+0xd0>
    2be2:	9f cf       	rjmp	.-194    	; 0x2b22 <main+0xe>
				{
					D_State = MCAL_SPI_SlaveReceive();
    2be4:	0e 94 30 0b 	call	0x1660	; 0x1660 <MCAL_SPI_SlaveReceive>
    2be8:	80 93 77 00 	sts	0x0077, r24

					 if(D_State == '0')
    2bec:	80 91 77 00 	lds	r24, 0x0077
    2bf0:	80 33       	cpi	r24, 0x30	; 48
    2bf2:	31 f4       	brne	.+12     	; 0x2c00 <main+0xec>
					{
						MCAL_TIM1_SetCompareValue(OC1B, 0);
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
    2bfe:	91 cf       	rjmp	.-222    	; 0x2b22 <main+0xe>
					}

					else if(D_State == '1')
    2c00:	80 91 77 00 	lds	r24, 0x0077
    2c04:	81 33       	cpi	r24, 0x31	; 49
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <main+0xf6>
    2c08:	8c cf       	rjmp	.-232    	; 0x2b22 <main+0xe>
					{
						MCAL_TIM1_SetCompareValue(OC1B, 3000);
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	68 eb       	ldi	r22, 0xB8	; 184
    2c0e:	7b e0       	ldi	r23, 0x0B	; 11
    2c10:	0e 94 07 14 	call	0x280e	; 0x280e <MCAL_TIM1_SetCompareValue>
    2c14:	86 cf       	rjmp	.-244    	; 0x2b22 <main+0xe>

00002c16 <InitializeSystem>:



/* This function contains all the initialization required for the system. */
void InitializeSystem(void)
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
	MCAL_SPI_SlaveInit();
    2c1e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <MCAL_SPI_SlaveInit>
	MCAL_TIM0_SetTimerCompareMode(TIM0_PHASE_CORRECT_PWM_MODE_NON_INVERTED);
    2c22:	8c e0       	ldi	r24, 0x0C	; 12
    2c24:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <MCAL_TIM0_SetTimerCompareMode>
	MCAL_DIO_voidSetPinMode(OC0_PIN, Output);
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	63 e0       	ldi	r22, 0x03	; 3
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_DIO_voidSetPinMode>
	MCAL_TIM0_SetCompareValue(0);
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <MCAL_TIM0_SetCompareValue>
	MCAL_TIM0_StartTimer();
    2c38:	0e 94 40 0b 	call	0x1680	; 0x1680 <MCAL_TIM0_StartTimer>
	HAL_SERVO_Init();
    2c3c:	0e 94 13 0a 	call	0x1426	; 0x1426 <HAL_SERVO_Init>
}
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <__prologue_saves__>:
    2c46:	2f 92       	push	r2
    2c48:	3f 92       	push	r3
    2c4a:	4f 92       	push	r4
    2c4c:	5f 92       	push	r5
    2c4e:	6f 92       	push	r6
    2c50:	7f 92       	push	r7
    2c52:	8f 92       	push	r8
    2c54:	9f 92       	push	r9
    2c56:	af 92       	push	r10
    2c58:	bf 92       	push	r11
    2c5a:	cf 92       	push	r12
    2c5c:	df 92       	push	r13
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	ca 1b       	sub	r28, r26
    2c70:	db 0b       	sbc	r29, r27
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	09 94       	ijmp

00002c7e <__epilogue_restores__>:
    2c7e:	2a 88       	ldd	r2, Y+18	; 0x12
    2c80:	39 88       	ldd	r3, Y+17	; 0x11
    2c82:	48 88       	ldd	r4, Y+16	; 0x10
    2c84:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c86:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c88:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c90:	b9 84       	ldd	r11, Y+9	; 0x09
    2c92:	c8 84       	ldd	r12, Y+8	; 0x08
    2c94:	df 80       	ldd	r13, Y+7	; 0x07
    2c96:	ee 80       	ldd	r14, Y+6	; 0x06
    2c98:	fd 80       	ldd	r15, Y+5	; 0x05
    2c9a:	0c 81       	ldd	r16, Y+4	; 0x04
    2c9c:	1b 81       	ldd	r17, Y+3	; 0x03
    2c9e:	aa 81       	ldd	r26, Y+2	; 0x02
    2ca0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ca2:	ce 0f       	add	r28, r30
    2ca4:	d1 1d       	adc	r29, r1
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	ed 01       	movw	r28, r26
    2cb2:	08 95       	ret

00002cb4 <_exit>:
    2cb4:	f8 94       	cli

00002cb6 <__stop_program>:
    2cb6:	ff cf       	rjmp	.-2      	; 0x2cb6 <__stop_program>
