
Slave_1_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002f40  00002fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800068  00800068  00002fdc  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001807  00000000  00000000  00005a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007237  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007377  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009130  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000adc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__vector_6>
      1c:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__vector_7>
      20:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__vector_8>
      24:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__vector_9>
      28:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_10>
      2c:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 38       	cpi	r26, 0x80	; 128
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e4       	ldi	r30, 0x40	; 64
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <main>
      8a:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MCAL_ADC_Init>:



/** ====================== ADC Functions Implementation ===================== */
void MCAL_ADC_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Set the ADC VREF */
	ADMUX->ADC_VREF = ADC_VOLTAGE_REFERENCE;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 73       	andi	r24, 0x3F	; 63
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 83       	st	Z, r24

	/* Enable/Disable the ADC left adjust */
#if	(ADC_LEFT_ADJUST == 1)
	ADMUX->ADC_Left_Adjust = 1;
#else
	ADMUX->ADC_Left_Adjust = 0;
     b5a:	e7 e2       	ldi	r30, 0x27	; 39
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8f 7d       	andi	r24, 0xDF	; 223
     b62:	80 83       	st	Z, r24
	ADCSRA->ADATE = 1;

	/* Set the Auto trigger mode source */
	SFIOR->ADC_ADTS = ADC_AUTO_TRIG_SOURCE;
#else
	ADCSRA->ADATE = 0;
     b64:	e6 e2       	ldi	r30, 0x26	; 38
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7d       	andi	r24, 0xDF	; 223
     b6c:	80 83       	st	Z, r24
#endif

	/* Set the ADC clock division */
	ADCSRA->ADC_Prescaler = ADC_CLK_DIV_FACTOR;
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 7f       	andi	r24, 0xF8	; 248
     b76:	86 60       	ori	r24, 0x06	; 6
     b78:	80 83       	st	Z, r24

	/* Enable the ADC */
	ADCSRA->ADEN = 1;
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	80 83       	st	Z, r24
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <MCAL_ADC_Deinit>:


void MCAL_ADC_Deinit(void)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	/* Disable the ADC */
	ADCSRA->ADEN = 0;
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 77       	andi	r24, 0x7F	; 127
     b9a:	80 83       	st	Z, r24
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <MCAL_ADC_SelectChannel>:


void MCAL_ADC_SelectChannel(ADC_Channel_t Channel)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
	/* Set the channel selection */
	ADMUX->ADC_Channel = Channel;
     bae:	e7 e2       	ldi	r30, 0x27	; 39
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	8f 71       	andi	r24, 0x1F	; 31
     bb6:	98 2f       	mov	r25, r24
     bb8:	9f 71       	andi	r25, 0x1F	; 31
     bba:	80 81       	ld	r24, Z
     bbc:	80 7e       	andi	r24, 0xE0	; 224
     bbe:	89 2b       	or	r24, r25
     bc0:	80 83       	st	Z, r24
}
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <MCAL_ADC_StartConversion_PollingMode>:


void MCAL_ADC_StartConversion_PollingMode(void)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	/* Make sure the ADC Interrupt is disabled */
	if(ADCSRA->ADIE == 1)
     bd2:	e6 e2       	ldi	r30, 0x26	; 38
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	88 70       	andi	r24, 0x08	; 8
     bda:	88 23       	and	r24, r24
     bdc:	a1 f0       	breq	.+40     	; 0xc06 <MCAL_ADC_StartConversion_PollingMode+0x3c>
	{
		ADCSRA->ADIF = 1;	// Clear the ADC Interrupt flag (ADIF)
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 61       	ori	r24, 0x10	; 16
     be6:	80 83       	st	Z, r24
		ADCSRA->ADIE = 0;	// Clear ADIE
     be8:	e6 e2       	ldi	r30, 0x26	; 38
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	87 7f       	andi	r24, 0xF7	; 247
     bf0:	80 83       	st	Z, r24

		if(ADC_ISR != NULL)
     bf2:	80 91 68 00 	lds	r24, 0x0068
     bf6:	90 91 69 00 	lds	r25, 0x0069
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	21 f0       	breq	.+8      	; 0xc06 <MCAL_ADC_StartConversion_PollingMode+0x3c>
		{
			ADC_ISR = NULL;
     bfe:	10 92 69 00 	sts	0x0069, r1
     c02:	10 92 68 00 	sts	0x0068, r1
		}
	}

	/* Start the ADC conversion */
	ADCSRA->ADSC = 1;
     c06:	e6 e2       	ldi	r30, 0x26	; 38
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	80 83       	st	Z, r24

	/* Poll for the ADC conversion */
	while(ADCSRA->ADSC == 1);
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 74       	andi	r24, 0x40	; 64
     c18:	88 23       	and	r24, r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <MCAL_ADC_StartConversion_PollingMode+0x46>
}
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <MCAL_ADC_StartConversion_InterruptMode>:


void MCAL_ADC_StartConversion_InterruptMode(void(*CallbackFunction)(void))
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <MCAL_ADC_StartConversion_InterruptMode+0x6>
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	9a 83       	std	Y+2, r25	; 0x02
     c2e:	89 83       	std	Y+1, r24	; 0x01
	/* Enable the ADC Interrupt */
	ADCSRA->ADIF = 1;	// Clear the ADC Interrupt flag (ADIF)
     c30:	e6 e2       	ldi	r30, 0x26	; 38
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 61       	ori	r24, 0x10	; 16
     c38:	80 83       	st	Z, r24
	ADCSRA->ADIE = 1;	// Set ADIE
     c3a:	e6 e2       	ldi	r30, 0x26	; 38
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	88 60       	ori	r24, 0x08	; 8
     c42:	80 83       	st	Z, r24

	/* Set the callback function */
	if(CallbackFunction != NULL)
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	31 f0       	breq	.+12     	; 0xc58 <MCAL_ADC_StartConversion_InterruptMode+0x36>
	{
		ADC_ISR = CallbackFunction;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	90 93 69 00 	sts	0x0069, r25
     c54:	80 93 68 00 	sts	0x0068, r24
	}

	/* Start the ADC conversion */
	ADCSRA->ADSC = 1;
     c58:	e6 e2       	ldi	r30, 0x26	; 38
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 64       	ori	r24, 0x40	; 64
     c60:	80 83       	st	Z, r24
}
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <MCAL_ADC_ReadConversionResult>:


u16	MCAL_ADC_ReadConversionResult(void)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	uint16 result;
	result = (ADCL >> 6);
	result |= (ADCH << 2);
	return result;
#else
	return ADCLH;
     c74:	e4 e2       	ldi	r30, 0x24	; 36
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
#endif
}
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <__vector_16>:

/** ===================== ADC ISRs Implementation ========================== */
/* ADC Conversion Complete ISR */
void __vector_16(void)	__attribute__((signal, used));
void __vector_16(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	if(ADC_ISR != NULL)
     cac:	80 91 68 00 	lds	r24, 0x0068
     cb0:	90 91 69 00 	lds	r25, 0x0069
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	29 f0       	breq	.+10     	; 0xcc2 <__vector_16+0x40>
	{
		ADC_ISR();
     cb8:	e0 91 68 00 	lds	r30, 0x0068
     cbc:	f0 91 69 00 	lds	r31, 0x0069
     cc0:	09 95       	icall
	}
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	ff 91       	pop	r31
     cc8:	ef 91       	pop	r30
     cca:	bf 91       	pop	r27
     ccc:	af 91       	pop	r26
     cce:	9f 91       	pop	r25
     cd0:	8f 91       	pop	r24
     cd2:	7f 91       	pop	r23
     cd4:	6f 91       	pop	r22
     cd6:	5f 91       	pop	r21
     cd8:	4f 91       	pop	r20
     cda:	3f 91       	pop	r19
     cdc:	2f 91       	pop	r18
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <MCAL_DIO_voidSetPinMode>:
/** ======================= TWI Functions Implementation ==================== */
/*
 * To set the pin mode: DDRx = (0) -> Input | (1) -> Output
 */
void MCAL_DIO_voidSetPinMode(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_u8PINn, DIOMode_t Copy_DIOMode_tMode)
{
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	00 d0       	rcall	.+0      	; 0xcee <MCAL_DIO_voidSetPinMode+0x6>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <MCAL_DIO_voidSetPinMode+0x8>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	6a 83       	std	Y+2, r22	; 0x02
     cfa:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_DIOPort_tDIOx < 4)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	08 f0       	brcs	.+2      	; 0xd04 <MCAL_DIO_voidSetPinMode+0x1c>
     d02:	81 c1       	rjmp	.+770    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
    {
	if(Copy_u8PINn < 8)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	08 f0       	brcs	.+2      	; 0xd0c <MCAL_DIO_voidSetPinMode+0x24>
     d0a:	7d c1       	rjmp	.+762    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
	{
	    switch(Copy_DIOPort_tDIOx)
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3d 83       	std	Y+5, r19	; 0x05
     d14:	2c 83       	std	Y+4, r18	; 0x04
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <MCAL_DIO_voidSetPinMode+0x3a>
     d20:	6e c0       	rjmp	.+220    	; 0xdfe <MCAL_DIO_voidSetPinMode+0x116>
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	3d 81       	ldd	r19, Y+5	; 0x05
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	2c f4       	brge	.+10     	; 0xd36 <MCAL_DIO_voidSetPinMode+0x4e>
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	71 f0       	breq	.+28     	; 0xd50 <MCAL_DIO_voidSetPinMode+0x68>
     d34:	68 c1       	rjmp	.+720    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
     d36:	2c 81       	ldd	r18, Y+4	; 0x04
     d38:	3d 81       	ldd	r19, Y+5	; 0x05
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <MCAL_DIO_voidSetPinMode+0x5a>
     d40:	b5 c0       	rjmp	.+362    	; 0xeac <MCAL_DIO_voidSetPinMode+0x1c4>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <MCAL_DIO_voidSetPinMode+0x66>
     d4c:	06 c1       	rjmp	.+524    	; 0xf5a <MCAL_DIO_voidSetPinMode+0x272>
     d4e:	5b c1       	rjmp	.+694    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
	    {
		case DIOA:			/* PORTA */
		    if(Copy_DIOMode_tMode)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	88 23       	and	r24, r24
     d54:	a1 f0       	breq	.+40     	; 0xd7e <MCAL_DIO_voidSetPinMode+0x96>
		    {
		        SET_BIT(DDRA,Copy_u8PINn);
     d56:	aa e3       	ldi	r26, 0x3A	; 58
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e3       	ldi	r30, 0x3A	; 58
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <MCAL_DIO_voidSetPinMode+0x8c>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <MCAL_DIO_voidSetPinMode+0x88>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	44 c1       	rjmp	.+648    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRA,Copy_u8PINn);
     d7e:	aa e3       	ldi	r26, 0x3A	; 58
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	ea e3       	ldi	r30, 0x3A	; 58
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <MCAL_DIO_voidSetPinMode+0xb4>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <MCAL_DIO_voidSetPinMode+0xb0>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	a1 f4       	brne	.+40     	; 0xdd4 <MCAL_DIO_voidSetPinMode+0xec>
		        {
			    SET_BIT(PORTA,Copy_u8PINn);
     dac:	ab e3       	ldi	r26, 0x3B	; 59
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	eb e3       	ldi	r30, 0x3B	; 59
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <MCAL_DIO_voidSetPinMode+0xe2>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <MCAL_DIO_voidSetPinMode+0xde>
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	19 c1       	rjmp	.+562    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
		        }
		        else
			{
			    CLR_BIT(PORTA,Copy_u8PINn);
     dd4:	ab e3       	ldi	r26, 0x3B	; 59
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	eb e3       	ldi	r30, 0x3B	; 59
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <MCAL_DIO_voidSetPinMode+0x10a>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <MCAL_DIO_voidSetPinMode+0x106>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	04 c1       	rjmp	.+520    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOB:			/* PORTB */
		    if(Copy_DIOMode_tMode)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 23       	and	r24, r24
     e02:	a1 f0       	breq	.+40     	; 0xe2c <MCAL_DIO_voidSetPinMode+0x144>
		    {
		        SET_BIT(DDRB,Copy_u8PINn);
     e04:	a7 e3       	ldi	r26, 0x37	; 55
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e7 e3       	ldi	r30, 0x37	; 55
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <MCAL_DIO_voidSetPinMode+0x13a>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <MCAL_DIO_voidSetPinMode+0x136>
     e26:	84 2b       	or	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	ed c0       	rjmp	.+474    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRB,Copy_u8PINn);
     e2c:	a7 e3       	ldi	r26, 0x37	; 55
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e3       	ldi	r30, 0x37	; 55
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	48 2f       	mov	r20, r24
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 2e       	mov	r0, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <MCAL_DIO_voidSetPinMode+0x162>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <MCAL_DIO_voidSetPinMode+0x15e>
     e4e:	80 95       	com	r24
     e50:	84 23       	and	r24, r20
     e52:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	a1 f4       	brne	.+40     	; 0xe82 <MCAL_DIO_voidSetPinMode+0x19a>
			{
			    SET_BIT(PORTB,Copy_u8PINn);
     e5a:	a8 e3       	ldi	r26, 0x38	; 56
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e8 e3       	ldi	r30, 0x38	; 56
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <MCAL_DIO_voidSetPinMode+0x190>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <MCAL_DIO_voidSetPinMode+0x18c>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	c2 c0       	rjmp	.+388    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		        else
			{
		            CLR_BIT(PORTB,Copy_u8PINn);
     e82:	a8 e3       	ldi	r26, 0x38	; 56
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e8 e3       	ldi	r30, 0x38	; 56
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <MCAL_DIO_voidSetPinMode+0x1b8>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <MCAL_DIO_voidSetPinMode+0x1b4>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	ad c0       	rjmp	.+346    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOC:			/* PORTC */
		    if(Copy_DIOMode_tMode)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 23       	and	r24, r24
     eb0:	a1 f0       	breq	.+40     	; 0xeda <MCAL_DIO_voidSetPinMode+0x1f2>
		    {
		        SET_BIT(DDRC,Copy_u8PINn);
     eb2:	a4 e3       	ldi	r26, 0x34	; 52
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e4 e3       	ldi	r30, 0x34	; 52
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <MCAL_DIO_voidSetPinMode+0x1e8>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <MCAL_DIO_voidSetPinMode+0x1e4>
     ed4:	84 2b       	or	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	96 c0       	rjmp	.+300    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRC,Copy_u8PINn);
     eda:	a4 e3       	ldi	r26, 0x34	; 52
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <MCAL_DIO_voidSetPinMode+0x210>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <MCAL_DIO_voidSetPinMode+0x20c>
     efc:	80 95       	com	r24
     efe:	84 23       	and	r24, r20
     f00:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	a1 f4       	brne	.+40     	; 0xf30 <MCAL_DIO_voidSetPinMode+0x248>
		        {
			    SET_BIT(PORTC,Copy_u8PINn);
     f08:	a5 e3       	ldi	r26, 0x35	; 53
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e5 e3       	ldi	r30, 0x35	; 53
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <MCAL_DIO_voidSetPinMode+0x23e>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <MCAL_DIO_voidSetPinMode+0x23a>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
		        }
		        else
			{
			    CLR_BIT(PORTC,Copy_u8PINn);
     f30:	a5 e3       	ldi	r26, 0x35	; 53
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e5 e3       	ldi	r30, 0x35	; 53
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <MCAL_DIO_voidSetPinMode+0x266>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <MCAL_DIO_voidSetPinMode+0x262>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	56 c0       	rjmp	.+172    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOD:			/* PORTD */
		    if(Copy_DIOMode_tMode)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 23       	and	r24, r24
     f5e:	a1 f0       	breq	.+40     	; 0xf88 <MCAL_DIO_voidSetPinMode+0x2a0>
		    {
		        SET_BIT(DDRD,Copy_u8PINn);
     f60:	a1 e3       	ldi	r26, 0x31	; 49
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e1 e3       	ldi	r30, 0x31	; 49
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <MCAL_DIO_voidSetPinMode+0x296>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <MCAL_DIO_voidSetPinMode+0x292>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRD,Copy_u8PINn);
     f88:	a1 e3       	ldi	r26, 0x31	; 49
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e1 e3       	ldi	r30, 0x31	; 49
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <MCAL_DIO_voidSetPinMode+0x2be>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <MCAL_DIO_voidSetPinMode+0x2ba>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	a1 f4       	brne	.+40     	; 0xfde <MCAL_DIO_voidSetPinMode+0x2f6>
			{
			    SET_BIT(PORTD,Copy_u8PINn);
     fb6:	a2 e3       	ldi	r26, 0x32	; 50
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <MCAL_DIO_voidSetPinMode+0x2ec>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <MCAL_DIO_voidSetPinMode+0x2e8>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	14 c0       	rjmp	.+40     	; 0x1006 <MCAL_DIO_voidSetPinMode+0x31e>
			}
		        else
			{
			    CLR_BIT(PORTD,Copy_u8PINn);
     fde:	a2 e3       	ldi	r26, 0x32	; 50
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <MCAL_DIO_voidSetPinMode+0x314>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <MCAL_DIO_voidSetPinMode+0x310>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    }
    else
    {
    //Error_Handler();
    }
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <MCAL_DIO_voidWritePin>:

/*
 *  To write on a specific output pin from PROTx register
 */
void MCAL_DIO_voidWritePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn, DIOState_t Copy_DIOState_tValue)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <MCAL_DIO_voidWritePin+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <MCAL_DIO_voidWritePin+0x8>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
    1028:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_DIOPort_tDIOx < 4)
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	08 f0       	brcs	.+2      	; 0x1032 <MCAL_DIO_voidWritePin+0x1c>
    1030:	d5 c0       	rjmp	.+426    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
    {
        if(Copy_DIOPin_tPINn < 8)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 30       	cpi	r24, 0x08	; 8
    1036:	08 f0       	brcs	.+2      	; 0x103a <MCAL_DIO_voidWritePin+0x24>
    1038:	d1 c0       	rjmp	.+418    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
        {
            switch(Copy_DIOPort_tDIOx)
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3d 83       	std	Y+5, r19	; 0x05
    1042:	2c 83       	std	Y+4, r18	; 0x04
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <MCAL_DIO_voidWritePin+0x3a>
    104e:	43 c0       	rjmp	.+134    	; 0x10d6 <MCAL_DIO_voidWritePin+0xc0>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <MCAL_DIO_voidWritePin+0x4e>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	71 f0       	breq	.+28     	; 0x107e <MCAL_DIO_voidWritePin+0x68>
    1062:	bc c0       	rjmp	.+376    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <MCAL_DIO_voidWritePin+0x5a>
    106e:	5f c0       	rjmp	.+190    	; 0x112e <MCAL_DIO_voidWritePin+0x118>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <MCAL_DIO_voidWritePin+0x66>
    107a:	85 c0       	rjmp	.+266    	; 0x1186 <MCAL_DIO_voidWritePin+0x170>
    107c:	af c0       	rjmp	.+350    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
            {
                case DIOA:			/* PORTA */
		    if(Copy_DIOState_tValue)
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	88 23       	and	r24, r24
    1082:	a1 f0       	breq	.+40     	; 0x10ac <MCAL_DIO_voidWritePin+0x96>
		    {
		        SET_BIT(PORTA,Copy_DIOPin_tPINn);
    1084:	ab e3       	ldi	r26, 0x3B	; 59
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	eb e3       	ldi	r30, 0x3B	; 59
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <MCAL_DIO_voidWritePin+0x8c>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <MCAL_DIO_voidWritePin+0x88>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	98 c0       	rjmp	.+304    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTA,Copy_DIOPin_tPINn);
    10ac:	ab e3       	ldi	r26, 0x3B	; 59
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e3       	ldi	r30, 0x3B	; 59
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <MCAL_DIO_voidWritePin+0xb4>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <MCAL_DIO_voidWritePin+0xb0>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	83 c0       	rjmp	.+262    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOB:			/* PORTB */
		    if(Copy_DIOState_tValue)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 23       	and	r24, r24
    10da:	a1 f0       	breq	.+40     	; 0x1104 <MCAL_DIO_voidWritePin+0xee>
		    {
		        SET_BIT(PORTB,Copy_DIOPin_tPINn);
    10dc:	a8 e3       	ldi	r26, 0x38	; 56
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e8 e3       	ldi	r30, 0x38	; 56
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <MCAL_DIO_voidWritePin+0xe4>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <MCAL_DIO_voidWritePin+0xe0>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	6c c0       	rjmp	.+216    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTB,Copy_DIOPin_tPINn);
    1104:	a8 e3       	ldi	r26, 0x38	; 56
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 e3       	ldi	r30, 0x38	; 56
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <MCAL_DIO_voidWritePin+0x10c>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <MCAL_DIO_voidWritePin+0x108>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	57 c0       	rjmp	.+174    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOC:			/* PORTC */
		    if(Copy_DIOState_tValue)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	a1 f0       	breq	.+40     	; 0x115c <MCAL_DIO_voidWritePin+0x146>
		    {
		        SET_BIT(PORTC,Copy_DIOPin_tPINn);
    1134:	a5 e3       	ldi	r26, 0x35	; 53
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <MCAL_DIO_voidWritePin+0x13c>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <MCAL_DIO_voidWritePin+0x138>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	40 c0       	rjmp	.+128    	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTC,Copy_DIOPin_tPINn);
    115c:	a5 e3       	ldi	r26, 0x35	; 53
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e5 e3       	ldi	r30, 0x35	; 53
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <MCAL_DIO_voidWritePin+0x164>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <MCAL_DIO_voidWritePin+0x160>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	2b c0       	rjmp	.+86     	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOD:			/* PORTD */
		    if(Copy_DIOState_tValue)
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 23       	and	r24, r24
    118a:	a1 f0       	breq	.+40     	; 0x11b4 <MCAL_DIO_voidWritePin+0x19e>
		    {
		        SET_BIT(PORTD,Copy_DIOPin_tPINn);
    118c:	a2 e3       	ldi	r26, 0x32	; 50
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e2 e3       	ldi	r30, 0x32	; 50
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <MCAL_DIO_voidWritePin+0x194>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <MCAL_DIO_voidWritePin+0x190>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTD,Copy_DIOPin_tPINn);
    11b4:	a2 e3       	ldi	r26, 0x32	; 50
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e2 e3       	ldi	r30, 0x32	; 50
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <MCAL_DIO_voidWritePin+0x1bc>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <MCAL_DIO_voidWritePin+0x1b8>
    11d6:	80 95       	com	r24
    11d8:	84 23       	and	r24, r20
    11da:	8c 93       	st	X, r24
    }
    else
    {
        //Error_Handler();
    }
}
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <MCAL_DIO_u8ReadPin>:

/*
 * To read a specific output pin from PINx register
 */
u8 MCAL_DIO_u8ReadPin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <MCAL_DIO_u8ReadPin+0x6>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <MCAL_DIO_u8ReadPin+0x8>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <MCAL_DIO_u8ReadPin+0xa>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	6b 83       	std	Y+3, r22	; 0x03
    u8 pinValue = 0;
    11fe:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	08 f0       	brcs	.+2      	; 0x1208 <MCAL_DIO_u8ReadPin+0x1c>
    1206:	71 c0       	rjmp	.+226    	; 0x12ea <MCAL_DIO_u8ReadPin+0xfe>
    {
	if(Copy_DIOPin_tPINn < 8)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 30       	cpi	r24, 0x08	; 8
    120c:	08 f0       	brcs	.+2      	; 0x1210 <MCAL_DIO_u8ReadPin+0x24>
    120e:	6a c0       	rjmp	.+212    	; 0x12e4 <MCAL_DIO_u8ReadPin+0xf8>
	{
	    switch(Copy_DIOPort_tDIOx)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3e 83       	std	Y+6, r19	; 0x06
    1218:	2d 83       	std	Y+5, r18	; 0x05
    121a:	4d 81       	ldd	r20, Y+5	; 0x05
    121c:	5e 81       	ldd	r21, Y+6	; 0x06
    121e:	41 30       	cpi	r20, 0x01	; 1
    1220:	51 05       	cpc	r21, r1
    1222:	41 f1       	breq	.+80     	; 0x1274 <MCAL_DIO_u8ReadPin+0x88>
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	91 05       	cpc	r25, r1
    122c:	34 f4       	brge	.+12     	; 0x123a <MCAL_DIO_u8ReadPin+0x4e>
    122e:	2d 81       	ldd	r18, Y+5	; 0x05
    1230:	3e 81       	ldd	r19, Y+6	; 0x06
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	61 f0       	breq	.+24     	; 0x1250 <MCAL_DIO_u8ReadPin+0x64>
    1238:	52 c0       	rjmp	.+164    	; 0x12de <MCAL_DIO_u8ReadPin+0xf2>
    123a:	4d 81       	ldd	r20, Y+5	; 0x05
    123c:	5e 81       	ldd	r21, Y+6	; 0x06
    123e:	42 30       	cpi	r20, 0x02	; 2
    1240:	51 05       	cpc	r21, r1
    1242:	51 f1       	breq	.+84     	; 0x1298 <MCAL_DIO_u8ReadPin+0xac>
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	91 05       	cpc	r25, r1
    124c:	b9 f1       	breq	.+110    	; 0x12bc <MCAL_DIO_u8ReadPin+0xd0>
    124e:	47 c0       	rjmp	.+142    	; 0x12de <MCAL_DIO_u8ReadPin+0xf2>
	    {
	        case DIOA:			/* PORTA */
		    pinValue = GET_BIT(PINA,Copy_DIOPin_tPINn);
    1250:	e9 e3       	ldi	r30, 0x39	; 57
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <MCAL_DIO_u8ReadPin+0x7c>
    1264:	55 95       	asr	r21
    1266:	47 95       	ror	r20
    1268:	8a 95       	dec	r24
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <MCAL_DIO_u8ReadPin+0x78>
    126c:	ca 01       	movw	r24, r20
    126e:	81 70       	andi	r24, 0x01	; 1
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	35 c0       	rjmp	.+106    	; 0x12de <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOB:			/* PORTB */
		    pinValue = GET_BIT(PINB,Copy_DIOPin_tPINn);
    1274:	e6 e3       	ldi	r30, 0x36	; 54
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a9 01       	movw	r20, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <MCAL_DIO_u8ReadPin+0xa0>
    1288:	55 95       	asr	r21
    128a:	47 95       	ror	r20
    128c:	8a 95       	dec	r24
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <MCAL_DIO_u8ReadPin+0x9c>
    1290:	ca 01       	movw	r24, r20
    1292:	81 70       	andi	r24, 0x01	; 1
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	23 c0       	rjmp	.+70     	; 0x12de <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOC:			/* PORTC */
		    pinValue = GET_BIT(PINC,Copy_DIOPin_tPINn);
    1298:	e3 e3       	ldi	r30, 0x33	; 51
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <MCAL_DIO_u8ReadPin+0xc4>
    12ac:	55 95       	asr	r21
    12ae:	47 95       	ror	r20
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <MCAL_DIO_u8ReadPin+0xc0>
    12b4:	ca 01       	movw	r24, r20
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOD:			/* PORTD */
		    pinValue = GET_BIT(PIND,Copy_DIOPin_tPINn);
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <MCAL_DIO_u8ReadPin+0xe8>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <MCAL_DIO_u8ReadPin+0xe4>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
		    break;
	    }
	    return pinValue;
    12de:	59 81       	ldd	r21, Y+1	; 0x01
    12e0:	5c 83       	std	Y+4, r21	; 0x04
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <MCAL_DIO_u8ReadPin+0x102>
	}
	else
	{
	    //Error_Handler();
	    return 0xFF;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <MCAL_DIO_u8ReadPin+0x102>
	}
    }
    else
    {
        //Error_Handler();
        return 0xFF;
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    12f0:	26 96       	adiw	r28, 0x06	; 6
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <MCAL_DIO_voidWriteWord>:

/*
 * To write on the whole PROTx register
 */
void MCAL_DIO_voidWriteWord(DIOPort_t Copy_DIOPort_tDIOx, u8 Copy_u8Word)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <MCAL_DIO_voidWriteWord+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <MCAL_DIO_voidWriteWord+0x8>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_DIOPort_tDIOx < 4)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	90 f5       	brcc	.+100    	; 0x137c <MCAL_DIO_voidWriteWord+0x7a>
    {
	switch(Copy_DIOPort_tDIOx)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <MCAL_DIO_voidWriteWord+0x5e>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <MCAL_DIO_voidWriteWord+0x3e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <MCAL_DIO_voidWriteWord+0x54>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <MCAL_DIO_voidWriteWord+0x7a>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <MCAL_DIO_voidWriteWord+0x68>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <MCAL_DIO_voidWriteWord+0x72>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <MCAL_DIO_voidWriteWord+0x7a>
	{
	    case DIOA:			/* PORTA */
		PORTA = Copy_u8Word;
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	0e c0       	rjmp	.+28     	; 0x137c <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOB:			/* PORTB */
		PORTB = Copy_u8Word;
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	09 c0       	rjmp	.+18     	; 0x137c <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOC:			/* PORTC */
		PORTC = Copy_u8Word;
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOD:			/* PORTD */
		PORTD = Copy_u8Word;
    1374:	e2 e3       	ldi	r30, 0x32	; 50
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
		break;
	}
    }
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <MCAL_DIO_u8WordRead>:

/*
 *  To read the whole PINx register
 */
u8 MCAL_DIO_u8WordRead(DIOPort_t Copy_DIOPort_tDIOx)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <MCAL_DIO_u8WordRead+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <MCAL_DIO_u8WordRead+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
    u8 portValue = 0;
    139a:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	a8 f5       	brcc	.+106    	; 0x140c <MCAL_DIO_u8WordRead+0x82>
    {
	switch(Copy_DIOPort_tDIOx)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <MCAL_DIO_u8WordRead+0x60>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <MCAL_DIO_u8WordRead+0x40>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <MCAL_DIO_u8WordRead+0x56>
    13c8:	1e c0       	rjmp	.+60     	; 0x1406 <MCAL_DIO_u8WordRead+0x7c>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <MCAL_DIO_u8WordRead+0x6a>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <MCAL_DIO_u8WordRead+0x74>
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <MCAL_DIO_u8WordRead+0x7c>
	{
	    case DIOA:			/* PORTA */
		portValue = PINA;
    13e0:	e9 e3       	ldi	r30, 0x39	; 57
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOB:			/* PORTB */
		portValue = PINB;
    13ea:	e6 e3       	ldi	r30, 0x36	; 54
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOC:			/* PORTC */
		portValue = PINC;
    13f4:	e3 e3       	ldi	r30, 0x33	; 51
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOD:			/* PORTD */
		portValue = PIND;
    13fe:	e0 e3       	ldi	r30, 0x30	; 48
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	89 83       	std	Y+1, r24	; 0x01
		break;
	    default:
		//No Code
		break;
	}
	return portValue;
    1406:	99 81       	ldd	r25, Y+1	; 0x01
    1408:	9b 83       	std	Y+3, r25	; 0x03
    140a:	01 c0       	rjmp	.+2      	; 0x140e <MCAL_DIO_u8WordRead+0x84>
    }
    else
    {
	return 0;
    140c:	1b 82       	std	Y+3, r1	; 0x03
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <MCAL_DIO_voidTogglePin>:

/*
 * To toggle a certain pin.
 */
void MCAL_DIO_voidTogglePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <MCAL_DIO_voidTogglePin+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <MCAL_DIO_voidTogglePin+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_DIOPort_tDIOx < 4)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	84 30       	cpi	r24, 0x04	; 4
    1434:	08 f0       	brcs	.+2      	; 0x1438 <MCAL_DIO_voidTogglePin+0x18>
    1436:	72 c0       	rjmp	.+228    	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
    {
	if(Copy_DIOPin_tPINn < 8)
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	88 30       	cpi	r24, 0x08	; 8
    143c:	08 f0       	brcs	.+2      	; 0x1440 <MCAL_DIO_voidTogglePin+0x20>
    143e:	6e c0       	rjmp	.+220    	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
	{
	    switch(Copy_DIOPort_tDIOx)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3c 83       	std	Y+4, r19	; 0x04
    1448:	2b 83       	std	Y+3, r18	; 0x03
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	49 f1       	breq	.+82     	; 0x14a6 <MCAL_DIO_voidTogglePin+0x86>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	2c f4       	brge	.+10     	; 0x1468 <MCAL_DIO_voidTogglePin+0x48>
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	61 f0       	breq	.+24     	; 0x147e <MCAL_DIO_voidTogglePin+0x5e>
    1466:	5a c0       	rjmp	.+180    	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
    1468:	2b 81       	ldd	r18, Y+3	; 0x03
    146a:	3c 81       	ldd	r19, Y+4	; 0x04
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	71 f1       	breq	.+92     	; 0x14ce <MCAL_DIO_voidTogglePin+0xae>
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	83 30       	cpi	r24, 0x03	; 3
    1478:	91 05       	cpc	r25, r1
    147a:	e9 f1       	breq	.+122    	; 0x14f6 <MCAL_DIO_voidTogglePin+0xd6>
    147c:	4f c0       	rjmp	.+158    	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
	    {
		    case DIOA:			/* PORTA */
			TOG_BIT(PORTA,Copy_DIOPin_tPINn);
    147e:	ab e3       	ldi	r26, 0x3B	; 59
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	eb e3       	ldi	r30, 0x3B	; 59
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <MCAL_DIO_voidTogglePin+0x7c>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <MCAL_DIO_voidTogglePin+0x78>
    14a0:	84 27       	eor	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	3b c0       	rjmp	.+118    	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOB:			/* PORTB */
			TOG_BIT(PORTB,Copy_DIOPin_tPINn);
    14a6:	a8 e3       	ldi	r26, 0x38	; 56
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e8 e3       	ldi	r30, 0x38	; 56
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <MCAL_DIO_voidTogglePin+0xa4>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <MCAL_DIO_voidTogglePin+0xa0>
    14c8:	84 27       	eor	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOC:			/* PORTC */
			TOG_BIT(PORTC,Copy_DIOPin_tPINn);
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <MCAL_DIO_voidTogglePin+0xcc>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <MCAL_DIO_voidTogglePin+0xc8>
    14f0:	84 27       	eor	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	13 c0       	rjmp	.+38     	; 0x151c <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOD:			/* PORTD */
			TOG_BIT(PORTD,Copy_DIOPin_tPINn);
    14f6:	a2 e3       	ldi	r26, 0x32	; 50
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <MCAL_DIO_voidTogglePin+0xf4>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <MCAL_DIO_voidTogglePin+0xf0>
    1518:	84 27       	eor	r24, r20
    151a:	8c 93       	st	X, r24
    }
    else
    {
	    //Error_Handler();
    }
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <MCAL_DIO_voidTogglePort>:

/*
 * To toggle a complete port register.
 */
void MCAL_DIO_voidTogglePort(DIOPort_t Copy_DIOPort_tDIOx)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <MCAL_DIO_voidTogglePort+0x6>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	08 f0       	brcs	.+2      	; 0x1540 <MCAL_DIO_voidTogglePort+0x16>
    153e:	3e c0       	rjmp	.+124    	; 0x15bc <MCAL_DIO_voidTogglePort+0x92>
    {
	switch(Copy_DIOPort_tDIOx)
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	3b 83       	std	Y+3, r19	; 0x03
    1548:	2a 83       	std	Y+2, r18	; 0x02
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	91 05       	cpc	r25, r1
    1552:	e9 f0       	breq	.+58     	; 0x158e <MCAL_DIO_voidTogglePort+0x64>
    1554:	2a 81       	ldd	r18, Y+2	; 0x02
    1556:	3b 81       	ldd	r19, Y+3	; 0x03
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	2c f4       	brge	.+10     	; 0x1568 <MCAL_DIO_voidTogglePort+0x3e>
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	9b 81       	ldd	r25, Y+3	; 0x03
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	61 f0       	breq	.+24     	; 0x157e <MCAL_DIO_voidTogglePort+0x54>
    1566:	2a c0       	rjmp	.+84     	; 0x15bc <MCAL_DIO_voidTogglePort+0x92>
    1568:	2a 81       	ldd	r18, Y+2	; 0x02
    156a:	3b 81       	ldd	r19, Y+3	; 0x03
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	b1 f0       	breq	.+44     	; 0x159e <MCAL_DIO_voidTogglePort+0x74>
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	91 05       	cpc	r25, r1
    157a:	c9 f0       	breq	.+50     	; 0x15ae <MCAL_DIO_voidTogglePort+0x84>
    157c:	1f c0       	rjmp	.+62     	; 0x15bc <MCAL_DIO_voidTogglePort+0x92>
	{
	    case DIOA:			/* PORTA */
		PORTA ^= 0xFF;
    157e:	ab e3       	ldi	r26, 0x3B	; 59
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	eb e3       	ldi	r30, 0x3B	; 59
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	80 95       	com	r24
    158a:	8c 93       	st	X, r24
    158c:	17 c0       	rjmp	.+46     	; 0x15bc <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOB:			/* PORTB */
		PORTB ^= 0xFF;
    158e:	a8 e3       	ldi	r26, 0x38	; 56
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e8 e3       	ldi	r30, 0x38	; 56
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 95       	com	r24
    159a:	8c 93       	st	X, r24
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOC:			/* PORTC */
		PORTC ^= 0xFF;
    159e:	a5 e3       	ldi	r26, 0x35	; 53
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e3       	ldi	r30, 0x35	; 53
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 95       	com	r24
    15aa:	8c 93       	st	X, r24
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOD:			/* PORTD */
		PORTD ^= 0xFF;
    15ae:	a2 e3       	ldi	r26, 0x32	; 50
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e2 e3       	ldi	r30, 0x32	; 50
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 95       	com	r24
    15ba:	8c 93       	st	X, r24
    }
    else
    {
	//Error_Handler();
    }
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <HAL_SERVO_Init>:



/** ==================== Servo Functions Implementation ===================== */
void HAL_SERVO_Init(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the Timer 1 */
	MCAL_TIM1_SetTimerCompareMode(TIM1_FAST_PWM_MODE_OC1A_NON_INVERTED);
    15d0:	8a e0       	ldi	r24, 0x0A	; 10
    15d2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <MCAL_TIM1_SetTimerCompareMode>
	MCAL_TIM1_SetTimerCompareMode(TIM1_FAST_PWM_MODE_OC1B_NON_INVERTED);
    15d6:	89 e1       	ldi	r24, 0x19	; 25
    15d8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <MCAL_TIM1_SetTimerCompareMode>
	MCAL_DIO_voidSetPinMode(OC1A_PIN, Output);
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	65 e0       	ldi	r22, 0x05	; 5
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(OC1B_PIN, Output);
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	64 e0       	ldi	r22, 0x04	; 4
    15ea:	41 e0       	ldi	r20, 0x01	; 1
    15ec:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>

	/* Prepare the Servo motor to be moved to its reference position */
	MCAL_TIM1_SetCompareValue(OC1A, 0);    // Compare match set to zero
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
	MCAL_TIM1_SetCompareValue(OC1B, 0);    // Compare match set to zero
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
	ICR1 = 40000;                          // TOP (40,000 * tick time = 20 ms)
    1604:	e6 e4       	ldi	r30, 0x46	; 70
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 e4       	ldi	r24, 0x40	; 64
    160a:	9c e9       	ldi	r25, 0x9C	; 156
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	80 83       	st	Z, r24

	/* Start the timer 1 */
	MCAL_TIM1_EnableTimer();
    1610:	0e 94 75 0f 	call	0x1eea	; 0x1eea <MCAL_TIM1_EnableTimer>
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <HAL_SERVO_SetAngle>:


void HAL_SERVO_SetAngle(u16 Copy_Angle)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <HAL_SERVO_SetAngle+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	/* Equation (Mapping) */

	/* Set the new position to the servo motor (by changing the output compare value) */
	MCAL_TIM1_SetCompareValue(OC1A, Copy_Angle);
    1628:	29 81       	ldd	r18, Y+1	; 0x01
    162a:	3a 81       	ldd	r19, Y+2	; 0x02
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	b9 01       	movw	r22, r18
    1630:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <MCAL_SPI_MasterInit>:



/** ======================= SPI Functions Implementation ==================== */
void MCAL_SPI_MasterInit(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	2e 97       	sbiw	r28, 0x0e	; 14
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
	/* Set MOSI and SCK output, all others input */
	MCAL_DIO_voidSetPinMode(SPI_MOSI, Output);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	65 e0       	ldi	r22, 0x05	; 5
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SCK , Output);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	67 e0       	ldi	r22, 0x07	; 7
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_MISO, Input );
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	66 e0       	ldi	r22, 0x06	; 6
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SS  , Input_Pullup );
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	64 e0       	ldi	r22, 0x04	; 4
    1674:	42 e0       	ldi	r20, 0x02	; 2
    1676:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>

	/* Enable SPI, Master, set clock rate f_sys/16 */
	SPCR->MSTR  = 1;
    167a:	ed e2       	ldi	r30, 0x2D	; 45
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 61       	ori	r24, 0x10	; 16
    1682:	80 83       	st	Z, r24
	SPCR->SPR   = SPI_CLOCK_RATE;
    1684:	ed e2       	ldi	r30, 0x2D	; 45
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8c 7f       	andi	r24, 0xFC	; 252
    168c:	81 60       	ori	r24, 0x01	; 1
    168e:	80 83       	st	Z, r24
	SPSR->SPI2X = SPI_2XSPEED;
    1690:	ee e2       	ldi	r30, 0x2E	; 46
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8e 7f       	andi	r24, 0xFE	; 254
    1698:	80 83       	st	Z, r24
	SPCR->SPE   = 1;
    169a:	ed e2       	ldi	r30, 0x2D	; 45
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 64       	ori	r24, 0x40	; 64
    16a2:	80 83       	st	Z, r24
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	aa e7       	ldi	r26, 0x7A	; 122
    16aa:	b4 e4       	ldi	r27, 0x44	; 68
    16ac:	8b 87       	std	Y+11, r24	; 0x0b
    16ae:	9c 87       	std	Y+12, r25	; 0x0c
    16b0:	ad 87       	std	Y+13, r26	; 0x0d
    16b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	53 e4       	ldi	r21, 0x43	; 67
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f 83       	std	Y+7, r24	; 0x07
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	a9 87       	std	Y+9, r26	; 0x09
    16d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <MCAL_SPI_MasterInit+0xb8>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <MCAL_SPI_MasterInit+0x136>
	else if (__tmp > 65535)
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <MCAL_SPI_MasterInit+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1710:	7c 85       	ldd	r23, Y+12	; 0x0c
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <MCAL_SPI_MasterInit+0x118>
    1738:	89 e1       	ldi	r24, 0x19	; 25
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <MCAL_SPI_MasterInit+0x106>
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <MCAL_SPI_MasterInit+0xfa>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <MCAL_SPI_MasterInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <MCAL_SPI_MasterInit+0x142>
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    1788:	2e 96       	adiw	r28, 0x0e	; 14
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <MCAL_SPI_SlaveInit>:


void MCAL_SPI_SlaveInit(void)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */
	MCAL_DIO_voidSetPinMode(SPI_MOSI, Input);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	65 e0       	ldi	r22, 0x05	; 5
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SCK , Input);
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	67 e0       	ldi	r22, 0x07	; 7
    17b0:	40 e0       	ldi	r20, 0x00	; 0
    17b2:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_MISO, Output );
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	66 e0       	ldi	r22, 0x06	; 6
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SS  , Input );
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	64 e0       	ldi	r22, 0x04	; 4
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>

	/* Enable SPI */
	SPCR->SPE  = 1;
    17ca:	ed e2       	ldi	r30, 0x2D	; 45
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 64       	ori	r24, 0x40	; 64
    17d2:	80 83       	st	Z, r24
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <MCAL_SPI_MasterTransmit>:


void MCAL_SPI_MasterTransmit(u8 Copy_Data)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission, load the data byte to the SPI Data Register */
	SPDR = Copy_Data;
    17e6:	ef e2       	ldi	r30, 0x2F	; 47
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!(SPSR->SPIF == 1));
    17ee:	ee e2       	ldi	r30, 0x2E	; 46
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 78       	andi	r24, 0x80	; 128
    17f6:	88 23       	and	r24, r24
    17f8:	d1 f3       	breq	.-12     	; 0x17ee <MCAL_SPI_MasterTransmit+0x14>
}
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <MCAL_SPI_SlaveReceive>:


u8 MCAL_SPI_SlaveReceive(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPSR->SPIF == 1));
    180a:	ee e2       	ldi	r30, 0x2E	; 46
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 78       	andi	r24, 0x80	; 128
    1812:	88 23       	and	r24, r24
    1814:	d1 f3       	breq	.-12     	; 0x180a <MCAL_SPI_SlaveReceive+0x8>

	/* Return data register */
	return SPDR;
    1816:	ef e2       	ldi	r30, 0x2F	; 47
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
}
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <MCAL_TIM0_StartTimer>:
void (*TIM0_COMP_ISR) (void);


/* To Start the TIM0 & Select the timer clock */
void MCAL_TIM0_StartTimer()
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= TIM0_CLK_SOUCRE;	// Configured in the TIM0_config.h file
    182a:	a3 e5       	ldi	r26, 0x53	; 83
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e3 e5       	ldi	r30, 0x53	; 83
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	85 60       	ori	r24, 0x05	; 5
    1836:	8c 93       	st	X, r24
}
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <MCAL_TIM0_PresetTimer>:


/* To put the initial value to count from */
void MCAL_TIM0_PresetTimer(u8 Copy_Value)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_Value;
    184a:	e2 e5       	ldi	r30, 0x52	; 82
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	80 83       	st	Z, r24
}
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <MCAL_TIM0_StopTimer>:


/* To Stop the TIM0 */
void MCAL_TIM0_StopTimer()
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
    1862:	a3 e5       	ldi	r26, 0x53	; 83
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e3 e5       	ldi	r30, 0x53	; 83
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	88 7f       	andi	r24, 0xF8	; 248
    186e:	8c 93       	st	X, r24
}
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <MCAL_TIM0_SetTimerCompareMode>:


/* To select the TIM0 mode of operation */
void MCAL_TIM0_SetTimerCompareMode(u8 Mode)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <MCAL_TIM0_SetTimerCompareMode+0x6>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3b 83       	std	Y+3, r19	; 0x03
    188c:	2a 83       	std	Y+2, r18	; 0x02
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	86 30       	cpi	r24, 0x06	; 6
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <MCAL_TIM0_SetTimerCompareMode+0x24>
    1898:	02 c1       	rjmp	.+516    	; 0x1a9e <MCAL_TIM0_SetTimerCompareMode+0x228>
    189a:	2a 81       	ldd	r18, Y+2	; 0x02
    189c:	3b 81       	ldd	r19, Y+3	; 0x03
    189e:	27 30       	cpi	r18, 0x07	; 7
    18a0:	31 05       	cpc	r19, r1
    18a2:	24 f5       	brge	.+72     	; 0x18ec <MCAL_TIM0_SetTimerCompareMode+0x76>
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	82 30       	cpi	r24, 0x02	; 2
    18aa:	91 05       	cpc	r25, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <MCAL_TIM0_SetTimerCompareMode+0x3a>
    18ae:	83 c0       	rjmp	.+262    	; 0x19b6 <MCAL_TIM0_SetTimerCompareMode+0x140>
    18b0:	2a 81       	ldd	r18, Y+2	; 0x02
    18b2:	3b 81       	ldd	r19, Y+3	; 0x03
    18b4:	23 30       	cpi	r18, 0x03	; 3
    18b6:	31 05       	cpc	r19, r1
    18b8:	64 f4       	brge	.+24     	; 0x18d2 <MCAL_TIM0_SetTimerCompareMode+0x5c>
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	9b 81       	ldd	r25, Y+3	; 0x03
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <MCAL_TIM0_SetTimerCompareMode+0x4e>
    18c2:	3f c0       	rjmp	.+126    	; 0x1942 <MCAL_TIM0_SetTimerCompareMode+0xcc>
    18c4:	2a 81       	ldd	r18, Y+2	; 0x02
    18c6:	3b 81       	ldd	r19, Y+3	; 0x03
    18c8:	21 30       	cpi	r18, 0x01	; 1
    18ca:	31 05       	cpc	r19, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <MCAL_TIM0_SetTimerCompareMode+0x5a>
    18ce:	56 c0       	rjmp	.+172    	; 0x197c <MCAL_TIM0_SetTimerCompareMode+0x106>
    18d0:	cd c1       	rjmp	.+922    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <MCAL_TIM0_SetTimerCompareMode+0x68>
    18dc:	a6 c0       	rjmp	.+332    	; 0x1a2a <MCAL_TIM0_SetTimerCompareMode+0x1b4>
    18de:	2a 81       	ldd	r18, Y+2	; 0x02
    18e0:	3b 81       	ldd	r19, Y+3	; 0x03
    18e2:	25 30       	cpi	r18, 0x05	; 5
    18e4:	31 05       	cpc	r19, r1
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <MCAL_TIM0_SetTimerCompareMode+0x74>
    18e8:	bd c0       	rjmp	.+378    	; 0x1a64 <MCAL_TIM0_SetTimerCompareMode+0x1ee>
    18ea:	82 c0       	rjmp	.+260    	; 0x19f0 <MCAL_TIM0_SetTimerCompareMode+0x17a>
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	8a 30       	cpi	r24, 0x0A	; 10
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <MCAL_TIM0_SetTimerCompareMode+0x82>
    18f6:	47 c1       	rjmp	.+654    	; 0x1b86 <MCAL_TIM0_SetTimerCompareMode+0x310>
    18f8:	2a 81       	ldd	r18, Y+2	; 0x02
    18fa:	3b 81       	ldd	r19, Y+3	; 0x03
    18fc:	2b 30       	cpi	r18, 0x0B	; 11
    18fe:	31 05       	cpc	r19, r1
    1900:	6c f4       	brge	.+26     	; 0x191c <MCAL_TIM0_SetTimerCompareMode+0xa6>
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	9b 81       	ldd	r25, Y+3	; 0x03
    1906:	88 30       	cpi	r24, 0x08	; 8
    1908:	91 05       	cpc	r25, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <MCAL_TIM0_SetTimerCompareMode+0x98>
    190c:	02 c1       	rjmp	.+516    	; 0x1b12 <MCAL_TIM0_SetTimerCompareMode+0x29c>
    190e:	2a 81       	ldd	r18, Y+2	; 0x02
    1910:	3b 81       	ldd	r19, Y+3	; 0x03
    1912:	29 30       	cpi	r18, 0x09	; 9
    1914:	31 05       	cpc	r19, r1
    1916:	0c f0       	brlt	.+2      	; 0x191a <MCAL_TIM0_SetTimerCompareMode+0xa4>
    1918:	19 c1       	rjmp	.+562    	; 0x1b4c <MCAL_TIM0_SetTimerCompareMode+0x2d6>
    191a:	de c0       	rjmp	.+444    	; 0x1ad8 <MCAL_TIM0_SetTimerCompareMode+0x262>
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	8c 30       	cpi	r24, 0x0C	; 12
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <MCAL_TIM0_SetTimerCompareMode+0xb2>
    1926:	69 c1       	rjmp	.+722    	; 0x1bfa <MCAL_TIM0_SetTimerCompareMode+0x384>
    1928:	2a 81       	ldd	r18, Y+2	; 0x02
    192a:	3b 81       	ldd	r19, Y+3	; 0x03
    192c:	2c 30       	cpi	r18, 0x0C	; 12
    192e:	31 05       	cpc	r19, r1
    1930:	0c f4       	brge	.+2      	; 0x1934 <MCAL_TIM0_SetTimerCompareMode+0xbe>
    1932:	46 c1       	rjmp	.+652    	; 0x1bc0 <MCAL_TIM0_SetTimerCompareMode+0x34a>
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	8d 30       	cpi	r24, 0x0D	; 13
    193a:	91 05       	cpc	r25, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <MCAL_TIM0_SetTimerCompareMode+0xca>
    193e:	7a c1       	rjmp	.+756    	; 0x1c34 <MCAL_TIM0_SetTimerCompareMode+0x3be>
    1940:	95 c1       	rjmp	.+810    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
	{
	/* ============== NORMAL MODE ============== */
	case TIM0_NORMAL_MODE_OUTPUT_COMPARE_OFF:
		CLR_BIT(TCCR0,6);	//WGM00
    1942:	a3 e5       	ldi	r26, 0x53	; 83
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e3 e5       	ldi	r30, 0x53	; 83
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	8f 7b       	andi	r24, 0xBF	; 191
    194e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1950:	a3 e5       	ldi	r26, 0x53	; 83
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e3 e5       	ldi	r30, 0x53	; 83
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	87 7f       	andi	r24, 0xF7	; 247
    195c:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    195e:	a3 e5       	ldi	r26, 0x53	; 83
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e3 e5       	ldi	r30, 0x53	; 83
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8f 7e       	andi	r24, 0xEF	; 239
    196a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    196c:	a3 e5       	ldi	r26, 0x53	; 83
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e3 e5       	ldi	r30, 0x53	; 83
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7d       	andi	r24, 0xDF	; 223
    1978:	8c 93       	st	X, r24
    197a:	78 c1       	rjmp	.+752    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_NORMAL_MODE_TOGGLE_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    197c:	a3 e5       	ldi	r26, 0x53	; 83
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e3 e5       	ldi	r30, 0x53	; 83
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 7b       	andi	r24, 0xBF	; 191
    1988:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    198a:	a3 e5       	ldi	r26, 0x53	; 83
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e3 e5       	ldi	r30, 0x53	; 83
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	87 7f       	andi	r24, 0xF7	; 247
    1996:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1998:	a3 e5       	ldi	r26, 0x53	; 83
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e3 e5       	ldi	r30, 0x53	; 83
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 61       	ori	r24, 0x10	; 16
    19a4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    19a6:	a3 e5       	ldi	r26, 0x53	; 83
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e3 e5       	ldi	r30, 0x53	; 83
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8f 7d       	andi	r24, 0xDF	; 223
    19b2:	8c 93       	st	X, r24
    19b4:	5b c1       	rjmp	.+694    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_NORMAL_MODE_CLEAR_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    19b6:	a3 e5       	ldi	r26, 0x53	; 83
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e3 e5       	ldi	r30, 0x53	; 83
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7b       	andi	r24, 0xBF	; 191
    19c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    19c4:	a3 e5       	ldi	r26, 0x53	; 83
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e3 e5       	ldi	r30, 0x53	; 83
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	87 7f       	andi	r24, 0xF7	; 247
    19d0:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    19d2:	a3 e5       	ldi	r26, 0x53	; 83
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e3 e5       	ldi	r30, 0x53	; 83
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8f 7e       	andi	r24, 0xEF	; 239
    19de:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    19e0:	a3 e5       	ldi	r26, 0x53	; 83
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e3 e5       	ldi	r30, 0x53	; 83
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	80 62       	ori	r24, 0x20	; 32
    19ec:	8c 93       	st	X, r24
    19ee:	3e c1       	rjmp	.+636    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_NORMAL_MODE_SET_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    19f0:	a3 e5       	ldi	r26, 0x53	; 83
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e3 e5       	ldi	r30, 0x53	; 83
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8f 7b       	andi	r24, 0xBF	; 191
    19fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    19fe:	a3 e5       	ldi	r26, 0x53	; 83
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e3 e5       	ldi	r30, 0x53	; 83
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	87 7f       	andi	r24, 0xF7	; 247
    1a0a:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1a0c:	a3 e5       	ldi	r26, 0x53	; 83
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e3 e5       	ldi	r30, 0x53	; 83
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 61       	ori	r24, 0x10	; 16
    1a18:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1a1a:	a3 e5       	ldi	r26, 0x53	; 83
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e3 e5       	ldi	r30, 0x53	; 83
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 62       	ori	r24, 0x20	; 32
    1a26:	8c 93       	st	X, r24
    1a28:	21 c1       	rjmp	.+578    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

		/* ============== CTC MODE ============== */
	case TIM0_CTC_MODE_OUTPUT_COMPARE_OFF:
		CLR_BIT(TCCR0,6);	//WGM00
    1a2a:	a3 e5       	ldi	r26, 0x53	; 83
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e3 e5       	ldi	r30, 0x53	; 83
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 7b       	andi	r24, 0xBF	; 191
    1a36:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1a38:	a3 e5       	ldi	r26, 0x53	; 83
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e3 e5       	ldi	r30, 0x53	; 83
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 60       	ori	r24, 0x08	; 8
    1a44:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1a46:	a3 e5       	ldi	r26, 0x53	; 83
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e3 e5       	ldi	r30, 0x53	; 83
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 7e       	andi	r24, 0xEF	; 239
    1a52:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    1a54:	a3 e5       	ldi	r26, 0x53	; 83
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e3 e5       	ldi	r30, 0x53	; 83
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8f 7d       	andi	r24, 0xDF	; 223
    1a60:	8c 93       	st	X, r24
    1a62:	04 c1       	rjmp	.+520    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_CTC_MODE_TOGGLE_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    1a64:	a3 e5       	ldi	r26, 0x53	; 83
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e3 e5       	ldi	r30, 0x53	; 83
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 7b       	andi	r24, 0xBF	; 191
    1a70:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1a72:	a3 e5       	ldi	r26, 0x53	; 83
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e3 e5       	ldi	r30, 0x53	; 83
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	88 60       	ori	r24, 0x08	; 8
    1a7e:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1a80:	a3 e5       	ldi	r26, 0x53	; 83
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e3 e5       	ldi	r30, 0x53	; 83
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 61       	ori	r24, 0x10	; 16
    1a8c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    1a8e:	a3 e5       	ldi	r26, 0x53	; 83
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e3 e5       	ldi	r30, 0x53	; 83
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 7d       	andi	r24, 0xDF	; 223
    1a9a:	8c 93       	st	X, r24
    1a9c:	e7 c0       	rjmp	.+462    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_CTC_MODE_CLEAR_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    1a9e:	a3 e5       	ldi	r26, 0x53	; 83
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e3 e5       	ldi	r30, 0x53	; 83
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8f 7b       	andi	r24, 0xBF	; 191
    1aaa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1aac:	a3 e5       	ldi	r26, 0x53	; 83
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e3 e5       	ldi	r30, 0x53	; 83
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 60       	ori	r24, 0x08	; 8
    1ab8:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1aba:	a3 e5       	ldi	r26, 0x53	; 83
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e5       	ldi	r30, 0x53	; 83
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 7e       	andi	r24, 0xEF	; 239
    1ac6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1ac8:	a3 e5       	ldi	r26, 0x53	; 83
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e3 e5       	ldi	r30, 0x53	; 83
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 62       	ori	r24, 0x20	; 32
    1ad4:	8c 93       	st	X, r24
    1ad6:	ca c0       	rjmp	.+404    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_CTC_MODE_SET_ON_COMPARE:
		CLR_BIT(TCCR0,6);	//WGM00
    1ad8:	a3 e5       	ldi	r26, 0x53	; 83
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e3 e5       	ldi	r30, 0x53	; 83
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8f 7b       	andi	r24, 0xBF	; 191
    1ae4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1ae6:	a3 e5       	ldi	r26, 0x53	; 83
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e3 e5       	ldi	r30, 0x53	; 83
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 60       	ori	r24, 0x08	; 8
    1af2:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1af4:	a3 e5       	ldi	r26, 0x53	; 83
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e3 e5       	ldi	r30, 0x53	; 83
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	80 61       	ori	r24, 0x10	; 16
    1b00:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1b02:	a3 e5       	ldi	r26, 0x53	; 83
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e3 e5       	ldi	r30, 0x53	; 83
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 62       	ori	r24, 0x20	; 32
    1b0e:	8c 93       	st	X, r24
    1b10:	ad c0       	rjmp	.+346    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

		/* ============== FAST PWM MODE ============== */
	case TIM0_FAST_PWM_MODE_OUTPUT_COMPARE_OFF:
		SET_BIT(TCCR0,6);	//WGM00
    1b12:	a3 e5       	ldi	r26, 0x53	; 83
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e3 e5       	ldi	r30, 0x53	; 83
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	80 64       	ori	r24, 0x40	; 64
    1b1e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1b20:	a3 e5       	ldi	r26, 0x53	; 83
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e3 e5       	ldi	r30, 0x53	; 83
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	88 60       	ori	r24, 0x08	; 8
    1b2c:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1b2e:	a3 e5       	ldi	r26, 0x53	; 83
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e3 e5       	ldi	r30, 0x53	; 83
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8f 7e       	andi	r24, 0xEF	; 239
    1b3a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    1b3c:	a3 e5       	ldi	r26, 0x53	; 83
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e3 e5       	ldi	r30, 0x53	; 83
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	8f 7d       	andi	r24, 0xDF	; 223
    1b48:	8c 93       	st	X, r24
    1b4a:	90 c0       	rjmp	.+288    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_FAST_PWM_MODE_NON_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    1b4c:	a3 e5       	ldi	r26, 0x53	; 83
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e3 e5       	ldi	r30, 0x53	; 83
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	80 64       	ori	r24, 0x40	; 64
    1b58:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1b5a:	a3 e5       	ldi	r26, 0x53	; 83
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e3 e5       	ldi	r30, 0x53	; 83
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	88 60       	ori	r24, 0x08	; 8
    1b66:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1b68:	a3 e5       	ldi	r26, 0x53	; 83
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e3 e5       	ldi	r30, 0x53	; 83
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7e       	andi	r24, 0xEF	; 239
    1b74:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1b76:	a3 e5       	ldi	r26, 0x53	; 83
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e3 e5       	ldi	r30, 0x53	; 83
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 62       	ori	r24, 0x20	; 32
    1b82:	8c 93       	st	X, r24
    1b84:	73 c0       	rjmp	.+230    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_FAST_PWM_MODE_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    1b86:	a3 e5       	ldi	r26, 0x53	; 83
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e3 e5       	ldi	r30, 0x53	; 83
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	80 64       	ori	r24, 0x40	; 64
    1b92:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);	//WGM01
    1b94:	a3 e5       	ldi	r26, 0x53	; 83
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e3 e5       	ldi	r30, 0x53	; 83
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	88 60       	ori	r24, 0x08	; 8
    1ba0:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1ba2:	a3 e5       	ldi	r26, 0x53	; 83
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e3 e5       	ldi	r30, 0x53	; 83
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 61       	ori	r24, 0x10	; 16
    1bae:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1bb0:	a3 e5       	ldi	r26, 0x53	; 83
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e3 e5       	ldi	r30, 0x53	; 83
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	80 62       	ori	r24, 0x20	; 32
    1bbc:	8c 93       	st	X, r24
    1bbe:	56 c0       	rjmp	.+172    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

		/* ============== PHASE CORRECT PWM MODE ============== */
	case TIM0_PHASE_CORRECT_PWM_MODE_OUTPUT_COMPARE_OFF:
		SET_BIT(TCCR0,6);	//WGM00
    1bc0:	a3 e5       	ldi	r26, 0x53	; 83
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e3 e5       	ldi	r30, 0x53	; 83
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	80 64       	ori	r24, 0x40	; 64
    1bcc:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1bce:	a3 e5       	ldi	r26, 0x53	; 83
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e3 e5       	ldi	r30, 0x53	; 83
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	87 7f       	andi	r24, 0xF7	; 247
    1bda:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1bdc:	a3 e5       	ldi	r26, 0x53	; 83
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e3 e5       	ldi	r30, 0x53	; 83
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8f 7e       	andi	r24, 0xEF	; 239
    1be8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,5);	//COM01
    1bea:	a3 e5       	ldi	r26, 0x53	; 83
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e3 e5       	ldi	r30, 0x53	; 83
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8f 7d       	andi	r24, 0xDF	; 223
    1bf6:	8c 93       	st	X, r24
    1bf8:	39 c0       	rjmp	.+114    	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_PHASE_CORRECT_PWM_MODE_NON_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    1bfa:	a3 e5       	ldi	r26, 0x53	; 83
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e3 e5       	ldi	r30, 0x53	; 83
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 64       	ori	r24, 0x40	; 64
    1c06:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1c08:	a3 e5       	ldi	r26, 0x53	; 83
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e3 e5       	ldi	r30, 0x53	; 83
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	87 7f       	andi	r24, 0xF7	; 247
    1c14:	8c 93       	st	X, r24

		CLR_BIT(TCCR0,4);	//COM00
    1c16:	a3 e5       	ldi	r26, 0x53	; 83
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e3 e5       	ldi	r30, 0x53	; 83
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8f 7e       	andi	r24, 0xEF	; 239
    1c22:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1c24:	a3 e5       	ldi	r26, 0x53	; 83
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e3 e5       	ldi	r30, 0x53	; 83
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 62       	ori	r24, 0x20	; 32
    1c30:	8c 93       	st	X, r24
    1c32:	1c c0       	rjmp	.+56     	; 0x1c6c <MCAL_TIM0_SetTimerCompareMode+0x3f6>
		break;

	case TIM0_PHASE_CORRECT_PWM_MODE_INVERTED:
		SET_BIT(TCCR0,6);	//WGM00
    1c34:	a3 e5       	ldi	r26, 0x53	; 83
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e3 e5       	ldi	r30, 0x53	; 83
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 64       	ori	r24, 0x40	; 64
    1c40:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,3);	//WGM01
    1c42:	a3 e5       	ldi	r26, 0x53	; 83
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e3 e5       	ldi	r30, 0x53	; 83
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	87 7f       	andi	r24, 0xF7	; 247
    1c4e:	8c 93       	st	X, r24

		SET_BIT(TCCR0,4);	//COM00
    1c50:	a3 e5       	ldi	r26, 0x53	; 83
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e3 e5       	ldi	r30, 0x53	; 83
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 61       	ori	r24, 0x10	; 16
    1c5c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);	//COM01
    1c5e:	a3 e5       	ldi	r26, 0x53	; 83
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	8c 93       	st	X, r24
		break;
	}

}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <MCAL_TIM0_ClearTimer>:


/* To clear the timer 0 */
void MCAL_TIM0_ClearTimer()
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    1c80:	e2 e5       	ldi	r30, 0x52	; 82
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	10 82       	st	Z, r1
}
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <MCAL_TIM0_GetElapsedTime>:


/* To get the elapsed time since the timer starts from BOTTOM (0x00) */
u8 MCAL_TIM0_GetElapsedTime()
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1c94:	e2 e5       	ldi	r30, 0x52	; 82
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <MCAL_TIM0_GetRemainingTime>:


/* To get the remaining time to reach the TOP value */
u8 MCAL_TIM0_GetRemainingTime(u8 TOP)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	89 83       	std	Y+1, r24	; 0x01
	return (TOP - TCNT0);
    1cac:	e2 e5       	ldi	r30, 0x52	; 82
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	90 81       	ld	r25, Z
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	89 1b       	sub	r24, r25
}
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <MCAL_TIM0_BusyWait>:


/* To let the CPU wait for a specified time (Delay in ms) */
void MCAL_TIM0_BusyWait(u32 Copy_Delay)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <MCAL_TIM0_BusyWait+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <MCAL_TIM0_BusyWait+0x8>
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	69 83       	std	Y+1, r22	; 0x01
    1cce:	7a 83       	std	Y+2, r23	; 0x02
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
	MCAL_TIM0_SetCompareValue(199);
    1cd4:	87 ec       	ldi	r24, 0xC7	; 199
    1cd6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <MCAL_TIM0_SetCompareValue>
	MCAL_TIM0_StartTimer();
    1cda:	0e 94 11 0c 	call	0x1822	; 0x1822 <MCAL_TIM0_StartTimer>
    1cde:	10 c0       	rjmp	.+32     	; 0x1d00 <MCAL_TIM0_BusyWait+0x42>
	while(Copy_Delay--)
	{
		while(!GET_BIT(TIFR,0));
    1ce0:	e8 e5       	ldi	r30, 0x58	; 88
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	90 70       	andi	r25, 0x00	; 0
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	b9 f3       	breq	.-18     	; 0x1ce0 <MCAL_TIM0_BusyWait+0x22>
		SET_BIT(TIFR,0);
    1cf2:	a8 e5       	ldi	r26, 0x58	; 88
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e8 e5       	ldi	r30, 0x58	; 88
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	81 60       	ori	r24, 0x01	; 1
    1cfe:	8c 93       	st	X, r24
/* To let the CPU wait for a specified time (Delay in ms) */
void MCAL_TIM0_BusyWait(u32 Copy_Delay)
{
	MCAL_TIM0_SetCompareValue(199);
	MCAL_TIM0_StartTimer();
	while(Copy_Delay--)
    1d00:	1d 82       	std	Y+5, r1	; 0x05
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	ab 81       	ldd	r26, Y+3	; 0x03
    1d08:	bc 81       	ldd	r27, Y+4	; 0x04
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	a1 05       	cpc	r26, r1
    1d0e:	b1 05       	cpc	r27, r1
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <MCAL_TIM0_BusyWait+0x58>
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d1c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	a1 09       	sbc	r26, r1
    1d22:	b1 09       	sbc	r27, r1
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	ab 83       	std	Y+3, r26	; 0x03
    1d2a:	bc 83       	std	Y+4, r27	; 0x04
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	88 23       	and	r24, r24
    1d30:	b9 f6       	brne	.-82     	; 0x1ce0 <MCAL_TIM0_BusyWait+0x22>
	{
		while(!GET_BIT(TIFR,0));
		SET_BIT(TIFR,0);
	}
	MCAL_TIM0_StartTimer();
    1d32:	0e 94 11 0c 	call	0x1822	; 0x1822 <MCAL_TIM0_StartTimer>
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <MCAL_TIM0_SetCompareValue>:


/* To set the compare value/threshold for timer 0 */
void MCAL_TIM0_SetCompareValue(u8 TOP)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = TOP;
    1d52:	ec e5       	ldi	r30, 0x5C	; 92
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	80 83       	st	Z, r24
}
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <MCAL_TIM0_EnableOVFInterrupt>:


/* To enable the timer 0 interrupt on overflow */
void MCAL_TIM0_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <MCAL_TIM0_EnableOVFInterrupt+0x6>
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,0);
    1d70:	a9 e5       	ldi	r26, 0x59	; 89
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e9 e5       	ldi	r30, 0x59	; 89
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	81 60       	ori	r24, 0x01	; 1
    1d7c:	8c 93       	st	X, r24
	if(CallbackFunction != NULL)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	9a 81       	ldd	r25, Y+2	; 0x02
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	31 f0       	breq	.+12     	; 0x1d92 <MCAL_TIM0_EnableOVFInterrupt+0x30>
	{
		TIM0_OVF_ISR = CallbackFunction;
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8a:	90 93 6d 00 	sts	0x006D, r25
    1d8e:	80 93 6c 00 	sts	0x006C, r24
	}
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <MCAL_TIM0_EnableCOMPInterrupt>:


/* To enable the timer 0 interrupt on compare match */
void MCAL_TIM0_EnableCOMPInterrupt(void(*CallbackFunction)(void))
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <MCAL_TIM0_EnableCOMPInterrupt+0x6>
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,1);
    1daa:	a9 e5       	ldi	r26, 0x59	; 89
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e9 e5       	ldi	r30, 0x59	; 89
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	82 60       	ori	r24, 0x02	; 2
    1db6:	8c 93       	st	X, r24
	if(CallbackFunction != NULL)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <MCAL_TIM0_EnableCOMPInterrupt+0x30>
	{
		TIM0_COMP_ISR = CallbackFunction;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	90 93 6b 00 	sts	0x006B, r25
    1dc8:	80 93 6a 00 	sts	0x006A, r24
	}
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <MCAL_TIM0_DisableOVFInterrupt>:


/* To disable the timer 0 interrupt on overflow */
void MCAL_TIM0_DisableOVFInterrupt()
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,0);
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8e 7f       	andi	r24, 0xFE	; 254
    1dea:	8c 93       	st	X, r24
	TIM0_OVF_ISR = NULL;
    1dec:	10 92 6d 00 	sts	0x006D, r1
    1df0:	10 92 6c 00 	sts	0x006C, r1
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <MCAL_TIM0_DisableCOMPInterrupt>:


/* To disable the timer 0 interrupt on compare match */
void MCAL_TIM0_DisableCOMPInterrupt()
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
    1e02:	a9 e5       	ldi	r26, 0x59	; 89
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e9 e5       	ldi	r30, 0x59	; 89
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8d 7f       	andi	r24, 0xFD	; 253
    1e0e:	8c 93       	st	X, r24
	TIM0_COMP_ISR = NULL;
    1e10:	10 92 6b 00 	sts	0x006B, r1
    1e14:	10 92 6a 00 	sts	0x006A, r1
}
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <__vector_10>:


void __vector_10(void) __attribute__((signal, used));
void __vector_10(void)		// TIMER0 COMP
{
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_COMP_ISR != NULL)
    1e48:	80 91 6a 00 	lds	r24, 0x006A
    1e4c:	90 91 6b 00 	lds	r25, 0x006B
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <__vector_10+0x40>
	{
		TIM0_COMP_ISR();
    1e54:	e0 91 6a 00 	lds	r30, 0x006A
    1e58:	f0 91 6b 00 	lds	r31, 0x006B
    1e5c:	09 95       	icall
	}
}
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	ff 91       	pop	r31
    1e64:	ef 91       	pop	r30
    1e66:	bf 91       	pop	r27
    1e68:	af 91       	pop	r26
    1e6a:	9f 91       	pop	r25
    1e6c:	8f 91       	pop	r24
    1e6e:	7f 91       	pop	r23
    1e70:	6f 91       	pop	r22
    1e72:	5f 91       	pop	r21
    1e74:	4f 91       	pop	r20
    1e76:	3f 91       	pop	r19
    1e78:	2f 91       	pop	r18
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0f 90       	pop	r0
    1e80:	1f 90       	pop	r1
    1e82:	18 95       	reti

00001e84 <__vector_11>:


void __vector_11(void) __attribute__((signal, used));
void __vector_11(void)		// TIMER0 OVF
{
    1e84:	1f 92       	push	r1
    1e86:	0f 92       	push	r0
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	0f 92       	push	r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	2f 93       	push	r18
    1e90:	3f 93       	push	r19
    1e92:	4f 93       	push	r20
    1e94:	5f 93       	push	r21
    1e96:	6f 93       	push	r22
    1e98:	7f 93       	push	r23
    1e9a:	8f 93       	push	r24
    1e9c:	9f 93       	push	r25
    1e9e:	af 93       	push	r26
    1ea0:	bf 93       	push	r27
    1ea2:	ef 93       	push	r30
    1ea4:	ff 93       	push	r31
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
	if(TIM0_OVF_ISR != NULL)
    1eae:	80 91 6c 00 	lds	r24, 0x006C
    1eb2:	90 91 6d 00 	lds	r25, 0x006D
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	29 f0       	breq	.+10     	; 0x1ec4 <__vector_11+0x40>
	{
		TIM0_OVF_ISR();
    1eba:	e0 91 6c 00 	lds	r30, 0x006C
    1ebe:	f0 91 6d 00 	lds	r31, 0x006D
    1ec2:	09 95       	icall
	}
}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	ff 91       	pop	r31
    1eca:	ef 91       	pop	r30
    1ecc:	bf 91       	pop	r27
    1ece:	af 91       	pop	r26
    1ed0:	9f 91       	pop	r25
    1ed2:	8f 91       	pop	r24
    1ed4:	7f 91       	pop	r23
    1ed6:	6f 91       	pop	r22
    1ed8:	5f 91       	pop	r21
    1eda:	4f 91       	pop	r20
    1edc:	3f 91       	pop	r19
    1ede:	2f 91       	pop	r18
    1ee0:	0f 90       	pop	r0
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	0f 90       	pop	r0
    1ee6:	1f 90       	pop	r1
    1ee8:	18 95       	reti

00001eea <MCAL_TIM1_EnableTimer>:
void (*TIM1_CAPT_ISR) (void);


/* To Enable the TIM1 & Select the timer 1 clock */
void MCAL_TIM1_EnableTimer()
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= TIM1_CLK_SOUCRE;
    1ef2:	ae e4       	ldi	r26, 0x4E	; 78
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ee e4       	ldi	r30, 0x4E	; 78
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	82 60       	ori	r24, 0x02	; 2
    1efe:	8c 93       	st	X, r24
}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <MCAL_TIM1_StopTimer>:


/* To Stop the TIM1 */
void MCAL_TIM1_StopTimer()
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
    1f0e:	ae e4       	ldi	r26, 0x4E	; 78
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	ee e4       	ldi	r30, 0x4E	; 78
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	88 7f       	andi	r24, 0xF8	; 248
    1f1a:	8c 93       	st	X, r24
}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <MCAL_TIM1_Preset>:


void MCAL_TIM1_Preset(u16 Copy_PresetValue)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <MCAL_TIM1_Preset+0x6>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_PresetValue;
    1f30:	ec e4       	ldi	r30, 0x4C	; 76
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <MCAL_TIM1_SetTimerCompareMode>:


/* To select the TIM1 mode of operation */
void MCAL_TIM1_SetTimerCompareMode(u8 Mode)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <MCAL_TIM1_SetTimerCompareMode+0x6>
    1f4c:	0f 92       	push	r0
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	3b 83       	std	Y+3, r19	; 0x03
    1f5c:	2a 83       	std	Y+2, r18	; 0x02
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	8e 30       	cpi	r24, 0x0E	; 14
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <MCAL_TIM1_SetTimerCompareMode+0x24>
    1f68:	89 c2       	rjmp	.+1298   	; 0x247c <MCAL_TIM1_SetTimerCompareMode+0x536>
    1f6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f6c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f6e:	2f 30       	cpi	r18, 0x0F	; 15
    1f70:	31 05       	cpc	r19, r1
    1f72:	0c f0       	brlt	.+2      	; 0x1f76 <MCAL_TIM1_SetTimerCompareMode+0x30>
    1f74:	54 c0       	rjmp	.+168    	; 0x201e <MCAL_TIM1_SetTimerCompareMode+0xd8>
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7a:	86 30       	cpi	r24, 0x06	; 6
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <MCAL_TIM1_SetTimerCompareMode+0x3c>
    1f80:	81 c1       	rjmp	.+770    	; 0x2284 <MCAL_TIM1_SetTimerCompareMode+0x33e>
    1f82:	2a 81       	ldd	r18, Y+2	; 0x02
    1f84:	3b 81       	ldd	r19, Y+3	; 0x03
    1f86:	27 30       	cpi	r18, 0x07	; 7
    1f88:	31 05       	cpc	r19, r1
    1f8a:	24 f5       	brge	.+72     	; 0x1fd4 <MCAL_TIM1_SetTimerCompareMode+0x8e>
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	91 05       	cpc	r25, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <MCAL_TIM1_SetTimerCompareMode+0x52>
    1f96:	e6 c0       	rjmp	.+460    	; 0x2164 <MCAL_TIM1_SetTimerCompareMode+0x21e>
    1f98:	2a 81       	ldd	r18, Y+2	; 0x02
    1f9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f9c:	23 30       	cpi	r18, 0x03	; 3
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	64 f4       	brge	.+24     	; 0x1fba <MCAL_TIM1_SetTimerCompareMode+0x74>
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <MCAL_TIM1_SetTimerCompareMode+0x66>
    1faa:	94 c0       	rjmp	.+296    	; 0x20d4 <MCAL_TIM1_SetTimerCompareMode+0x18e>
    1fac:	2a 81       	ldd	r18, Y+2	; 0x02
    1fae:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb0:	21 30       	cpi	r18, 0x01	; 1
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <MCAL_TIM1_SetTimerCompareMode+0x72>
    1fb6:	b2 c0       	rjmp	.+356    	; 0x211c <MCAL_TIM1_SetTimerCompareMode+0x1d6>
    1fb8:	a8 c2       	rjmp	.+1360   	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	84 30       	cpi	r24, 0x04	; 4
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <MCAL_TIM1_SetTimerCompareMode+0x80>
    1fc4:	17 c1       	rjmp	.+558    	; 0x21f4 <MCAL_TIM1_SetTimerCompareMode+0x2ae>
    1fc6:	2a 81       	ldd	r18, Y+2	; 0x02
    1fc8:	3b 81       	ldd	r19, Y+3	; 0x03
    1fca:	25 30       	cpi	r18, 0x05	; 5
    1fcc:	31 05       	cpc	r19, r1
    1fce:	0c f0       	brlt	.+2      	; 0x1fd2 <MCAL_TIM1_SetTimerCompareMode+0x8c>
    1fd0:	35 c1       	rjmp	.+618    	; 0x223c <MCAL_TIM1_SetTimerCompareMode+0x2f6>
    1fd2:	ec c0       	rjmp	.+472    	; 0x21ac <MCAL_TIM1_SetTimerCompareMode+0x266>
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	8a 30       	cpi	r24, 0x0A	; 10
    1fda:	91 05       	cpc	r25, r1
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <MCAL_TIM1_SetTimerCompareMode+0x9a>
    1fde:	d0 c1       	rjmp	.+928    	; 0x2380 <MCAL_TIM1_SetTimerCompareMode+0x43a>
    1fe0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fe2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe4:	2b 30       	cpi	r18, 0x0B	; 11
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	6c f4       	brge	.+26     	; 0x2004 <MCAL_TIM1_SetTimerCompareMode+0xbe>
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	88 30       	cpi	r24, 0x08	; 8
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <MCAL_TIM1_SetTimerCompareMode+0xb0>
    1ff4:	8f c1       	rjmp	.+798    	; 0x2314 <MCAL_TIM1_SetTimerCompareMode+0x3ce>
    1ff6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff8:	3b 81       	ldd	r19, Y+3	; 0x03
    1ffa:	29 30       	cpi	r18, 0x09	; 9
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <MCAL_TIM1_SetTimerCompareMode+0xbc>
    2000:	ad c1       	rjmp	.+858    	; 0x235c <MCAL_TIM1_SetTimerCompareMode+0x416>
    2002:	64 c1       	rjmp	.+712    	; 0x22cc <MCAL_TIM1_SetTimerCompareMode+0x386>
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	9b 81       	ldd	r25, Y+3	; 0x03
    2008:	8c 30       	cpi	r24, 0x0C	; 12
    200a:	91 05       	cpc	r25, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <MCAL_TIM1_SetTimerCompareMode+0xca>
    200e:	00 c2       	rjmp	.+1024   	; 0x2410 <MCAL_TIM1_SetTimerCompareMode+0x4ca>
    2010:	2a 81       	ldd	r18, Y+2	; 0x02
    2012:	3b 81       	ldd	r19, Y+3	; 0x03
    2014:	2d 30       	cpi	r18, 0x0D	; 13
    2016:	31 05       	cpc	r19, r1
    2018:	0c f0       	brlt	.+2      	; 0x201c <MCAL_TIM1_SetTimerCompareMode+0xd6>
    201a:	1e c2       	rjmp	.+1084   	; 0x2458 <MCAL_TIM1_SetTimerCompareMode+0x512>
    201c:	d5 c1       	rjmp	.+938    	; 0x23c8 <MCAL_TIM1_SetTimerCompareMode+0x482>
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	86 31       	cpi	r24, 0x16	; 22
    2024:	91 05       	cpc	r25, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <MCAL_TIM1_SetTimerCompareMode+0xe4>
    2028:	3f c1       	rjmp	.+638    	; 0x22a8 <MCAL_TIM1_SetTimerCompareMode+0x362>
    202a:	2a 81       	ldd	r18, Y+2	; 0x02
    202c:	3b 81       	ldd	r19, Y+3	; 0x03
    202e:	27 31       	cpi	r18, 0x17	; 23
    2030:	31 05       	cpc	r19, r1
    2032:	2c f5       	brge	.+74     	; 0x207e <MCAL_TIM1_SetTimerCompareMode+0x138>
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	82 31       	cpi	r24, 0x12	; 18
    203a:	91 05       	cpc	r25, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <MCAL_TIM1_SetTimerCompareMode+0xfa>
    203e:	a4 c0       	rjmp	.+328    	; 0x2188 <MCAL_TIM1_SetTimerCompareMode+0x242>
    2040:	2a 81       	ldd	r18, Y+2	; 0x02
    2042:	3b 81       	ldd	r19, Y+3	; 0x03
    2044:	23 31       	cpi	r18, 0x13	; 19
    2046:	31 05       	cpc	r19, r1
    2048:	6c f4       	brge	.+26     	; 0x2064 <MCAL_TIM1_SetTimerCompareMode+0x11e>
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	80 31       	cpi	r24, 0x10	; 16
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <MCAL_TIM1_SetTimerCompareMode+0x110>
    2054:	51 c0       	rjmp	.+162    	; 0x20f8 <MCAL_TIM1_SetTimerCompareMode+0x1b2>
    2056:	2a 81       	ldd	r18, Y+2	; 0x02
    2058:	3b 81       	ldd	r19, Y+3	; 0x03
    205a:	21 31       	cpi	r18, 0x11	; 17
    205c:	31 05       	cpc	r19, r1
    205e:	0c f0       	brlt	.+2      	; 0x2062 <MCAL_TIM1_SetTimerCompareMode+0x11c>
    2060:	6f c0       	rjmp	.+222    	; 0x2140 <MCAL_TIM1_SetTimerCompareMode+0x1fa>
    2062:	30 c2       	rjmp	.+1120   	; 0x24c4 <MCAL_TIM1_SetTimerCompareMode+0x57e>
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	84 31       	cpi	r24, 0x14	; 20
    206a:	91 05       	cpc	r25, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <MCAL_TIM1_SetTimerCompareMode+0x12a>
    206e:	d4 c0       	rjmp	.+424    	; 0x2218 <MCAL_TIM1_SetTimerCompareMode+0x2d2>
    2070:	2a 81       	ldd	r18, Y+2	; 0x02
    2072:	3b 81       	ldd	r19, Y+3	; 0x03
    2074:	25 31       	cpi	r18, 0x15	; 21
    2076:	31 05       	cpc	r19, r1
    2078:	0c f0       	brlt	.+2      	; 0x207c <MCAL_TIM1_SetTimerCompareMode+0x136>
    207a:	f2 c0       	rjmp	.+484    	; 0x2260 <MCAL_TIM1_SetTimerCompareMode+0x31a>
    207c:	a9 c0       	rjmp	.+338    	; 0x21d0 <MCAL_TIM1_SetTimerCompareMode+0x28a>
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	8a 31       	cpi	r24, 0x1A	; 26
    2084:	91 05       	cpc	r25, r1
    2086:	09 f4       	brne	.+2      	; 0x208a <MCAL_TIM1_SetTimerCompareMode+0x144>
    2088:	b1 c1       	rjmp	.+866    	; 0x23ec <MCAL_TIM1_SetTimerCompareMode+0x4a6>
    208a:	2a 81       	ldd	r18, Y+2	; 0x02
    208c:	3b 81       	ldd	r19, Y+3	; 0x03
    208e:	2b 31       	cpi	r18, 0x1B	; 27
    2090:	31 05       	cpc	r19, r1
    2092:	6c f4       	brge	.+26     	; 0x20ae <MCAL_TIM1_SetTimerCompareMode+0x168>
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	9b 81       	ldd	r25, Y+3	; 0x03
    2098:	88 31       	cpi	r24, 0x18	; 24
    209a:	91 05       	cpc	r25, r1
    209c:	09 f4       	brne	.+2      	; 0x20a0 <MCAL_TIM1_SetTimerCompareMode+0x15a>
    209e:	4c c1       	rjmp	.+664    	; 0x2338 <MCAL_TIM1_SetTimerCompareMode+0x3f2>
    20a0:	2a 81       	ldd	r18, Y+2	; 0x02
    20a2:	3b 81       	ldd	r19, Y+3	; 0x03
    20a4:	29 31       	cpi	r18, 0x19	; 25
    20a6:	31 05       	cpc	r19, r1
    20a8:	0c f0       	brlt	.+2      	; 0x20ac <MCAL_TIM1_SetTimerCompareMode+0x166>
    20aa:	7c c1       	rjmp	.+760    	; 0x23a4 <MCAL_TIM1_SetTimerCompareMode+0x45e>
    20ac:	21 c1       	rjmp	.+578    	; 0x22f0 <MCAL_TIM1_SetTimerCompareMode+0x3aa>
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	8c 31       	cpi	r24, 0x1C	; 28
    20b4:	91 05       	cpc	r25, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <MCAL_TIM1_SetTimerCompareMode+0x174>
    20b8:	f3 c1       	rjmp	.+998    	; 0x24a0 <MCAL_TIM1_SetTimerCompareMode+0x55a>
    20ba:	2a 81       	ldd	r18, Y+2	; 0x02
    20bc:	3b 81       	ldd	r19, Y+3	; 0x03
    20be:	2c 31       	cpi	r18, 0x1C	; 28
    20c0:	31 05       	cpc	r19, r1
    20c2:	0c f4       	brge	.+2      	; 0x20c6 <MCAL_TIM1_SetTimerCompareMode+0x180>
    20c4:	b7 c1       	rjmp	.+878    	; 0x2434 <MCAL_TIM1_SetTimerCompareMode+0x4ee>
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	8d 31       	cpi	r24, 0x1D	; 29
    20cc:	91 05       	cpc	r25, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <MCAL_TIM1_SetTimerCompareMode+0x18c>
    20d0:	0b c2       	rjmp	.+1046   	; 0x24e8 <MCAL_TIM1_SetTimerCompareMode+0x5a2>
    20d2:	1b c2       	rjmp	.+1078   	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
	{

	/* ============== NORMAL MODE ============== */
	case TIM1_NORMAL_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    20d4:	af e4       	ldi	r26, 0x4F	; 79
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ef e4       	ldi	r30, 0x4F	; 79
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8f 77       	andi	r24, 0x7F	; 127
    20e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    20e2:	af e4       	ldi	r26, 0x4F	; 79
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ef e4       	ldi	r30, 0x4F	; 79
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8f 7b       	andi	r24, 0xBF	; 191
    20ee:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    20f6:	09 c2       	rjmp	.+1042   	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    20f8:	af e4       	ldi	r26, 0x4F	; 79
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ef e4       	ldi	r30, 0x4F	; 79
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8f 7d       	andi	r24, 0xDF	; 223
    2104:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2106:	af e4       	ldi	r26, 0x4F	; 79
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	ef e4       	ldi	r30, 0x4F	; 79
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	8f 7e       	andi	r24, 0xEF	; 239
    2112:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    211a:	f7 c1       	rjmp	.+1006   	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    211c:	af e4       	ldi	r26, 0x4F	; 79
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	ef e4       	ldi	r30, 0x4F	; 79
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8f 77       	andi	r24, 0x7F	; 127
    2128:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    212a:	af e4       	ldi	r26, 0x4F	; 79
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ef e4       	ldi	r30, 0x4F	; 79
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 64       	ori	r24, 0x40	; 64
    2136:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    213e:	e5 c1       	rjmp	.+970    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_TOGGLE_OC1B_ON_COMPARE:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2140:	af e4       	ldi	r26, 0x4F	; 79
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ef e4       	ldi	r30, 0x4F	; 79
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 7d       	andi	r24, 0xDF	; 223
    214c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    214e:	af e4       	ldi	r26, 0x4F	; 79
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	ef e4       	ldi	r30, 0x4F	; 79
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	80 61       	ori	r24, 0x10	; 16
    215a:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2162:	d3 c1       	rjmp	.+934    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_CLEAR_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    2164:	af e4       	ldi	r26, 0x4F	; 79
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	ef e4       	ldi	r30, 0x4F	; 79
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	80 68       	ori	r24, 0x80	; 128
    2170:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2172:	af e4       	ldi	r26, 0x4F	; 79
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ef e4       	ldi	r30, 0x4F	; 79
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8f 7b       	andi	r24, 0xBF	; 191
    217e:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2186:	c1 c1       	rjmp	.+898    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_CLEAR_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    2188:	af e4       	ldi	r26, 0x4F	; 79
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	ef e4       	ldi	r30, 0x4F	; 79
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	80 62       	ori	r24, 0x20	; 32
    2194:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2196:	af e4       	ldi	r26, 0x4F	; 79
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ef e4       	ldi	r30, 0x4F	; 79
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7e       	andi	r24, 0xEF	; 239
    21a2:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    21aa:	af c1       	rjmp	.+862    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_SET_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    21ac:	af e4       	ldi	r26, 0x4F	; 79
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	ef e4       	ldi	r30, 0x4F	; 79
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	80 68       	ori	r24, 0x80	; 128
    21b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    21ba:	af e4       	ldi	r26, 0x4F	; 79
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ef e4       	ldi	r30, 0x4F	; 79
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 64       	ori	r24, 0x40	; 64
    21c6:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    21ce:	9d c1       	rjmp	.+826    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_NORMAL_MODE_SET_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    21d0:	af e4       	ldi	r26, 0x4F	; 79
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ef e4       	ldi	r30, 0x4F	; 79
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	80 62       	ori	r24, 0x20	; 32
    21dc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    21de:	af e4       	ldi	r26, 0x4F	; 79
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	ef e4       	ldi	r30, 0x4F	; 79
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	80 61       	ori	r24, 0x10	; 16
    21ea:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_NORMAL_MODE);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    21f2:	8b c1       	rjmp	.+790    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	/* =============== CTC MODE ================ */
	case TIM1_CTC_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    21f4:	af e4       	ldi	r26, 0x4F	; 79
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e4       	ldi	r30, 0x4F	; 79
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8f 77       	andi	r24, 0x7F	; 127
    2200:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2202:	af e4       	ldi	r26, 0x4F	; 79
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ef e4       	ldi	r30, 0x4F	; 79
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	8f 7b       	andi	r24, 0xBF	; 191
    220e:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    2210:	84 e0       	ldi	r24, 0x04	; 4
    2212:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2216:	79 c1       	rjmp	.+754    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2218:	af e4       	ldi	r26, 0x4F	; 79
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ef e4       	ldi	r30, 0x4F	; 79
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2226:	af e4       	ldi	r26, 0x4F	; 79
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ef e4       	ldi	r30, 0x4F	; 79
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 7e       	andi	r24, 0xEF	; 239
    2232:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    2234:	84 e0       	ldi	r24, 0x04	; 4
    2236:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    223a:	67 c1       	rjmp	.+718    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    223c:	af e4       	ldi	r26, 0x4F	; 79
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ef e4       	ldi	r30, 0x4F	; 79
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8f 77       	andi	r24, 0x7F	; 127
    2248:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    224a:	af e4       	ldi	r26, 0x4F	; 79
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ef e4       	ldi	r30, 0x4F	; 79
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 64       	ori	r24, 0x40	; 64
    2256:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    2258:	84 e0       	ldi	r24, 0x04	; 4
    225a:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    225e:	55 c1       	rjmp	.+682    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_TOGGLE_OC1B_ON_COMPARE:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2260:	af e4       	ldi	r26, 0x4F	; 79
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	ef e4       	ldi	r30, 0x4F	; 79
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 7d       	andi	r24, 0xDF	; 223
    226c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    226e:	af e4       	ldi	r26, 0x4F	; 79
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ef e4       	ldi	r30, 0x4F	; 79
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	80 61       	ori	r24, 0x10	; 16
    227a:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    227c:	84 e0       	ldi	r24, 0x04	; 4
    227e:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2282:	43 c1       	rjmp	.+646    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_CLEAR_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    2284:	af e4       	ldi	r26, 0x4F	; 79
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	ef e4       	ldi	r30, 0x4F	; 79
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	80 68       	ori	r24, 0x80	; 128
    2290:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2292:	af e4       	ldi	r26, 0x4F	; 79
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ef e4       	ldi	r30, 0x4F	; 79
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8f 7b       	andi	r24, 0xBF	; 191
    229e:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    22a0:	84 e0       	ldi	r24, 0x04	; 4
    22a2:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    22a6:	31 c1       	rjmp	.+610    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_CLEAR_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    22a8:	af e4       	ldi	r26, 0x4F	; 79
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ef e4       	ldi	r30, 0x4F	; 79
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 62       	ori	r24, 0x20	; 32
    22b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    22b6:	af e4       	ldi	r26, 0x4F	; 79
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ef e4       	ldi	r30, 0x4F	; 79
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8f 7e       	andi	r24, 0xEF	; 239
    22c2:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    22c4:	84 e0       	ldi	r24, 0x04	; 4
    22c6:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    22ca:	1f c1       	rjmp	.+574    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_SET_OC1A_ON_COMPARE:
		SET_BIT(TCCR1A,7);	//COM1A1
    22cc:	af e4       	ldi	r26, 0x4F	; 79
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	ef e4       	ldi	r30, 0x4F	; 79
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	80 68       	ori	r24, 0x80	; 128
    22d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    22da:	af e4       	ldi	r26, 0x4F	; 79
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	ef e4       	ldi	r30, 0x4F	; 79
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	80 64       	ori	r24, 0x40	; 64
    22e6:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    22e8:	84 e0       	ldi	r24, 0x04	; 4
    22ea:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    22ee:	0d c1       	rjmp	.+538    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_CTC_MODE_SET_OC1B_ON_COMPARE:
		SET_BIT(TCCR1A,5);	//COM1B1
    22f0:	af e4       	ldi	r26, 0x4F	; 79
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ef e4       	ldi	r30, 0x4F	; 79
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	80 62       	ori	r24, 0x20	; 32
    22fc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    22fe:	af e4       	ldi	r26, 0x4F	; 79
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	ef e4       	ldi	r30, 0x4F	; 79
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 61       	ori	r24, 0x10	; 16
    230a:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_CTC_MODE);
    230c:	84 e0       	ldi	r24, 0x04	; 4
    230e:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2312:	fb c0       	rjmp	.+502    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	/* ============= FAST PWM MODE ============ */
	case TIM1_FAST_PWM_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    2314:	af e4       	ldi	r26, 0x4F	; 79
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ef e4       	ldi	r30, 0x4F	; 79
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	8f 77       	andi	r24, 0x7F	; 127
    2320:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2322:	af e4       	ldi	r26, 0x4F	; 79
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	ef e4       	ldi	r30, 0x4F	; 79
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8f 7b       	andi	r24, 0xBF	; 191
    232e:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    2330:	8e e0       	ldi	r24, 0x0E	; 14
    2332:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2336:	e9 c0       	rjmp	.+466    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2338:	af e4       	ldi	r26, 0x4F	; 79
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ef e4       	ldi	r30, 0x4F	; 79
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	8f 7d       	andi	r24, 0xDF	; 223
    2344:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2346:	af e4       	ldi	r26, 0x4F	; 79
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8f 7e       	andi	r24, 0xEF	; 239
    2352:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    2354:	8e e0       	ldi	r24, 0x0E	; 14
    2356:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    235a:	d7 c0       	rjmp	.+430    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    235c:	af e4       	ldi	r26, 0x4F	; 79
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ef e4       	ldi	r30, 0x4F	; 79
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8f 77       	andi	r24, 0x7F	; 127
    2368:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    236a:	af e4       	ldi	r26, 0x4F	; 79
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	ef e4       	ldi	r30, 0x4F	; 79
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	80 64       	ori	r24, 0x40	; 64
    2376:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    2378:	8e e0       	ldi	r24, 0x0E	; 14
    237a:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    237e:	c5 c0       	rjmp	.+394    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1A_NON_INVERTED:
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_IC_MODE);
    2380:	8d e0       	ldi	r24, 0x0D	; 13
    2382:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
		SET_BIT(TCCR1A,7);	//COM1A1
    2386:	af e4       	ldi	r26, 0x4F	; 79
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	ef e4       	ldi	r30, 0x4F	; 79
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 68       	ori	r24, 0x80	; 128
    2392:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    2394:	af e4       	ldi	r26, 0x4F	; 79
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ef e4       	ldi	r30, 0x4F	; 79
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8f 7b       	andi	r24, 0xBF	; 191
    23a0:	8c 93       	st	X, r24
    23a2:	b3 c0       	rjmp	.+358    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1B_NON_INVERTED:
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_IC_MODE);
    23a4:	8d e0       	ldi	r24, 0x0D	; 13
    23a6:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
		SET_BIT(TCCR1A,5);	//COM1B1
    23aa:	af e4       	ldi	r26, 0x4F	; 79
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ef e4       	ldi	r30, 0x4F	; 79
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	80 62       	ori	r24, 0x20	; 32
    23b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    23b8:	af e4       	ldi	r26, 0x4F	; 79
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ef e4       	ldi	r30, 0x4F	; 79
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	8f 7e       	andi	r24, 0xEF	; 239
    23c4:	8c 93       	st	X, r24
    23c6:	a1 c0       	rjmp	.+322    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1A_INVERTED:
		SET_BIT(TCCR1A,7);	//COM1A1
    23c8:	af e4       	ldi	r26, 0x4F	; 79
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	ef e4       	ldi	r30, 0x4F	; 79
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 68       	ori	r24, 0x80	; 128
    23d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    23d6:	af e4       	ldi	r26, 0x4F	; 79
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	ef e4       	ldi	r30, 0x4F	; 79
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 64       	ori	r24, 0x40	; 64
    23e2:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    23e4:	8e e0       	ldi	r24, 0x0E	; 14
    23e6:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    23ea:	8f c0       	rjmp	.+286    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_FAST_PWM_MODE_OC1B_INVERTED:
		SET_BIT(TCCR1A,5);	//COM1B1
    23ec:	af e4       	ldi	r26, 0x4F	; 79
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	ef e4       	ldi	r30, 0x4F	; 79
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 62       	ori	r24, 0x20	; 32
    23f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    23fa:	af e4       	ldi	r26, 0x4F	; 79
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	ef e4       	ldi	r30, 0x4F	; 79
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 61       	ori	r24, 0x10	; 16
    2406:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_FAST_PWM_MODE);
    2408:	8e e0       	ldi	r24, 0x0E	; 14
    240a:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    240e:	7d c0       	rjmp	.+250    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	/* === PHASE (AND FREQUENCY) CORRECT PWM MODE === */
	case TIM1_PHASE_CORRECT_PWM_MODE_OUTPUT_COMPARE_OC1A_OFF:
		CLR_BIT(TCCR1A,7);	//COM1A1
    2410:	af e4       	ldi	r26, 0x4F	; 79
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ef e4       	ldi	r30, 0x4F	; 79
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	8f 77       	andi	r24, 0x7F	; 127
    241c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    241e:	af e4       	ldi	r26, 0x4F	; 79
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	ef e4       	ldi	r30, 0x4F	; 79
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8f 7b       	andi	r24, 0xBF	; 191
    242a:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    242c:	8b e0       	ldi	r24, 0x0B	; 11
    242e:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2432:	6b c0       	rjmp	.+214    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OUTPUT_COMPARE_OC1B_OFF:
		CLR_BIT(TCCR1A,5);	//COM1B1
    2434:	af e4       	ldi	r26, 0x4F	; 79
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	ef e4       	ldi	r30, 0x4F	; 79
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8f 7d       	andi	r24, 0xDF	; 223
    2440:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    2442:	af e4       	ldi	r26, 0x4F	; 79
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	ef e4       	ldi	r30, 0x4F	; 79
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	8f 7e       	andi	r24, 0xEF	; 239
    244e:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    2450:	8b e0       	ldi	r24, 0x0B	; 11
    2452:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    2456:	59 c0       	rjmp	.+178    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_TOGGLE_OC1A_ON_COMPARE:
		CLR_BIT(TCCR1A,7);	//COM1A1
    2458:	af e4       	ldi	r26, 0x4F	; 79
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	ef e4       	ldi	r30, 0x4F	; 79
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	8f 77       	andi	r24, 0x7F	; 127
    2464:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    2466:	af e4       	ldi	r26, 0x4F	; 79
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ef e4       	ldi	r30, 0x4F	; 79
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	80 64       	ori	r24, 0x40	; 64
    2472:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    2474:	8b e0       	ldi	r24, 0x0B	; 11
    2476:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    247a:	47 c0       	rjmp	.+142    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1A_NON_INVERTED:
		SET_BIT(TCCR1A,7);	//COM1A1
    247c:	af e4       	ldi	r26, 0x4F	; 79
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ef e4       	ldi	r30, 0x4F	; 79
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	80 68       	ori	r24, 0x80	; 128
    2488:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,6);	//COM1A0
    248a:	af e4       	ldi	r26, 0x4F	; 79
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	ef e4       	ldi	r30, 0x4F	; 79
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8f 7b       	andi	r24, 0xBF	; 191
    2496:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    2498:	8b e0       	ldi	r24, 0x0B	; 11
    249a:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    249e:	35 c0       	rjmp	.+106    	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1B_NON_INVERTED:
		SET_BIT(TCCR1A,5);	//COM1B1
    24a0:	af e4       	ldi	r26, 0x4F	; 79
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ef e4       	ldi	r30, 0x4F	; 79
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	80 62       	ori	r24, 0x20	; 32
    24ac:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,4);	//COM1B0
    24ae:	af e4       	ldi	r26, 0x4F	; 79
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8f 7e       	andi	r24, 0xEF	; 239
    24ba:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    24bc:	8b e0       	ldi	r24, 0x0B	; 11
    24be:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    24c2:	23 c0       	rjmp	.+70     	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1A_INVERTED:
		SET_BIT(TCCR1A,7);	//COM1A1
    24c4:	af e4       	ldi	r26, 0x4F	; 79
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ef e4       	ldi	r30, 0x4F	; 79
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	80 68       	ori	r24, 0x80	; 128
    24d0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,6);	//COM1A0
    24d2:	af e4       	ldi	r26, 0x4F	; 79
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	ef e4       	ldi	r30, 0x4F	; 79
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	80 64       	ori	r24, 0x40	; 64
    24de:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    24e0:	8b e0       	ldi	r24, 0x0B	; 11
    24e2:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
    24e6:	11 c0       	rjmp	.+34     	; 0x250a <MCAL_TIM1_SetTimerCompareMode+0x5c4>
		break;

	case TIM1_PHASE_CORRECT_PWM_MODE_OC1B_INVERTED:
		SET_BIT(TCCR1A,5);	//COM1B1
    24e8:	af e4       	ldi	r26, 0x4F	; 79
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ef e4       	ldi	r30, 0x4F	; 79
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 62       	ori	r24, 0x20	; 32
    24f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,4);	//COM1B0
    24f6:	af e4       	ldi	r26, 0x4F	; 79
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	ef e4       	ldi	r30, 0x4F	; 79
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	80 61       	ori	r24, 0x10	; 16
    2502:	8c 93       	st	X, r24
		MCAL_TIM1_SetTimerModeOfOperation(TIM1_PWM_PHASE_CORRECT_MODE);
    2504:	8b e0       	ldi	r24, 0x0B	; 11
    2506:	0e 94 8b 12 	call	0x2516	; 0x2516 <MCAL_TIM1_SetTimerModeOfOperation>
		break;
	}
}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <MCAL_TIM1_SetTimerModeOfOperation>:


/* To select the TIM1 Waveform generation mode */
void MCAL_TIM1_SetTimerModeOfOperation(u8 Mode)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	00 d0       	rcall	.+0      	; 0x251c <MCAL_TIM1_SetTimerModeOfOperation+0x6>
    251c:	0f 92       	push	r0
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
    2522:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode)
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	3b 83       	std	Y+3, r19	; 0x03
    252c:	2a 83       	std	Y+2, r18	; 0x02
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	9b 81       	ldd	r25, Y+3	; 0x03
    2532:	87 30       	cpi	r24, 0x07	; 7
    2534:	91 05       	cpc	r25, r1
    2536:	09 f4       	brne	.+2      	; 0x253a <MCAL_TIM1_SetTimerModeOfOperation+0x24>
    2538:	24 c1       	rjmp	.+584    	; 0x2782 <MCAL_TIM1_SetTimerModeOfOperation+0x26c>
    253a:	2a 81       	ldd	r18, Y+2	; 0x02
    253c:	3b 81       	ldd	r19, Y+3	; 0x03
    253e:	28 30       	cpi	r18, 0x08	; 8
    2540:	31 05       	cpc	r19, r1
    2542:	4c f5       	brge	.+82     	; 0x2596 <MCAL_TIM1_SetTimerModeOfOperation+0x80>
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	83 30       	cpi	r24, 0x03	; 3
    254a:	91 05       	cpc	r25, r1
    254c:	09 f4       	brne	.+2      	; 0x2550 <MCAL_TIM1_SetTimerModeOfOperation+0x3a>
    254e:	a5 c0       	rjmp	.+330    	; 0x269a <MCAL_TIM1_SetTimerModeOfOperation+0x184>
    2550:	2a 81       	ldd	r18, Y+2	; 0x02
    2552:	3b 81       	ldd	r19, Y+3	; 0x03
    2554:	24 30       	cpi	r18, 0x04	; 4
    2556:	31 05       	cpc	r19, r1
    2558:	8c f4       	brge	.+34     	; 0x257c <MCAL_TIM1_SetTimerModeOfOperation+0x66>
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	9b 81       	ldd	r25, Y+3	; 0x03
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	91 05       	cpc	r25, r1
    2562:	09 f4       	brne	.+2      	; 0x2566 <MCAL_TIM1_SetTimerModeOfOperation+0x50>
    2564:	60 c0       	rjmp	.+192    	; 0x2626 <MCAL_TIM1_SetTimerModeOfOperation+0x110>
    2566:	2a 81       	ldd	r18, Y+2	; 0x02
    2568:	3b 81       	ldd	r19, Y+3	; 0x03
    256a:	22 30       	cpi	r18, 0x02	; 2
    256c:	31 05       	cpc	r19, r1
    256e:	0c f0       	brlt	.+2      	; 0x2572 <MCAL_TIM1_SetTimerModeOfOperation+0x5c>
    2570:	77 c0       	rjmp	.+238    	; 0x2660 <MCAL_TIM1_SetTimerModeOfOperation+0x14a>
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	c9 f1       	breq	.+114    	; 0x25ec <MCAL_TIM1_SetTimerModeOfOperation+0xd6>
    257a:	ea c1       	rjmp	.+980    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
    257c:	2a 81       	ldd	r18, Y+2	; 0x02
    257e:	3b 81       	ldd	r19, Y+3	; 0x03
    2580:	25 30       	cpi	r18, 0x05	; 5
    2582:	31 05       	cpc	r19, r1
    2584:	09 f4       	brne	.+2      	; 0x2588 <MCAL_TIM1_SetTimerModeOfOperation+0x72>
    2586:	c3 c0       	rjmp	.+390    	; 0x270e <MCAL_TIM1_SetTimerModeOfOperation+0x1f8>
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	9b 81       	ldd	r25, Y+3	; 0x03
    258c:	86 30       	cpi	r24, 0x06	; 6
    258e:	91 05       	cpc	r25, r1
    2590:	0c f0       	brlt	.+2      	; 0x2594 <MCAL_TIM1_SetTimerModeOfOperation+0x7e>
    2592:	da c0       	rjmp	.+436    	; 0x2748 <MCAL_TIM1_SetTimerModeOfOperation+0x232>
    2594:	9f c0       	rjmp	.+318    	; 0x26d4 <MCAL_TIM1_SetTimerModeOfOperation+0x1be>
    2596:	2a 81       	ldd	r18, Y+2	; 0x02
    2598:	3b 81       	ldd	r19, Y+3	; 0x03
    259a:	2b 30       	cpi	r18, 0x0B	; 11
    259c:	31 05       	cpc	r19, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <MCAL_TIM1_SetTimerModeOfOperation+0x8c>
    25a0:	64 c1       	rjmp	.+712    	; 0x286a <MCAL_TIM1_SetTimerModeOfOperation+0x354>
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	8c 30       	cpi	r24, 0x0C	; 12
    25a8:	91 05       	cpc	r25, r1
    25aa:	6c f4       	brge	.+26     	; 0x25c6 <MCAL_TIM1_SetTimerModeOfOperation+0xb0>
    25ac:	2a 81       	ldd	r18, Y+2	; 0x02
    25ae:	3b 81       	ldd	r19, Y+3	; 0x03
    25b0:	29 30       	cpi	r18, 0x09	; 9
    25b2:	31 05       	cpc	r19, r1
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <MCAL_TIM1_SetTimerModeOfOperation+0xa2>
    25b6:	1f c1       	rjmp	.+574    	; 0x27f6 <MCAL_TIM1_SetTimerModeOfOperation+0x2e0>
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	9b 81       	ldd	r25, Y+3	; 0x03
    25bc:	8a 30       	cpi	r24, 0x0A	; 10
    25be:	91 05       	cpc	r25, r1
    25c0:	0c f0       	brlt	.+2      	; 0x25c4 <MCAL_TIM1_SetTimerModeOfOperation+0xae>
    25c2:	36 c1       	rjmp	.+620    	; 0x2830 <MCAL_TIM1_SetTimerModeOfOperation+0x31a>
    25c4:	fb c0       	rjmp	.+502    	; 0x27bc <MCAL_TIM1_SetTimerModeOfOperation+0x2a6>
    25c6:	2a 81       	ldd	r18, Y+2	; 0x02
    25c8:	3b 81       	ldd	r19, Y+3	; 0x03
    25ca:	2d 30       	cpi	r18, 0x0D	; 13
    25cc:	31 05       	cpc	r19, r1
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <MCAL_TIM1_SetTimerModeOfOperation+0xbc>
    25d0:	86 c1       	rjmp	.+780    	; 0x28de <MCAL_TIM1_SetTimerModeOfOperation+0x3c8>
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	9b 81       	ldd	r25, Y+3	; 0x03
    25d6:	8d 30       	cpi	r24, 0x0D	; 13
    25d8:	91 05       	cpc	r25, r1
    25da:	0c f4       	brge	.+2      	; 0x25de <MCAL_TIM1_SetTimerModeOfOperation+0xc8>
    25dc:	63 c1       	rjmp	.+710    	; 0x28a4 <MCAL_TIM1_SetTimerModeOfOperation+0x38e>
    25de:	2a 81       	ldd	r18, Y+2	; 0x02
    25e0:	3b 81       	ldd	r19, Y+3	; 0x03
    25e2:	2e 30       	cpi	r18, 0x0E	; 14
    25e4:	31 05       	cpc	r19, r1
    25e6:	09 f4       	brne	.+2      	; 0x25ea <MCAL_TIM1_SetTimerModeOfOperation+0xd4>
    25e8:	97 c1       	rjmp	.+814    	; 0x2918 <MCAL_TIM1_SetTimerModeOfOperation+0x402>
    25ea:	b2 c1       	rjmp	.+868    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
	{
	case TIM1_NORMAL_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    25ec:	af e4       	ldi	r26, 0x4F	; 79
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ef e4       	ldi	r30, 0x4F	; 79
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8e 7f       	andi	r24, 0xFE	; 254
    25f8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    25fa:	af e4       	ldi	r26, 0x4F	; 79
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	ef e4       	ldi	r30, 0x4F	; 79
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8d 7f       	andi	r24, 0xFD	; 253
    2606:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2608:	ae e4       	ldi	r26, 0x4E	; 78
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	ee e4       	ldi	r30, 0x4E	; 78
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	87 7f       	andi	r24, 0xF7	; 247
    2614:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2616:	ae e4       	ldi	r26, 0x4E	; 78
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	ee e4       	ldi	r30, 0x4E	; 78
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	8f 7e       	andi	r24, 0xEF	; 239
    2622:	8c 93       	st	X, r24
    2624:	95 c1       	rjmp	.+810    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_8_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    2626:	af e4       	ldi	r26, 0x4F	; 79
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	ef e4       	ldi	r30, 0x4F	; 79
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	81 60       	ori	r24, 0x01	; 1
    2632:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2634:	af e4       	ldi	r26, 0x4F	; 79
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	ef e4       	ldi	r30, 0x4F	; 79
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	8d 7f       	andi	r24, 0xFD	; 253
    2640:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2642:	ae e4       	ldi	r26, 0x4E	; 78
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	ee e4       	ldi	r30, 0x4E	; 78
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	87 7f       	andi	r24, 0xF7	; 247
    264e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2650:	ae e4       	ldi	r26, 0x4E	; 78
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ee e4       	ldi	r30, 0x4E	; 78
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7e       	andi	r24, 0xEF	; 239
    265c:	8c 93       	st	X, r24
    265e:	78 c1       	rjmp	.+752    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_9_BIT_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    2660:	af e4       	ldi	r26, 0x4F	; 79
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	ef e4       	ldi	r30, 0x4F	; 79
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8e 7f       	andi	r24, 0xFE	; 254
    266c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    266e:	af e4       	ldi	r26, 0x4F	; 79
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ef e4       	ldi	r30, 0x4F	; 79
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	82 60       	ori	r24, 0x02	; 2
    267a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    267c:	ae e4       	ldi	r26, 0x4E	; 78
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	ee e4       	ldi	r30, 0x4E	; 78
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	87 7f       	andi	r24, 0xF7	; 247
    2688:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    268a:	ae e4       	ldi	r26, 0x4E	; 78
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	ee e4       	ldi	r30, 0x4E	; 78
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	8f 7e       	andi	r24, 0xEF	; 239
    2696:	8c 93       	st	X, r24
    2698:	5b c1       	rjmp	.+694    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_10_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    269a:	af e4       	ldi	r26, 0x4F	; 79
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	ef e4       	ldi	r30, 0x4F	; 79
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	81 60       	ori	r24, 0x01	; 1
    26a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    26a8:	af e4       	ldi	r26, 0x4F	; 79
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	ef e4       	ldi	r30, 0x4F	; 79
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	82 60       	ori	r24, 0x02	; 2
    26b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    26b6:	ae e4       	ldi	r26, 0x4E	; 78
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	ee e4       	ldi	r30, 0x4E	; 78
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	87 7f       	andi	r24, 0xF7	; 247
    26c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    26c4:	ae e4       	ldi	r26, 0x4E	; 78
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	ee e4       	ldi	r30, 0x4E	; 78
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	8f 7e       	andi	r24, 0xEF	; 239
    26d0:	8c 93       	st	X, r24
    26d2:	3e c1       	rjmp	.+636    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_CTC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    26d4:	af e4       	ldi	r26, 0x4F	; 79
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	ef e4       	ldi	r30, 0x4F	; 79
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	8e 7f       	andi	r24, 0xFE	; 254
    26e0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    26e2:	af e4       	ldi	r26, 0x4F	; 79
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	ef e4       	ldi	r30, 0x4F	; 79
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	8d 7f       	andi	r24, 0xFD	; 253
    26ee:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    26f0:	ae e4       	ldi	r26, 0x4E	; 78
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	ee e4       	ldi	r30, 0x4E	; 78
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	88 60       	ori	r24, 0x08	; 8
    26fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    26fe:	ae e4       	ldi	r26, 0x4E	; 78
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	ee e4       	ldi	r30, 0x4E	; 78
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	8f 7e       	andi	r24, 0xEF	; 239
    270a:	8c 93       	st	X, r24
    270c:	21 c1       	rjmp	.+578    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_8_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    270e:	af e4       	ldi	r26, 0x4F	; 79
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ef e4       	ldi	r30, 0x4F	; 79
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	81 60       	ori	r24, 0x01	; 1
    271a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    271c:	af e4       	ldi	r26, 0x4F	; 79
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ef e4       	ldi	r30, 0x4F	; 79
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	8d 7f       	andi	r24, 0xFD	; 253
    2728:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    272a:	ae e4       	ldi	r26, 0x4E	; 78
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	ee e4       	ldi	r30, 0x4E	; 78
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 60       	ori	r24, 0x08	; 8
    2736:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2738:	ae e4       	ldi	r26, 0x4E	; 78
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	ee e4       	ldi	r30, 0x4E	; 78
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	8f 7e       	andi	r24, 0xEF	; 239
    2744:	8c 93       	st	X, r24
    2746:	04 c1       	rjmp	.+520    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_9_BIT_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    2748:	af e4       	ldi	r26, 0x4F	; 79
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	ef e4       	ldi	r30, 0x4F	; 79
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8e 7f       	andi	r24, 0xFE	; 254
    2754:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    2756:	af e4       	ldi	r26, 0x4F	; 79
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	ef e4       	ldi	r30, 0x4F	; 79
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	82 60       	ori	r24, 0x02	; 2
    2762:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    2764:	ae e4       	ldi	r26, 0x4E	; 78
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	ee e4       	ldi	r30, 0x4E	; 78
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	88 60       	ori	r24, 0x08	; 8
    2770:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    2772:	ae e4       	ldi	r26, 0x4E	; 78
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ee e4       	ldi	r30, 0x4E	; 78
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	8f 7e       	andi	r24, 0xEF	; 239
    277e:	8c 93       	st	X, r24
    2780:	e7 c0       	rjmp	.+462    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_10_BIT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    2782:	af e4       	ldi	r26, 0x4F	; 79
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	ef e4       	ldi	r30, 0x4F	; 79
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	81 60       	ori	r24, 0x01	; 1
    278e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    2790:	af e4       	ldi	r26, 0x4F	; 79
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ef e4       	ldi	r30, 0x4F	; 79
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	82 60       	ori	r24, 0x02	; 2
    279c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    279e:	ae e4       	ldi	r26, 0x4E	; 78
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	ee e4       	ldi	r30, 0x4E	; 78
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	88 60       	ori	r24, 0x08	; 8
    27aa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,4);	//WGM13
    27ac:	ae e4       	ldi	r26, 0x4E	; 78
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ee e4       	ldi	r30, 0x4E	; 78
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8f 7e       	andi	r24, 0xEF	; 239
    27b8:	8c 93       	st	X, r24
    27ba:	ca c0       	rjmp	.+404    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_AND_FREQUENCY_CORRECT_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    27bc:	af e4       	ldi	r26, 0x4F	; 79
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e4       	ldi	r30, 0x4F	; 79
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8e 7f       	andi	r24, 0xFE	; 254
    27c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    27ca:	af e4       	ldi	r26, 0x4F	; 79
    27cc:	b0 e0       	ldi	r27, 0x00	; 0
    27ce:	ef e4       	ldi	r30, 0x4F	; 79
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	8d 7f       	andi	r24, 0xFD	; 253
    27d6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    27d8:	ae e4       	ldi	r26, 0x4E	; 78
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ee e4       	ldi	r30, 0x4E	; 78
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	87 7f       	andi	r24, 0xF7	; 247
    27e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    27e6:	ae e4       	ldi	r26, 0x4E	; 78
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	ee e4       	ldi	r30, 0x4E	; 78
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	80 61       	ori	r24, 0x10	; 16
    27f2:	8c 93       	st	X, r24
    27f4:	ad c0       	rjmp	.+346    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_AND_FREQUENCY_CORRECT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    27f6:	af e4       	ldi	r26, 0x4F	; 79
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ef e4       	ldi	r30, 0x4F	; 79
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	81 60       	ori	r24, 0x01	; 1
    2802:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    2804:	af e4       	ldi	r26, 0x4F	; 79
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	ef e4       	ldi	r30, 0x4F	; 79
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	8d 7f       	andi	r24, 0xFD	; 253
    2810:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2812:	ae e4       	ldi	r26, 0x4E	; 78
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	ee e4       	ldi	r30, 0x4E	; 78
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	87 7f       	andi	r24, 0xF7	; 247
    281e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    2820:	ae e4       	ldi	r26, 0x4E	; 78
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	ee e4       	ldi	r30, 0x4E	; 78
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	80 61       	ori	r24, 0x10	; 16
    282c:	8c 93       	st	X, r24
    282e:	90 c0       	rjmp	.+288    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    2830:	af e4       	ldi	r26, 0x4F	; 79
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	ef e4       	ldi	r30, 0x4F	; 79
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	8e 7f       	andi	r24, 0xFE	; 254
    283c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    283e:	af e4       	ldi	r26, 0x4F	; 79
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	ef e4       	ldi	r30, 0x4F	; 79
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	82 60       	ori	r24, 0x02	; 2
    284a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    284c:	ae e4       	ldi	r26, 0x4E	; 78
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	ee e4       	ldi	r30, 0x4E	; 78
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	87 7f       	andi	r24, 0xF7	; 247
    2858:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    285a:	ae e4       	ldi	r26, 0x4E	; 78
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	ee e4       	ldi	r30, 0x4E	; 78
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	80 61       	ori	r24, 0x10	; 16
    2866:	8c 93       	st	X, r24
    2868:	73 c0       	rjmp	.+230    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_PWM_PHASE_CORRECT_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    286a:	af e4       	ldi	r26, 0x4F	; 79
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	ef e4       	ldi	r30, 0x4F	; 79
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	81 60       	ori	r24, 0x01	; 1
    2876:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    2878:	af e4       	ldi	r26, 0x4F	; 79
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	ef e4       	ldi	r30, 0x4F	; 79
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	82 60       	ori	r24, 0x02	; 2
    2884:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,3);	//WGM12
    2886:	ae e4       	ldi	r26, 0x4E	; 78
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	ee e4       	ldi	r30, 0x4E	; 78
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	87 7f       	andi	r24, 0xF7	; 247
    2892:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    2894:	ae e4       	ldi	r26, 0x4E	; 78
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	ee e4       	ldi	r30, 0x4E	; 78
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	80 61       	ori	r24, 0x10	; 16
    28a0:	8c 93       	st	X, r24
    28a2:	56 c0       	rjmp	.+172    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_CTC_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    28a4:	af e4       	ldi	r26, 0x4F	; 79
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	ef e4       	ldi	r30, 0x4F	; 79
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8e 7f       	andi	r24, 0xFE	; 254
    28b0:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,1);	//WGM11
    28b2:	af e4       	ldi	r26, 0x4F	; 79
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	ef e4       	ldi	r30, 0x4F	; 79
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	8d 7f       	andi	r24, 0xFD	; 253
    28be:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    28c0:	ae e4       	ldi	r26, 0x4E	; 78
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ee e4       	ldi	r30, 0x4E	; 78
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	88 60       	ori	r24, 0x08	; 8
    28cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    28ce:	ae e4       	ldi	r26, 0x4E	; 78
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	ee e4       	ldi	r30, 0x4E	; 78
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	80 61       	ori	r24, 0x10	; 16
    28da:	8c 93       	st	X, r24
    28dc:	39 c0       	rjmp	.+114    	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_IC_MODE:
		CLR_BIT(TCCR1A,0);	//WGM10
    28de:	af e4       	ldi	r26, 0x4F	; 79
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	ef e4       	ldi	r30, 0x4F	; 79
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8e 7f       	andi	r24, 0xFE	; 254
    28ea:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    28ec:	af e4       	ldi	r26, 0x4F	; 79
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ef e4       	ldi	r30, 0x4F	; 79
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	82 60       	ori	r24, 0x02	; 2
    28f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    28fa:	ae e4       	ldi	r26, 0x4E	; 78
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	ee e4       	ldi	r30, 0x4E	; 78
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	88 60       	ori	r24, 0x08	; 8
    2906:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    2908:	ae e4       	ldi	r26, 0x4E	; 78
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ee e4       	ldi	r30, 0x4E	; 78
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	80 61       	ori	r24, 0x10	; 16
    2914:	8c 93       	st	X, r24
    2916:	1c c0       	rjmp	.+56     	; 0x2950 <MCAL_TIM1_SetTimerModeOfOperation+0x43a>
		break;

	case TIM1_FAST_PWM_MODE:
		SET_BIT(TCCR1A,0);	//WGM10
    2918:	af e4       	ldi	r26, 0x4F	; 79
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ef e4       	ldi	r30, 0x4F	; 79
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	81 60       	ori	r24, 0x01	; 1
    2924:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);	//WGM11
    2926:	af e4       	ldi	r26, 0x4F	; 79
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	ef e4       	ldi	r30, 0x4F	; 79
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	82 60       	ori	r24, 0x02	; 2
    2932:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);	//WGM12
    2934:	ae e4       	ldi	r26, 0x4E	; 78
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ee e4       	ldi	r30, 0x4E	; 78
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	88 60       	ori	r24, 0x08	; 8
    2940:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);	//WGM13
    2942:	ae e4       	ldi	r26, 0x4E	; 78
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ee e4       	ldi	r30, 0x4E	; 78
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	80 61       	ori	r24, 0x10	; 16
    294e:	8c 93       	st	X, r24
		break;
	}
}
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <MCAL_TIM1_ClearTimer>:


/* To clear the timer 1 */
void MCAL_TIM1_ClearTimer()
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2964:	ec e4       	ldi	r30, 0x4C	; 76
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	11 82       	std	Z+1, r1	; 0x01
    296a:	10 82       	st	Z, r1
}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <MCAL_TIM1_GetElapsedTime>:


/* To get the elapsed time since the timer started from BOTTOM (0x0000) */
u16 MCAL_TIM1_GetElapsedTime(void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    297a:	ec e4       	ldi	r30, 0x4C	; 76
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
}
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <MCAL_TIM1_GetRemainingTime>:


/* To get the remaining time to reach the TOP value */
u16 MCAL_TIM1_GetRemainingTime(u16 TOP)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <MCAL_TIM1_GetRemainingTime+0x6>
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
	return (TOP - TCNT1);
    2996:	ec e4       	ldi	r30, 0x4C	; 76
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	20 81       	ld	r18, Z
    299c:	31 81       	ldd	r19, Z+1	; 0x01
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	82 1b       	sub	r24, r18
    29a4:	93 0b       	sbc	r25, r19
}
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <MCAL_TIM1_SetCompareValue>:


/* To set the compare value/threshold */
void MCAL_TIM1_SetCompareValue(u8 OC1x, u16 TOP)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <MCAL_TIM1_SetCompareValue+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	7b 83       	std	Y+3, r23	; 0x03
    29c0:	6a 83       	std	Y+2, r22	; 0x02
	if(OC1x == OC1A)
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	81 30       	cpi	r24, 0x01	; 1
    29c6:	39 f4       	brne	.+14     	; 0x29d6 <MCAL_TIM1_SetCompareValue+0x26>
	{
		OCR1A = TOP;
    29c8:	ea e4       	ldi	r30, 0x4A	; 74
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	09 c0       	rjmp	.+18     	; 0x29e8 <MCAL_TIM1_SetCompareValue+0x38>
	}
	else if(OC1x == OC1B)
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	82 30       	cpi	r24, 0x02	; 2
    29da:	31 f4       	brne	.+12     	; 0x29e8 <MCAL_TIM1_SetCompareValue+0x38>
	{
		OCR1B = TOP;
    29dc:	e8 e4       	ldi	r30, 0x48	; 72
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	9b 81       	ldd	r25, Y+3	; 0x03
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
	}
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <MCAL_TIM1_EnableOVFInterrupt>:


/* To enable the timer 1 interrupt on overflow */
void MCAL_TIM1_EnableOVFInterrupt(void(*CallbackFunction)(void))
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <MCAL_TIM1_EnableOVFInterrupt+0x6>
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,2);
    2a02:	a9 e5       	ldi	r26, 0x59	; 89
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e9 e5       	ldi	r30, 0x59	; 89
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	84 60       	ori	r24, 0x04	; 4
    2a0e:	8c 93       	st	X, r24
	TIM1_OVF_ISR = CallbackFunction;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	90 93 71 00 	sts	0x0071, r25
    2a18:	80 93 70 00 	sts	0x0070, r24
}
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <MCAL_TIM1_EnableCAPTInterrupt>:


/* To enable the timer 1 interrupt on input capture */
void MCAL_TIM1_EnableCAPTInterrupt(void(*CallbackFunction)(void))
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <MCAL_TIM1_EnableCAPTInterrupt+0x6>
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TIMSK,5);
    2a34:	a9 e5       	ldi	r26, 0x59	; 89
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e9 e5       	ldi	r30, 0x59	; 89
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 62       	ori	r24, 0x20	; 32
    2a40:	8c 93       	st	X, r24
	TIM1_CAPT_ISR = CallbackFunction;
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	90 93 75 00 	sts	0x0075, r25
    2a4a:	80 93 74 00 	sts	0x0074, r24
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <MCAL_TIM1_EnableCOMPInterrupt>:


/* To enable the timer 1 interrupt on compare match */
void MCAL_TIM1_EnableCOMPInterrupt(u8 OC1x, void(*CallbackFunction)(void))
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	00 d0       	rcall	.+0      	; 0x2a5e <MCAL_TIM1_EnableCOMPInterrupt+0x6>
    2a5e:	0f 92       	push	r0
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	7b 83       	std	Y+3, r23	; 0x03
    2a68:	6a 83       	std	Y+2, r22	; 0x02
	if(OC1x == OC1A)
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	71 f4       	brne	.+28     	; 0x2a8c <MCAL_TIM1_EnableCOMPInterrupt+0x34>
	{
		SET_BIT(TIMSK,4);
    2a70:	a9 e5       	ldi	r26, 0x59	; 89
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e9 e5       	ldi	r30, 0x59	; 89
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 61       	ori	r24, 0x10	; 16
    2a7c:	8c 93       	st	X, r24
		TIM1_COMPA_ISR = CallbackFunction;
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	90 93 73 00 	sts	0x0073, r25
    2a86:	80 93 72 00 	sts	0x0072, r24
    2a8a:	10 c0       	rjmp	.+32     	; 0x2aac <MCAL_TIM1_EnableCOMPInterrupt+0x54>
	}
	else if(OC1x == OC1B)
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	69 f4       	brne	.+26     	; 0x2aac <MCAL_TIM1_EnableCOMPInterrupt+0x54>
	{
		SET_BIT(TIMSK,3);
    2a92:	a9 e5       	ldi	r26, 0x59	; 89
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e9 e5       	ldi	r30, 0x59	; 89
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 60       	ori	r24, 0x08	; 8
    2a9e:	8c 93       	st	X, r24
		TIM1_COMPB_ISR = CallbackFunction;
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	90 93 6f 00 	sts	0x006F, r25
    2aa8:	80 93 6e 00 	sts	0x006E, r24
	}
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <MCAL_TIM1_DisableCAPTInterrupt>:


/* To disable the timer 1 interrupt on input capture */
void MCAL_TIM1_DisableCAPTInterrupt()
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,5);
    2ac0:	a9 e5       	ldi	r26, 0x59	; 89
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e9 e5       	ldi	r30, 0x59	; 89
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	8f 7d       	andi	r24, 0xDF	; 223
    2acc:	8c 93       	st	X, r24
	TIM1_CAPT_ISR = NULL;
    2ace:	10 92 75 00 	sts	0x0075, r1
    2ad2:	10 92 74 00 	sts	0x0074, r1
}
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <MCAL_TIM1_DisableOVFInterrupt>:


/* To disable the timer interrupt on overflow */
void MCAL_TIM1_DisableOVFInterrupt()
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,2);
    2ae4:	a9 e5       	ldi	r26, 0x59	; 89
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e9 e5       	ldi	r30, 0x59	; 89
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	8b 7f       	andi	r24, 0xFB	; 251
    2af0:	8c 93       	st	X, r24
	TIM1_OVF_ISR = NULL;
    2af2:	10 92 71 00 	sts	0x0071, r1
    2af6:	10 92 70 00 	sts	0x0070, r1
}
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <MCAL_TIM1_DisableCOMPInterrupt>:


/* To disable the timer interrupt on compare match */
void MCAL_TIM1_DisableCOMPInterrupt(u8 OC1x)
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	0f 92       	push	r0
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	89 83       	std	Y+1, r24	; 0x01
	if(OC1x == OC1A)
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	81 30       	cpi	r24, 0x01	; 1
    2b10:	61 f4       	brne	.+24     	; 0x2b2a <MCAL_TIM1_DisableCOMPInterrupt+0x2a>
	{
		CLR_BIT(TIMSK,4);
    2b12:	a9 e5       	ldi	r26, 0x59	; 89
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e9 e5       	ldi	r30, 0x59	; 89
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8f 7e       	andi	r24, 0xEF	; 239
    2b1e:	8c 93       	st	X, r24
		TIM1_COMPA_ISR = NULL;
    2b20:	10 92 73 00 	sts	0x0073, r1
    2b24:	10 92 72 00 	sts	0x0072, r1
    2b28:	0e c0       	rjmp	.+28     	; 0x2b46 <MCAL_TIM1_DisableCOMPInterrupt+0x46>
	}
	else if(OC1x == OC1B)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	82 30       	cpi	r24, 0x02	; 2
    2b2e:	59 f4       	brne	.+22     	; 0x2b46 <MCAL_TIM1_DisableCOMPInterrupt+0x46>
	{
		CLR_BIT(TIMSK,3);
    2b30:	a9 e5       	ldi	r26, 0x59	; 89
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	e9 e5       	ldi	r30, 0x59	; 89
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	87 7f       	andi	r24, 0xF7	; 247
    2b3c:	8c 93       	st	X, r24
		TIM1_COMPB_ISR = NULL;
    2b3e:	10 92 6f 00 	sts	0x006F, r1
    2b42:	10 92 6e 00 	sts	0x006E, r1
	}

}
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <__vector_6>:


void __vector_6(void) __attribute__((signal, used));
void __vector_6(void)		// TIMER1 CAPT
{
    2b4e:	1f 92       	push	r1
    2b50:	0f 92       	push	r0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
    2b58:	2f 93       	push	r18
    2b5a:	3f 93       	push	r19
    2b5c:	4f 93       	push	r20
    2b5e:	5f 93       	push	r21
    2b60:	6f 93       	push	r22
    2b62:	7f 93       	push	r23
    2b64:	8f 93       	push	r24
    2b66:	9f 93       	push	r25
    2b68:	af 93       	push	r26
    2b6a:	bf 93       	push	r27
    2b6c:	ef 93       	push	r30
    2b6e:	ff 93       	push	r31
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
	TIM1_CAPT_ISR();
    2b78:	e0 91 74 00 	lds	r30, 0x0074
    2b7c:	f0 91 75 00 	lds	r31, 0x0075
    2b80:	09 95       	icall
}
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	ff 91       	pop	r31
    2b88:	ef 91       	pop	r30
    2b8a:	bf 91       	pop	r27
    2b8c:	af 91       	pop	r26
    2b8e:	9f 91       	pop	r25
    2b90:	8f 91       	pop	r24
    2b92:	7f 91       	pop	r23
    2b94:	6f 91       	pop	r22
    2b96:	5f 91       	pop	r21
    2b98:	4f 91       	pop	r20
    2b9a:	3f 91       	pop	r19
    2b9c:	2f 91       	pop	r18
    2b9e:	0f 90       	pop	r0
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	0f 90       	pop	r0
    2ba4:	1f 90       	pop	r1
    2ba6:	18 95       	reti

00002ba8 <__vector_7>:


void __vector_7(void) __attribute__((signal, used));
void __vector_7(void)		// TIMER1 COMPA
{
    2ba8:	1f 92       	push	r1
    2baa:	0f 92       	push	r0
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	0f 92       	push	r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	2f 93       	push	r18
    2bb4:	3f 93       	push	r19
    2bb6:	4f 93       	push	r20
    2bb8:	5f 93       	push	r21
    2bba:	6f 93       	push	r22
    2bbc:	7f 93       	push	r23
    2bbe:	8f 93       	push	r24
    2bc0:	9f 93       	push	r25
    2bc2:	af 93       	push	r26
    2bc4:	bf 93       	push	r27
    2bc6:	ef 93       	push	r30
    2bc8:	ff 93       	push	r31
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
	TIM1_COMPA_ISR();
    2bd2:	e0 91 72 00 	lds	r30, 0x0072
    2bd6:	f0 91 73 00 	lds	r31, 0x0073
    2bda:	09 95       	icall
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	bf 91       	pop	r27
    2be6:	af 91       	pop	r26
    2be8:	9f 91       	pop	r25
    2bea:	8f 91       	pop	r24
    2bec:	7f 91       	pop	r23
    2bee:	6f 91       	pop	r22
    2bf0:	5f 91       	pop	r21
    2bf2:	4f 91       	pop	r20
    2bf4:	3f 91       	pop	r19
    2bf6:	2f 91       	pop	r18
    2bf8:	0f 90       	pop	r0
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	0f 90       	pop	r0
    2bfe:	1f 90       	pop	r1
    2c00:	18 95       	reti

00002c02 <__vector_8>:


void __vector_8(void) __attribute__((signal, used));
void __vector_8(void)		// TIMER1 COMPB
{
    2c02:	1f 92       	push	r1
    2c04:	0f 92       	push	r0
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	0f 92       	push	r0
    2c0a:	11 24       	eor	r1, r1
    2c0c:	2f 93       	push	r18
    2c0e:	3f 93       	push	r19
    2c10:	4f 93       	push	r20
    2c12:	5f 93       	push	r21
    2c14:	6f 93       	push	r22
    2c16:	7f 93       	push	r23
    2c18:	8f 93       	push	r24
    2c1a:	9f 93       	push	r25
    2c1c:	af 93       	push	r26
    2c1e:	bf 93       	push	r27
    2c20:	ef 93       	push	r30
    2c22:	ff 93       	push	r31
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
	TIM1_COMPB_ISR();
    2c2c:	e0 91 6e 00 	lds	r30, 0x006E
    2c30:	f0 91 6f 00 	lds	r31, 0x006F
    2c34:	09 95       	icall
}
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	ff 91       	pop	r31
    2c3c:	ef 91       	pop	r30
    2c3e:	bf 91       	pop	r27
    2c40:	af 91       	pop	r26
    2c42:	9f 91       	pop	r25
    2c44:	8f 91       	pop	r24
    2c46:	7f 91       	pop	r23
    2c48:	6f 91       	pop	r22
    2c4a:	5f 91       	pop	r21
    2c4c:	4f 91       	pop	r20
    2c4e:	3f 91       	pop	r19
    2c50:	2f 91       	pop	r18
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <__vector_9>:


void __vector_9(void) __attribute__((signal, used));
void __vector_9(void)		// TIMER1 OVF
{
    2c5c:	1f 92       	push	r1
    2c5e:	0f 92       	push	r0
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	0f 92       	push	r0
    2c64:	11 24       	eor	r1, r1
    2c66:	2f 93       	push	r18
    2c68:	3f 93       	push	r19
    2c6a:	4f 93       	push	r20
    2c6c:	5f 93       	push	r21
    2c6e:	6f 93       	push	r22
    2c70:	7f 93       	push	r23
    2c72:	8f 93       	push	r24
    2c74:	9f 93       	push	r25
    2c76:	af 93       	push	r26
    2c78:	bf 93       	push	r27
    2c7a:	ef 93       	push	r30
    2c7c:	ff 93       	push	r31
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	TIM1_OVF_ISR();
    2c86:	e0 91 70 00 	lds	r30, 0x0070
    2c8a:	f0 91 71 00 	lds	r31, 0x0071
    2c8e:	09 95       	icall
}
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	ff 91       	pop	r31
    2c96:	ef 91       	pop	r30
    2c98:	bf 91       	pop	r27
    2c9a:	af 91       	pop	r26
    2c9c:	9f 91       	pop	r25
    2c9e:	8f 91       	pop	r24
    2ca0:	7f 91       	pop	r23
    2ca2:	6f 91       	pop	r22
    2ca4:	5f 91       	pop	r21
    2ca6:	4f 91       	pop	r20
    2ca8:	3f 91       	pop	r19
    2caa:	2f 91       	pop	r18
    2cac:	0f 90       	pop	r0
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	0f 90       	pop	r0
    2cb2:	1f 90       	pop	r1
    2cb4:	18 95       	reti

00002cb6 <main>:
/** ========================================================================= */



int main(void)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <main+0x6>
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <main+0x8>
    2cbe:	cd b7       	in	r28, 0x3d	; 61
    2cc0:	de b7       	in	r29, 0x3e	; 62
	/* System Initialization */
	InitializeSystem();
    2cc2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <InitializeSystem>


	while(1)
	{

		Instruction = MCAL_SPI_SlaveReceive();
    2cc6:	0e 94 01 0c 	call	0x1802	; 0x1802 <MCAL_SPI_SlaveReceive>
    2cca:	80 93 7d 00 	sts	0x007D, r24

		switch(Instruction)
    2cce:	80 91 7d 00 	lds	r24, 0x007D
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	3c 83       	std	Y+4, r19	; 0x04
    2cd8:	2b 83       	std	Y+3, r18	; 0x03
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	8d 34       	cpi	r24, 0x4D	; 77
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	b9 f0       	breq	.+46     	; 0x2d12 <main+0x5c>
    2ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce8:	2e 34       	cpi	r18, 0x4E	; 78
    2cea:	31 05       	cpc	r19, r1
    2cec:	34 f4       	brge	.+12     	; 0x2cfa <main+0x44>
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	84 34       	cpi	r24, 0x44	; 68
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	71 f1       	breq	.+92     	; 0x2d54 <main+0x9e>
    2cf8:	e6 cf       	rjmp	.-52     	; 0x2cc6 <main+0x10>
    2cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cfe:	23 35       	cpi	r18, 0x53	; 83
    2d00:	31 05       	cpc	r19, r1
    2d02:	21 f1       	breq	.+72     	; 0x2d4c <main+0x96>
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	9c 81       	ldd	r25, Y+4	; 0x04
    2d08:	84 35       	cpi	r24, 0x54	; 84
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <main+0x5a>
    2d0e:	61 c0       	rjmp	.+194    	; 0x2dd2 <main+0x11c>
    2d10:	da cf       	rjmp	.-76     	; 0x2cc6 <main+0x10>
		{
			case 'M':    // Move the motors
				MotorDirection = MCAL_SPI_SlaveReceive();
    2d12:	0e 94 01 0c 	call	0x1802	; 0x1802 <MCAL_SPI_SlaveReceive>
    2d16:	80 93 7f 00 	sts	0x007F, r24

				if(MotorDirection == 'L' || MotorDirection == 'F')
    2d1a:	80 91 7f 00 	lds	r24, 0x007F
    2d1e:	8c 34       	cpi	r24, 0x4C	; 76
    2d20:	21 f0       	breq	.+8      	; 0x2d2a <main+0x74>
    2d22:	80 91 7f 00 	lds	r24, 0x007F
    2d26:	86 34       	cpi	r24, 0x46	; 70
    2d28:	49 f4       	brne	.+18     	; 0x2d3c <main+0x86>
				{
					Speed = MCAL_SPI_SlaveReceive();
    2d2a:	0e 94 01 0c 	call	0x1802	; 0x1802 <MCAL_SPI_SlaveReceive>
    2d2e:	80 93 76 00 	sts	0x0076, r24
					MCAL_TIM0_SetCompareValue(Speed);
    2d32:	80 91 76 00 	lds	r24, 0x0076
    2d36:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <MCAL_TIM0_SetCompareValue>
    2d3a:	c5 cf       	rjmp	.-118    	; 0x2cc6 <main+0x10>
				}


				else if(MotorDirection == 'R')
    2d3c:	80 91 7f 00 	lds	r24, 0x007F
    2d40:	82 35       	cpi	r24, 0x52	; 82
    2d42:	09 f6       	brne	.-126    	; 0x2cc6 <main+0x10>
				{
					MCAL_TIM0_SetCompareValue(0);
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <MCAL_TIM0_SetCompareValue>
    2d4a:	bd cf       	rjmp	.-134    	; 0x2cc6 <main+0x10>
				}
				break;


			case 'S':    // Stop the motors
				MCAL_TIM0_SetCompareValue(0);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <MCAL_TIM0_SetCompareValue>
    2d52:	b9 cf       	rjmp	.-142    	; 0x2cc6 <main+0x10>
				break;


			case 'D':    // Door options
				Door = MCAL_SPI_SlaveReceive();
    2d54:	0e 94 01 0c 	call	0x1802	; 0x1802 <MCAL_SPI_SlaveReceive>
    2d58:	80 93 7c 00 	sts	0x007C, r24

				if(Door == 'A')
    2d5c:	80 91 7c 00 	lds	r24, 0x007C
    2d60:	81 34       	cpi	r24, 0x41	; 65
    2d62:	c9 f4       	brne	.+50     	; 0x2d96 <main+0xe0>
				{
					C_State = MCAL_SPI_SlaveReceive();
    2d64:	0e 94 01 0c 	call	0x1802	; 0x1802 <MCAL_SPI_SlaveReceive>
    2d68:	80 93 77 00 	sts	0x0077, r24

					if(C_State == '0')
    2d6c:	80 91 77 00 	lds	r24, 0x0077
    2d70:	80 33       	cpi	r24, 0x30	; 48
    2d72:	31 f4       	brne	.+12     	; 0x2d80 <main+0xca>
					{
						MCAL_TIM1_SetCompareValue(OC1A, 0);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
    2d7e:	a3 cf       	rjmp	.-186    	; 0x2cc6 <main+0x10>
					}

					else if(C_State == '1')
    2d80:	80 91 77 00 	lds	r24, 0x0077
    2d84:	81 33       	cpi	r24, 0x31	; 49
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <main+0xd4>
    2d88:	9e cf       	rjmp	.-196    	; 0x2cc6 <main+0x10>
					{
						MCAL_TIM1_SetCompareValue(OC1A, 3000);
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	68 eb       	ldi	r22, 0xB8	; 184
    2d8e:	7b e0       	ldi	r23, 0x0B	; 11
    2d90:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
    2d94:	98 cf       	rjmp	.-208    	; 0x2cc6 <main+0x10>
					}
				}

				else if(Door == 'B')
    2d96:	80 91 7c 00 	lds	r24, 0x007C
    2d9a:	82 34       	cpi	r24, 0x42	; 66
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <main+0xea>
    2d9e:	93 cf       	rjmp	.-218    	; 0x2cc6 <main+0x10>
				{
					D_State = MCAL_SPI_SlaveReceive();
    2da0:	0e 94 01 0c 	call	0x1802	; 0x1802 <MCAL_SPI_SlaveReceive>
    2da4:	80 93 79 00 	sts	0x0079, r24

					if(D_State == '0')
    2da8:	80 91 79 00 	lds	r24, 0x0079
    2dac:	80 33       	cpi	r24, 0x30	; 48
    2dae:	31 f4       	brne	.+12     	; 0x2dbc <main+0x106>
					{
						MCAL_TIM1_SetCompareValue(OC1B, 0);
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
    2dba:	85 cf       	rjmp	.-246    	; 0x2cc6 <main+0x10>
					}

					else if(D_State == '1')
    2dbc:	80 91 79 00 	lds	r24, 0x0079
    2dc0:	81 33       	cpi	r24, 0x31	; 49
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <main+0x110>
    2dc4:	80 cf       	rjmp	.-256    	; 0x2cc6 <main+0x10>
					{
						MCAL_TIM1_SetCompareValue(OC1B, 3000);
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	68 eb       	ldi	r22, 0xB8	; 184
    2dca:	7b e0       	ldi	r23, 0x0B	; 11
    2dcc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <MCAL_TIM1_SetCompareValue>
    2dd0:	7a cf       	rjmp	.-268    	; 0x2cc6 <main+0x10>
				}
				break;


			case 'T':
				MCAL_ADC_StartConversion_PollingMode();
    2dd2:	0e 94 e5 05 	call	0xbca	; 0xbca <MCAL_ADC_StartConversion_PollingMode>
				u16 Temp = MCAL_ADC_ReadConversionResult();
    2dd6:	0e 94 36 06 	call	0xc6c	; 0xc6c <MCAL_ADC_ReadConversionResult>
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
				Temp = (((u32)Temp * 5000) / 1024);
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	cc 01       	movw	r24, r24
    2de4:	a0 e0       	ldi	r26, 0x00	; 0
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	28 e8       	ldi	r18, 0x88	; 136
    2dea:	33 e1       	ldi	r19, 0x13	; 19
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__mulsi3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	07 2e       	mov	r0, r23
    2dfe:	7a e0       	ldi	r23, 0x0A	; 10
    2e00:	b6 95       	lsr	r27
    2e02:	a7 95       	ror	r26
    2e04:	97 95       	ror	r25
    2e06:	87 95       	ror	r24
    2e08:	7a 95       	dec	r23
    2e0a:	d1 f7       	brne	.-12     	; 0x2e00 <main+0x14a>
    2e0c:	70 2d       	mov	r23, r0
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
				Temp = Temp / 10;
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	2a e0       	ldi	r18, 0x0A	; 10
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	b9 01       	movw	r22, r18
    2e1c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__udivmodhi4>
    2e20:	cb 01       	movw	r24, r22
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
				MCAL_SPI_MasterTransmit((u8)Temp);
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	0e 94 ed 0b 	call	0x17da	; 0x17da <MCAL_SPI_MasterTransmit>
    2e2c:	4c cf       	rjmp	.-360    	; 0x2cc6 <main+0x10>

00002e2e <InitializeSystem>:



/* This function contains all the initialization required for the system. */
void InitializeSystem(void)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
	MCAL_SPI_SlaveInit();
    2e36:	0e 94 cd 0b 	call	0x179a	; 0x179a <MCAL_SPI_SlaveInit>
	MCAL_TIM0_SetTimerCompareMode(TIM0_PHASE_CORRECT_PWM_MODE_NON_INVERTED);
    2e3a:	8c e0       	ldi	r24, 0x0C	; 12
    2e3c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <MCAL_TIM0_SetTimerCompareMode>
	MCAL_DIO_voidSetPinMode(OC0_PIN, Output);
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	63 e0       	ldi	r22, 0x03	; 3
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 74 06 	call	0xce8	; 0xce8 <MCAL_DIO_voidSetPinMode>
	MCAL_TIM0_SetCompareValue(0);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <MCAL_TIM0_SetCompareValue>
	MCAL_TIM0_StartTimer();
    2e50:	0e 94 11 0c 	call	0x1822	; 0x1822 <MCAL_TIM0_StartTimer>
	MCAL_ADC_Init();
    2e54:	0e 94 a3 05 	call	0xb46	; 0xb46 <MCAL_ADC_Init>
	MCAL_ADC_SelectChannel(ADC0);
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	0e 94 d1 05 	call	0xba2	; 0xba2 <MCAL_ADC_SelectChannel>
	HAL_SERVO_Init();
    2e5e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <HAL_SERVO_Init>
}
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <__mulsi3>:
    2e68:	62 9f       	mul	r22, r18
    2e6a:	d0 01       	movw	r26, r0
    2e6c:	73 9f       	mul	r23, r19
    2e6e:	f0 01       	movw	r30, r0
    2e70:	82 9f       	mul	r24, r18
    2e72:	e0 0d       	add	r30, r0
    2e74:	f1 1d       	adc	r31, r1
    2e76:	64 9f       	mul	r22, r20
    2e78:	e0 0d       	add	r30, r0
    2e7a:	f1 1d       	adc	r31, r1
    2e7c:	92 9f       	mul	r25, r18
    2e7e:	f0 0d       	add	r31, r0
    2e80:	83 9f       	mul	r24, r19
    2e82:	f0 0d       	add	r31, r0
    2e84:	74 9f       	mul	r23, r20
    2e86:	f0 0d       	add	r31, r0
    2e88:	65 9f       	mul	r22, r21
    2e8a:	f0 0d       	add	r31, r0
    2e8c:	99 27       	eor	r25, r25
    2e8e:	72 9f       	mul	r23, r18
    2e90:	b0 0d       	add	r27, r0
    2e92:	e1 1d       	adc	r30, r1
    2e94:	f9 1f       	adc	r31, r25
    2e96:	63 9f       	mul	r22, r19
    2e98:	b0 0d       	add	r27, r0
    2e9a:	e1 1d       	adc	r30, r1
    2e9c:	f9 1f       	adc	r31, r25
    2e9e:	bd 01       	movw	r22, r26
    2ea0:	cf 01       	movw	r24, r30
    2ea2:	11 24       	eor	r1, r1
    2ea4:	08 95       	ret

00002ea6 <__udivmodhi4>:
    2ea6:	aa 1b       	sub	r26, r26
    2ea8:	bb 1b       	sub	r27, r27
    2eaa:	51 e1       	ldi	r21, 0x11	; 17
    2eac:	07 c0       	rjmp	.+14     	; 0x2ebc <__udivmodhi4_ep>

00002eae <__udivmodhi4_loop>:
    2eae:	aa 1f       	adc	r26, r26
    2eb0:	bb 1f       	adc	r27, r27
    2eb2:	a6 17       	cp	r26, r22
    2eb4:	b7 07       	cpc	r27, r23
    2eb6:	10 f0       	brcs	.+4      	; 0x2ebc <__udivmodhi4_ep>
    2eb8:	a6 1b       	sub	r26, r22
    2eba:	b7 0b       	sbc	r27, r23

00002ebc <__udivmodhi4_ep>:
    2ebc:	88 1f       	adc	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	5a 95       	dec	r21
    2ec2:	a9 f7       	brne	.-22     	; 0x2eae <__udivmodhi4_loop>
    2ec4:	80 95       	com	r24
    2ec6:	90 95       	com	r25
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	08 95       	ret

00002ece <__prologue_saves__>:
    2ece:	2f 92       	push	r2
    2ed0:	3f 92       	push	r3
    2ed2:	4f 92       	push	r4
    2ed4:	5f 92       	push	r5
    2ed6:	6f 92       	push	r6
    2ed8:	7f 92       	push	r7
    2eda:	8f 92       	push	r8
    2edc:	9f 92       	push	r9
    2ede:	af 92       	push	r10
    2ee0:	bf 92       	push	r11
    2ee2:	cf 92       	push	r12
    2ee4:	df 92       	push	r13
    2ee6:	ef 92       	push	r14
    2ee8:	ff 92       	push	r15
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	ca 1b       	sub	r28, r26
    2ef8:	db 0b       	sbc	r29, r27
    2efa:	0f b6       	in	r0, 0x3f	; 63
    2efc:	f8 94       	cli
    2efe:	de bf       	out	0x3e, r29	; 62
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	cd bf       	out	0x3d, r28	; 61
    2f04:	09 94       	ijmp

00002f06 <__epilogue_restores__>:
    2f06:	2a 88       	ldd	r2, Y+18	; 0x12
    2f08:	39 88       	ldd	r3, Y+17	; 0x11
    2f0a:	48 88       	ldd	r4, Y+16	; 0x10
    2f0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f18:	b9 84       	ldd	r11, Y+9	; 0x09
    2f1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f1c:	df 80       	ldd	r13, Y+7	; 0x07
    2f1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f20:	fd 80       	ldd	r15, Y+5	; 0x05
    2f22:	0c 81       	ldd	r16, Y+4	; 0x04
    2f24:	1b 81       	ldd	r17, Y+3	; 0x03
    2f26:	aa 81       	ldd	r26, Y+2	; 0x02
    2f28:	b9 81       	ldd	r27, Y+1	; 0x01
    2f2a:	ce 0f       	add	r28, r30
    2f2c:	d1 1d       	adc	r29, r1
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	ed 01       	movw	r28, r26
    2f3a:	08 95       	ret

00002f3c <_exit>:
    2f3c:	f8 94       	cli

00002f3e <__stop_program>:
    2f3e:	ff cf       	rjmp	.-2      	; 0x2f3e <__stop_program>
