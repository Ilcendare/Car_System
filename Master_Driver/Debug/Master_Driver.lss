
Master_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000270  00800060  00003c52  00003ce6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008002d0  008002d0  00003f56  2**0
                  ALLOC
  3 .stab         00002ff4  00000000  00000000  00003f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000149d  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000083e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008549  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000086d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a71d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c920  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__vector_13>
      38:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__vector_14>
      3c:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <main>
      8a:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ef       	ldi	r26, 0xF0	; 240
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 ef       	ldi	r24, 0xF0	; 240
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ef       	ldi	r22, 0xF0	; 240
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MCAL_DIO_voidSetPinMode>:
/** ======================= TWI Functions Implementation ==================== */
/*
 * To set the pin mode: DDRx = (0) -> Input | (1) -> Output
 */
void MCAL_DIO_voidSetPinMode(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_u8PINn, DIOMode_t Copy_DIOMode_tMode)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <MCAL_DIO_voidSetPinMode+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <MCAL_DIO_voidSetPinMode+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_DIOPort_tDIOx < 4)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	08 f0       	brcs	.+2      	; 0xcba <MCAL_DIO_voidSetPinMode+0x1c>
     cb8:	81 c1       	rjmp	.+770    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
    {
	if(Copy_u8PINn < 8)
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <MCAL_DIO_voidSetPinMode+0x24>
     cc0:	7d c1       	rjmp	.+762    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
	{
	    switch(Copy_DIOPort_tDIOx)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3d 83       	std	Y+5, r19	; 0x05
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <MCAL_DIO_voidSetPinMode+0x3a>
     cd6:	6e c0       	rjmp	.+220    	; 0xdb4 <MCAL_DIO_voidSetPinMode+0x116>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <MCAL_DIO_voidSetPinMode+0x4e>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <MCAL_DIO_voidSetPinMode+0x68>
     cea:	68 c1       	rjmp	.+720    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <MCAL_DIO_voidSetPinMode+0x5a>
     cf6:	b5 c0       	rjmp	.+362    	; 0xe62 <MCAL_DIO_voidSetPinMode+0x1c4>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <MCAL_DIO_voidSetPinMode+0x66>
     d02:	06 c1       	rjmp	.+524    	; 0xf10 <MCAL_DIO_voidSetPinMode+0x272>
     d04:	5b c1       	rjmp	.+694    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
	    {
		case DIOA:			/* PORTA */
		    if(Copy_DIOMode_tMode)
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	88 23       	and	r24, r24
     d0a:	a1 f0       	breq	.+40     	; 0xd34 <MCAL_DIO_voidSetPinMode+0x96>
		    {
		        SET_BIT(DDRA,Copy_u8PINn);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MCAL_DIO_voidSetPinMode+0x8c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MCAL_DIO_voidSetPinMode+0x88>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	44 c1       	rjmp	.+648    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRA,Copy_u8PINn);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MCAL_DIO_voidSetPinMode+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MCAL_DIO_voidSetPinMode+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	a1 f4       	brne	.+40     	; 0xd8a <MCAL_DIO_voidSetPinMode+0xec>
		        {
			    SET_BIT(PORTA,Copy_u8PINn);
     d62:	ab e3       	ldi	r26, 0x3B	; 59
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	eb e3       	ldi	r30, 0x3B	; 59
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <MCAL_DIO_voidSetPinMode+0xe2>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <MCAL_DIO_voidSetPinMode+0xde>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	19 c1       	rjmp	.+562    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
		        }
		        else
			{
			    CLR_BIT(PORTA,Copy_u8PINn);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <MCAL_DIO_voidSetPinMode+0x10a>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <MCAL_DIO_voidSetPinMode+0x106>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	04 c1       	rjmp	.+520    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOB:			/* PORTB */
		    if(Copy_DIOMode_tMode)
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	88 23       	and	r24, r24
     db8:	a1 f0       	breq	.+40     	; 0xde2 <MCAL_DIO_voidSetPinMode+0x144>
		    {
		        SET_BIT(DDRB,Copy_u8PINn);
     dba:	a7 e3       	ldi	r26, 0x37	; 55
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e7 e3       	ldi	r30, 0x37	; 55
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MCAL_DIO_voidSetPinMode+0x13a>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <MCAL_DIO_voidSetPinMode+0x136>
     ddc:	84 2b       	or	r24, r20
     dde:	8c 93       	st	X, r24
     de0:	ed c0       	rjmp	.+474    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRB,Copy_u8PINn);
     de2:	a7 e3       	ldi	r26, 0x37	; 55
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <MCAL_DIO_voidSetPinMode+0x162>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <MCAL_DIO_voidSetPinMode+0x15e>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <MCAL_DIO_voidSetPinMode+0x19a>
			{
			    SET_BIT(PORTB,Copy_u8PINn);
     e10:	a8 e3       	ldi	r26, 0x38	; 56
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e8 e3       	ldi	r30, 0x38	; 56
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <MCAL_DIO_voidSetPinMode+0x190>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <MCAL_DIO_voidSetPinMode+0x18c>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	c2 c0       	rjmp	.+388    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
			}
		        else
			{
		            CLR_BIT(PORTB,Copy_u8PINn);
     e38:	a8 e3       	ldi	r26, 0x38	; 56
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 e3       	ldi	r30, 0x38	; 56
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <MCAL_DIO_voidSetPinMode+0x1b8>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <MCAL_DIO_voidSetPinMode+0x1b4>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	ad c0       	rjmp	.+346    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOC:			/* PORTC */
		    if(Copy_DIOMode_tMode)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	88 23       	and	r24, r24
     e66:	a1 f0       	breq	.+40     	; 0xe90 <MCAL_DIO_voidSetPinMode+0x1f2>
		    {
		        SET_BIT(DDRC,Copy_u8PINn);
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <MCAL_DIO_voidSetPinMode+0x1e8>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <MCAL_DIO_voidSetPinMode+0x1e4>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	96 c0       	rjmp	.+300    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRC,Copy_u8PINn);
     e90:	a4 e3       	ldi	r26, 0x34	; 52
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e4 e3       	ldi	r30, 0x34	; 52
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MCAL_DIO_voidSetPinMode+0x210>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MCAL_DIO_voidSetPinMode+0x20c>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	a1 f4       	brne	.+40     	; 0xee6 <MCAL_DIO_voidSetPinMode+0x248>
		        {
			    SET_BIT(PORTC,Copy_u8PINn);
     ebe:	a5 e3       	ldi	r26, 0x35	; 53
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e3       	ldi	r30, 0x35	; 53
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <MCAL_DIO_voidSetPinMode+0x23e>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <MCAL_DIO_voidSetPinMode+0x23a>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	6b c0       	rjmp	.+214    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
		        }
		        else
			{
			    CLR_BIT(PORTC,Copy_u8PINn);
     ee6:	a5 e3       	ldi	r26, 0x35	; 53
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e3       	ldi	r30, 0x35	; 53
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <MCAL_DIO_voidSetPinMode+0x266>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <MCAL_DIO_voidSetPinMode+0x262>
     f08:	80 95       	com	r24
     f0a:	84 23       	and	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	56 c0       	rjmp	.+172    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
			}
		    }
		    break;
		case DIOD:			/* PORTD */
		    if(Copy_DIOMode_tMode)
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	88 23       	and	r24, r24
     f14:	a1 f0       	breq	.+40     	; 0xf3e <MCAL_DIO_voidSetPinMode+0x2a0>
		    {
		        SET_BIT(DDRD,Copy_u8PINn);
     f16:	a1 e3       	ldi	r26, 0x31	; 49
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e3       	ldi	r30, 0x31	; 49
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <MCAL_DIO_voidSetPinMode+0x296>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <MCAL_DIO_voidSetPinMode+0x292>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
		    }
		    else
		    {
		        CLR_BIT(DDRD,Copy_u8PINn);
     f3e:	a1 e3       	ldi	r26, 0x31	; 49
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e1 e3       	ldi	r30, 0x31	; 49
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <MCAL_DIO_voidSetPinMode+0x2be>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <MCAL_DIO_voidSetPinMode+0x2ba>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
		        if(Copy_DIOMode_tMode == Input_Pullup)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <MCAL_DIO_voidSetPinMode+0x2f6>
			{
			    SET_BIT(PORTD,Copy_u8PINn);
     f6c:	a2 e3       	ldi	r26, 0x32	; 50
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e2 e3       	ldi	r30, 0x32	; 50
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <MCAL_DIO_voidSetPinMode+0x2ec>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <MCAL_DIO_voidSetPinMode+0x2e8>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <MCAL_DIO_voidSetPinMode+0x31e>
			}
		        else
			{
			    CLR_BIT(PORTD,Copy_u8PINn);
     f94:	a2 e3       	ldi	r26, 0x32	; 50
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e2 e3       	ldi	r30, 0x32	; 50
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <MCAL_DIO_voidSetPinMode+0x314>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <MCAL_DIO_voidSetPinMode+0x310>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
    }
    else
    {
    //Error_Handler();
    }
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <MCAL_DIO_voidWritePin>:

/*
 *  To write on a specific output pin from PROTx register
 */
void MCAL_DIO_voidWritePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn, DIOState_t Copy_DIOState_tValue)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <MCAL_DIO_voidWritePin+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <MCAL_DIO_voidWritePin+0x8>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6a 83       	std	Y+2, r22	; 0x02
     fde:	4b 83       	std	Y+3, r20	; 0x03
    if(Copy_DIOPort_tDIOx < 4)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <MCAL_DIO_voidWritePin+0x1c>
     fe6:	d5 c0       	rjmp	.+426    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
    {
        if(Copy_DIOPin_tPINn < 8)
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	88 30       	cpi	r24, 0x08	; 8
     fec:	08 f0       	brcs	.+2      	; 0xff0 <MCAL_DIO_voidWritePin+0x24>
     fee:	d1 c0       	rjmp	.+418    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
        {
            switch(Copy_DIOPort_tDIOx)
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3d 83       	std	Y+5, r19	; 0x05
     ff8:	2c 83       	std	Y+4, r18	; 0x04
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	09 f4       	brne	.+2      	; 0x1006 <MCAL_DIO_voidWritePin+0x3a>
    1004:	43 c0       	rjmp	.+134    	; 0x108c <MCAL_DIO_voidWritePin+0xc0>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	2c f4       	brge	.+10     	; 0x101a <MCAL_DIO_voidWritePin+0x4e>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	71 f0       	breq	.+28     	; 0x1034 <MCAL_DIO_voidWritePin+0x68>
    1018:	bc c0       	rjmp	.+376    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
    101a:	2c 81       	ldd	r18, Y+4	; 0x04
    101c:	3d 81       	ldd	r19, Y+5	; 0x05
    101e:	22 30       	cpi	r18, 0x02	; 2
    1020:	31 05       	cpc	r19, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <MCAL_DIO_voidWritePin+0x5a>
    1024:	5f c0       	rjmp	.+190    	; 0x10e4 <MCAL_DIO_voidWritePin+0x118>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	91 05       	cpc	r25, r1
    102e:	09 f4       	brne	.+2      	; 0x1032 <MCAL_DIO_voidWritePin+0x66>
    1030:	85 c0       	rjmp	.+266    	; 0x113c <MCAL_DIO_voidWritePin+0x170>
    1032:	af c0       	rjmp	.+350    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
            {
                case DIOA:			/* PORTA */
		    if(Copy_DIOState_tValue)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	88 23       	and	r24, r24
    1038:	a1 f0       	breq	.+40     	; 0x1062 <MCAL_DIO_voidWritePin+0x96>
		    {
		        SET_BIT(PORTA,Copy_DIOPin_tPINn);
    103a:	ab e3       	ldi	r26, 0x3B	; 59
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e3       	ldi	r30, 0x3B	; 59
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <MCAL_DIO_voidWritePin+0x8c>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <MCAL_DIO_voidWritePin+0x88>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	98 c0       	rjmp	.+304    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTA,Copy_DIOPin_tPINn);
    1062:	ab e3       	ldi	r26, 0x3B	; 59
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	eb e3       	ldi	r30, 0x3B	; 59
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <MCAL_DIO_voidWritePin+0xb4>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <MCAL_DIO_voidWritePin+0xb0>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	83 c0       	rjmp	.+262    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOB:			/* PORTB */
		    if(Copy_DIOState_tValue)
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 23       	and	r24, r24
    1090:	a1 f0       	breq	.+40     	; 0x10ba <MCAL_DIO_voidWritePin+0xee>
		    {
		        SET_BIT(PORTB,Copy_DIOPin_tPINn);
    1092:	a8 e3       	ldi	r26, 0x38	; 56
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e8 e3       	ldi	r30, 0x38	; 56
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <MCAL_DIO_voidWritePin+0xe4>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <MCAL_DIO_voidWritePin+0xe0>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	6c c0       	rjmp	.+216    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTB,Copy_DIOPin_tPINn);
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <MCAL_DIO_voidWritePin+0x10c>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <MCAL_DIO_voidWritePin+0x108>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	57 c0       	rjmp	.+174    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOC:			/* PORTC */
		    if(Copy_DIOState_tValue)
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 23       	and	r24, r24
    10e8:	a1 f0       	breq	.+40     	; 0x1112 <MCAL_DIO_voidWritePin+0x146>
		    {
		        SET_BIT(PORTC,Copy_DIOPin_tPINn);
    10ea:	a5 e3       	ldi	r26, 0x35	; 53
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e5 e3       	ldi	r30, 0x35	; 53
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <MCAL_DIO_voidWritePin+0x13c>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <MCAL_DIO_voidWritePin+0x138>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	40 c0       	rjmp	.+128    	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTC,Copy_DIOPin_tPINn);
    1112:	a5 e3       	ldi	r26, 0x35	; 53
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e3       	ldi	r30, 0x35	; 53
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <MCAL_DIO_voidWritePin+0x164>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <MCAL_DIO_voidWritePin+0x160>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
    113a:	2b c0       	rjmp	.+86     	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    break;
                case DIOD:			/* PORTD */
		    if(Copy_DIOState_tValue)
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	88 23       	and	r24, r24
    1140:	a1 f0       	breq	.+40     	; 0x116a <MCAL_DIO_voidWritePin+0x19e>
		    {
		        SET_BIT(PORTD,Copy_DIOPin_tPINn);
    1142:	a2 e3       	ldi	r26, 0x32	; 50
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e2 e3       	ldi	r30, 0x32	; 50
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <MCAL_DIO_voidWritePin+0x194>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <MCAL_DIO_voidWritePin+0x190>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <MCAL_DIO_voidWritePin+0x1c6>
		    }
		    else
		    {
		        CLR_BIT(PORTD,Copy_DIOPin_tPINn);
    116a:	a2 e3       	ldi	r26, 0x32	; 50
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e2 e3       	ldi	r30, 0x32	; 50
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <MCAL_DIO_voidWritePin+0x1bc>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <MCAL_DIO_voidWritePin+0x1b8>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    }
    else
    {
        //Error_Handler();
    }
}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <MCAL_DIO_u8ReadPin>:

/*
 * To read a specific output pin from PINx register
 */
u8 MCAL_DIO_u8ReadPin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <MCAL_DIO_u8ReadPin+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <MCAL_DIO_u8ReadPin+0x8>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <MCAL_DIO_u8ReadPin+0xa>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 pinValue = 0;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	08 f0       	brcs	.+2      	; 0x11be <MCAL_DIO_u8ReadPin+0x1c>
    11bc:	71 c0       	rjmp	.+226    	; 0x12a0 <MCAL_DIO_u8ReadPin+0xfe>
    {
	if(Copy_DIOPin_tPINn < 8)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	88 30       	cpi	r24, 0x08	; 8
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <MCAL_DIO_u8ReadPin+0x24>
    11c4:	6a c0       	rjmp	.+212    	; 0x129a <MCAL_DIO_u8ReadPin+0xf8>
	{
	    switch(Copy_DIOPort_tDIOx)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3e 83       	std	Y+6, r19	; 0x06
    11ce:	2d 83       	std	Y+5, r18	; 0x05
    11d0:	4d 81       	ldd	r20, Y+5	; 0x05
    11d2:	5e 81       	ldd	r21, Y+6	; 0x06
    11d4:	41 30       	cpi	r20, 0x01	; 1
    11d6:	51 05       	cpc	r21, r1
    11d8:	41 f1       	breq	.+80     	; 0x122a <MCAL_DIO_u8ReadPin+0x88>
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	91 05       	cpc	r25, r1
    11e2:	34 f4       	brge	.+12     	; 0x11f0 <MCAL_DIO_u8ReadPin+0x4e>
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	61 f0       	breq	.+24     	; 0x1206 <MCAL_DIO_u8ReadPin+0x64>
    11ee:	52 c0       	rjmp	.+164    	; 0x1294 <MCAL_DIO_u8ReadPin+0xf2>
    11f0:	4d 81       	ldd	r20, Y+5	; 0x05
    11f2:	5e 81       	ldd	r21, Y+6	; 0x06
    11f4:	42 30       	cpi	r20, 0x02	; 2
    11f6:	51 05       	cpc	r21, r1
    11f8:	51 f1       	breq	.+84     	; 0x124e <MCAL_DIO_u8ReadPin+0xac>
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	b9 f1       	breq	.+110    	; 0x1272 <MCAL_DIO_u8ReadPin+0xd0>
    1204:	47 c0       	rjmp	.+142    	; 0x1294 <MCAL_DIO_u8ReadPin+0xf2>
	    {
	        case DIOA:			/* PORTA */
		    pinValue = GET_BIT(PINA,Copy_DIOPin_tPINn);
    1206:	e9 e3       	ldi	r30, 0x39	; 57
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <MCAL_DIO_u8ReadPin+0x7c>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <MCAL_DIO_u8ReadPin+0x78>
    1222:	ca 01       	movw	r24, r20
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	35 c0       	rjmp	.+106    	; 0x1294 <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOB:			/* PORTB */
		    pinValue = GET_BIT(PINB,Copy_DIOPin_tPINn);
    122a:	e6 e3       	ldi	r30, 0x36	; 54
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <MCAL_DIO_u8ReadPin+0xa0>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <MCAL_DIO_u8ReadPin+0x9c>
    1246:	ca 01       	movw	r24, r20
    1248:	81 70       	andi	r24, 0x01	; 1
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	23 c0       	rjmp	.+70     	; 0x1294 <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOC:			/* PORTC */
		    pinValue = GET_BIT(PINC,Copy_DIOPin_tPINn);
    124e:	e3 e3       	ldi	r30, 0x33	; 51
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a9 01       	movw	r20, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <MCAL_DIO_u8ReadPin+0xc4>
    1262:	55 95       	asr	r21
    1264:	47 95       	ror	r20
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <MCAL_DIO_u8ReadPin+0xc0>
    126a:	ca 01       	movw	r24, r20
    126c:	81 70       	andi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <MCAL_DIO_u8ReadPin+0xf2>
		    break;
		case DIOD:			/* PORTD */
		    pinValue = GET_BIT(PIND,Copy_DIOPin_tPINn);
    1272:	e0 e3       	ldi	r30, 0x30	; 48
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a9 01       	movw	r20, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <MCAL_DIO_u8ReadPin+0xe8>
    1286:	55 95       	asr	r21
    1288:	47 95       	ror	r20
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <MCAL_DIO_u8ReadPin+0xe4>
    128e:	ca 01       	movw	r24, r20
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	89 83       	std	Y+1, r24	; 0x01
		    break;
	    }
	    return pinValue;
    1294:	59 81       	ldd	r21, Y+1	; 0x01
    1296:	5c 83       	std	Y+4, r21	; 0x04
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <MCAL_DIO_u8ReadPin+0x102>
	}
	else
	{
	    //Error_Handler();
	    return 0xFF;
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	8c 83       	std	Y+4, r24	; 0x04
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <MCAL_DIO_u8ReadPin+0x102>
	}
    }
    else
    {
        //Error_Handler();
        return 0xFF;
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    12a6:	26 96       	adiw	r28, 0x06	; 6
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <MCAL_DIO_voidWriteWord>:

/*
 * To write on the whole PROTx register
 */
void MCAL_DIO_voidWriteWord(DIOPort_t Copy_DIOPort_tDIOx, u8 Copy_u8Word)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <MCAL_DIO_voidWriteWord+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <MCAL_DIO_voidWriteWord+0x8>
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_DIOPort_tDIOx < 4)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	90 f5       	brcc	.+100    	; 0x1332 <MCAL_DIO_voidWriteWord+0x7a>
    {
	switch(Copy_DIOPort_tDIOx)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3c 83       	std	Y+4, r19	; 0x04
    12d6:	2b 83       	std	Y+3, r18	; 0x03
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	d1 f0       	breq	.+52     	; 0x1316 <MCAL_DIO_voidWriteWord+0x5e>
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <MCAL_DIO_voidWriteWord+0x3e>
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	61 f0       	breq	.+24     	; 0x130c <MCAL_DIO_voidWriteWord+0x54>
    12f4:	1e c0       	rjmp	.+60     	; 0x1332 <MCAL_DIO_voidWriteWord+0x7a>
    12f6:	2b 81       	ldd	r18, Y+3	; 0x03
    12f8:	3c 81       	ldd	r19, Y+4	; 0x04
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	81 f0       	breq	.+32     	; 0x1320 <MCAL_DIO_voidWriteWord+0x68>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	81 f0       	breq	.+32     	; 0x132a <MCAL_DIO_voidWriteWord+0x72>
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <MCAL_DIO_voidWriteWord+0x7a>
	{
	    case DIOA:			/* PORTA */
		PORTA = Copy_u8Word;
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOB:			/* PORTB */
		PORTB = Copy_u8Word;
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOC:			/* PORTC */
		PORTC = Copy_u8Word;
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	80 83       	st	Z, r24
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <MCAL_DIO_voidWriteWord+0x7a>
		break;
	    case DIOD:			/* PORTD */
		PORTD = Copy_u8Word;
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 83       	st	Z, r24
		break;
	}
    }
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <MCAL_DIO_u8WordRead>:

/*
 *  To read the whole PINx register
 */
u8 MCAL_DIO_u8WordRead(DIOPort_t Copy_DIOPort_tDIOx)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <MCAL_DIO_u8WordRead+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <MCAL_DIO_u8WordRead+0x8>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	8a 83       	std	Y+2, r24	; 0x02
    u8 portValue = 0;
    1350:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	a8 f5       	brcc	.+106    	; 0x13c2 <MCAL_DIO_u8WordRead+0x82>
    {
	switch(Copy_DIOPort_tDIOx)
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	3d 83       	std	Y+5, r19	; 0x05
    1360:	2c 83       	std	Y+4, r18	; 0x04
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	91 05       	cpc	r25, r1
    136a:	d1 f0       	breq	.+52     	; 0x13a0 <MCAL_DIO_u8WordRead+0x60>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	2c f4       	brge	.+10     	; 0x1380 <MCAL_DIO_u8WordRead+0x40>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	61 f0       	breq	.+24     	; 0x1396 <MCAL_DIO_u8WordRead+0x56>
    137e:	1e c0       	rjmp	.+60     	; 0x13bc <MCAL_DIO_u8WordRead+0x7c>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	81 f0       	breq	.+32     	; 0x13aa <MCAL_DIO_u8WordRead+0x6a>
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	81 f0       	breq	.+32     	; 0x13b4 <MCAL_DIO_u8WordRead+0x74>
    1394:	13 c0       	rjmp	.+38     	; 0x13bc <MCAL_DIO_u8WordRead+0x7c>
	{
	    case DIOA:			/* PORTA */
		portValue = PINA;
    1396:	e9 e3       	ldi	r30, 0x39	; 57
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOB:			/* PORTB */
		portValue = PINB;
    13a0:	e6 e3       	ldi	r30, 0x36	; 54
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOC:			/* PORTC */
		portValue = PINC;
    13aa:	e3 e3       	ldi	r30, 0x33	; 51
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <MCAL_DIO_u8WordRead+0x7c>
		break;
	    case DIOD:			/* PORTD */
		portValue = PIND;
    13b4:	e0 e3       	ldi	r30, 0x30	; 48
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	89 83       	std	Y+1, r24	; 0x01
		break;
	    default:
		//No Code
		break;
	}
	return portValue;
    13bc:	99 81       	ldd	r25, Y+1	; 0x01
    13be:	9b 83       	std	Y+3, r25	; 0x03
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <MCAL_DIO_u8WordRead+0x84>
    }
    else
    {
	return 0;
    13c2:	1b 82       	std	Y+3, r1	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <MCAL_DIO_voidTogglePin>:

/*
 * To toggle a certain pin.
 */
void MCAL_DIO_voidTogglePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <MCAL_DIO_voidTogglePin+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <MCAL_DIO_voidTogglePin+0x8>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_DIOPort_tDIOx < 4)
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <MCAL_DIO_voidTogglePin+0x18>
    13ec:	72 c0       	rjmp	.+228    	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
    {
	if(Copy_DIOPin_tPINn < 8)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	88 30       	cpi	r24, 0x08	; 8
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <MCAL_DIO_voidTogglePin+0x20>
    13f4:	6e c0       	rjmp	.+220    	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
	{
	    switch(Copy_DIOPort_tDIOx)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3c 83       	std	Y+4, r19	; 0x04
    13fe:	2b 83       	std	Y+3, r18	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	49 f1       	breq	.+82     	; 0x145c <MCAL_DIO_voidTogglePin+0x86>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <MCAL_DIO_voidTogglePin+0x48>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	61 f0       	breq	.+24     	; 0x1434 <MCAL_DIO_voidTogglePin+0x5e>
    141c:	5a c0       	rjmp	.+180    	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	71 f1       	breq	.+92     	; 0x1484 <MCAL_DIO_voidTogglePin+0xae>
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	e9 f1       	breq	.+122    	; 0x14ac <MCAL_DIO_voidTogglePin+0xd6>
    1432:	4f c0       	rjmp	.+158    	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
	    {
		    case DIOA:			/* PORTA */
			TOG_BIT(PORTA,Copy_DIOPin_tPINn);
    1434:	ab e3       	ldi	r26, 0x3B	; 59
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <MCAL_DIO_voidTogglePin+0x7c>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <MCAL_DIO_voidTogglePin+0x78>
    1456:	84 27       	eor	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	3b c0       	rjmp	.+118    	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOB:			/* PORTB */
			TOG_BIT(PORTB,Copy_DIOPin_tPINn);
    145c:	a8 e3       	ldi	r26, 0x38	; 56
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e8 e3       	ldi	r30, 0x38	; 56
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <MCAL_DIO_voidTogglePin+0xa4>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <MCAL_DIO_voidTogglePin+0xa0>
    147e:	84 27       	eor	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	27 c0       	rjmp	.+78     	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOC:			/* PORTC */
			TOG_BIT(PORTC,Copy_DIOPin_tPINn);
    1484:	a5 e3       	ldi	r26, 0x35	; 53
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e5 e3       	ldi	r30, 0x35	; 53
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <MCAL_DIO_voidTogglePin+0xcc>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <MCAL_DIO_voidTogglePin+0xc8>
    14a6:	84 27       	eor	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	13 c0       	rjmp	.+38     	; 0x14d2 <MCAL_DIO_voidTogglePin+0xfc>
			break;
		    case DIOD:			/* PORTD */
			TOG_BIT(PORTD,Copy_DIOPin_tPINn);
    14ac:	a2 e3       	ldi	r26, 0x32	; 50
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <MCAL_DIO_voidTogglePin+0xf4>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <MCAL_DIO_voidTogglePin+0xf0>
    14ce:	84 27       	eor	r24, r20
    14d0:	8c 93       	st	X, r24
    }
    else
    {
	    //Error_Handler();
    }
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <MCAL_DIO_voidTogglePort>:

/*
 * To toggle a complete port register.
 */
void MCAL_DIO_voidTogglePort(DIOPort_t Copy_DIOPort_tDIOx)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <MCAL_DIO_voidTogglePort+0x6>
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_DIOPort_tDIOx < 4)
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <MCAL_DIO_voidTogglePort+0x16>
    14f4:	3e c0       	rjmp	.+124    	; 0x1572 <MCAL_DIO_voidTogglePort+0x92>
    {
	switch(Copy_DIOPort_tDIOx)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3b 83       	std	Y+3, r19	; 0x03
    14fe:	2a 83       	std	Y+2, r18	; 0x02
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	e9 f0       	breq	.+58     	; 0x1544 <MCAL_DIO_voidTogglePort+0x64>
    150a:	2a 81       	ldd	r18, Y+2	; 0x02
    150c:	3b 81       	ldd	r19, Y+3	; 0x03
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	2c f4       	brge	.+10     	; 0x151e <MCAL_DIO_voidTogglePort+0x3e>
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	9b 81       	ldd	r25, Y+3	; 0x03
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	61 f0       	breq	.+24     	; 0x1534 <MCAL_DIO_voidTogglePort+0x54>
    151c:	2a c0       	rjmp	.+84     	; 0x1572 <MCAL_DIO_voidTogglePort+0x92>
    151e:	2a 81       	ldd	r18, Y+2	; 0x02
    1520:	3b 81       	ldd	r19, Y+3	; 0x03
    1522:	22 30       	cpi	r18, 0x02	; 2
    1524:	31 05       	cpc	r19, r1
    1526:	b1 f0       	breq	.+44     	; 0x1554 <MCAL_DIO_voidTogglePort+0x74>
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	c9 f0       	breq	.+50     	; 0x1564 <MCAL_DIO_voidTogglePort+0x84>
    1532:	1f c0       	rjmp	.+62     	; 0x1572 <MCAL_DIO_voidTogglePort+0x92>
	{
	    case DIOA:			/* PORTA */
		PORTA ^= 0xFF;
    1534:	ab e3       	ldi	r26, 0x3B	; 59
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	eb e3       	ldi	r30, 0x3B	; 59
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 95       	com	r24
    1540:	8c 93       	st	X, r24
    1542:	17 c0       	rjmp	.+46     	; 0x1572 <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOB:			/* PORTB */
		PORTB ^= 0xFF;
    1544:	a8 e3       	ldi	r26, 0x38	; 56
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 95       	com	r24
    1550:	8c 93       	st	X, r24
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOC:			/* PORTC */
		PORTC ^= 0xFF;
    1554:	a5 e3       	ldi	r26, 0x35	; 53
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e3       	ldi	r30, 0x35	; 53
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 95       	com	r24
    1560:	8c 93       	st	X, r24
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <MCAL_DIO_voidTogglePort+0x92>
		break;
	    case DIOD:			/* PORTD */
		PORTD ^= 0xFF;
    1564:	a2 e3       	ldi	r26, 0x32	; 50
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e2 e3       	ldi	r30, 0x32	; 50
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 95       	com	r24
    1570:	8c 93       	st	X, r24
    }
    else
    {
	//Error_Handler();
    }
}
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <MCAL_GINT_SetGIE>:


/** =================== EXTI Functions Implementation ======================= */
/* Set the Global Interrupt Enable flag in the SREG register */
void MCAL_GINT_SetGIE(void)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1586:	af e5       	ldi	r26, 0x5F	; 95
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e5       	ldi	r30, 0x5F	; 95
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	8c 93       	st	X, r24
}
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <MCAL_GINT_ClearGIE>:


/* Clear the Global Interrupt Enable flag in the SREG register */
void MCAL_GINT_ClearGIE(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    15a2:	af e5       	ldi	r26, 0x5F	; 95
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ef e5       	ldi	r30, 0x5F	; 95
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	8c 93       	st	X, r24
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <HAL_LCD_Init>:



/** ====================== LCD Functions Implementation ===================== */
void HAL_LCD_Init()
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	cc 54       	subi	r28, 0x4C	; 76
    15c4:	d0 40       	sbci	r29, 0x00	; 0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
	/* Configuring the LCD pins */

	MCAL_DIO_voidSetPinMode(RS , Output);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	63 e0       	ldi	r22, 0x03	; 3
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(E  , Output);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	62 e0       	ldi	r22, 0x02	; 2
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB7, Output);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	63 e0       	ldi	r22, 0x03	; 3
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB6, Output);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB5, Output);
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB4, Output);
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
    160c:	fe 01       	movw	r30, r28
    160e:	e7 5b       	subi	r30, 0xB7	; 183
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a8 ef       	ldi	r26, 0xF8	; 248
    1618:	b1 e4       	ldi	r27, 0x41	; 65
    161a:	80 83       	st	Z, r24
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	a2 83       	std	Z+2, r26	; 0x02
    1620:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	8e 01       	movw	r16, r28
    1624:	0b 5b       	subi	r16, 0xBB	; 187
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	fe 01       	movw	r30, r28
    162a:	e7 5b       	subi	r30, 0xB7	; 183
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	55 e4       	ldi	r21, 0x45	; 69
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	f8 01       	movw	r30, r16
    1648:	80 83       	st	Z, r24
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	a2 83       	std	Z+2, r26	; 0x02
    164e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1650:	fe 01       	movw	r30, r28
    1652:	eb 5b       	subi	r30, 0xBB	; 187
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e8       	ldi	r20, 0x80	; 128
    1664:	5f e3       	ldi	r21, 0x3F	; 63
    1666:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    166a:	88 23       	and	r24, r24
    166c:	44 f4       	brge	.+16     	; 0x167e <HAL_LCD_Init+0xc8>
		__ticks = 1;
    166e:	fe 01       	movw	r30, r28
    1670:	ed 5b       	subi	r30, 0xBD	; 189
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	64 c0       	rjmp	.+200    	; 0x1746 <HAL_LCD_Init+0x190>
	else if (__tmp > 65535)
    167e:	fe 01       	movw	r30, r28
    1680:	eb 5b       	subi	r30, 0xBB	; 187
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	0c f0       	brlt	.+2      	; 0x169e <HAL_LCD_Init+0xe8>
    169c:	43 c0       	rjmp	.+134    	; 0x1724 <HAL_LCD_Init+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169e:	fe 01       	movw	r30, r28
    16a0:	e7 5b       	subi	r30, 0xB7	; 183
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	93 81       	ldd	r25, Z+3	; 0x03
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8e 01       	movw	r16, r28
    16be:	0d 5b       	subi	r16, 0xBD	; 189
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
    16d4:	1f c0       	rjmp	.+62     	; 0x1714 <HAL_LCD_Init+0x15e>
    16d6:	fe 01       	movw	r30, r28
    16d8:	ef 5b       	subi	r30, 0xBF	; 191
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 e9       	ldi	r24, 0x90	; 144
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16e4:	fe 01       	movw	r30, r28
    16e6:	ef 5b       	subi	r30, 0xBF	; 191
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <HAL_LCD_Init+0x138>
    16f2:	fe 01       	movw	r30, r28
    16f4:	ef 5b       	subi	r30, 0xBF	; 191
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fc:	de 01       	movw	r26, r28
    16fe:	ad 5b       	subi	r26, 0xBD	; 189
    1700:	bf 4f       	sbci	r27, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5b       	subi	r30, 0xBD	; 189
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	11 96       	adiw	r26, 0x01	; 1
    1710:	9c 93       	st	X, r25
    1712:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	fe 01       	movw	r30, r28
    1716:	ed 5b       	subi	r30, 0xBD	; 189
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	d1 f6       	brne	.-76     	; 0x16d6 <HAL_LCD_Init+0x120>
    1722:	24 c0       	rjmp	.+72     	; 0x176c <HAL_LCD_Init+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	8e 01       	movw	r16, r28
    1726:	0d 5b       	subi	r16, 0xBD	; 189
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	eb 5b       	subi	r30, 0xBB	; 187
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	f8 01       	movw	r30, r16
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
    1746:	fe 01       	movw	r30, r28
    1748:	ed 5b       	subi	r30, 0xBD	; 189
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	fe 01       	movw	r30, r28
    1752:	ff 96       	adiw	r30, 0x3f	; 63
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	fe 01       	movw	r30, r28
    175a:	ff 96       	adiw	r30, 0x3f	; 63
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <HAL_LCD_Init+0x1aa>
    1764:	fe 01       	movw	r30, r28
    1766:	ff 96       	adiw	r30, 0x3f	; 63
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24

	/* LCD software initializations */

	_delay_ms(31);

	HAL_LCD_SendCommand(0x20);
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0x20);
    1772:	80 e2       	ldi	r24, 0x20	; 32
    1774:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0x80);
    1778:	80 e8       	ldi	r24, 0x80	; 128
    177a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e2       	ldi	r26, 0x20	; 32
    1784:	b2 e4       	ldi	r27, 0x42	; 66
    1786:	8b af       	std	Y+59, r24	; 0x3b
    1788:	9c af       	std	Y+60, r25	; 0x3c
    178a:	ad af       	std	Y+61, r26	; 0x3d
    178c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    178e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1790:	7c ad       	ldd	r23, Y+60	; 0x3c
    1792:	8d ad       	ldd	r24, Y+61	; 0x3d
    1794:	9e ad       	ldd	r25, Y+62	; 0x3e
    1796:	2b ea       	ldi	r18, 0xAB	; 171
    1798:	3a ea       	ldi	r19, 0xAA	; 170
    179a:	4a ea       	ldi	r20, 0xAA	; 170
    179c:	50 e4       	ldi	r21, 0x40	; 64
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8f ab       	std	Y+55, r24	; 0x37
    17a8:	98 af       	std	Y+56, r25	; 0x38
    17aa:	a9 af       	std	Y+57, r26	; 0x39
    17ac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17ae:	6f a9       	ldd	r22, Y+55	; 0x37
    17b0:	78 ad       	ldd	r23, Y+56	; 0x38
    17b2:	89 ad       	ldd	r24, Y+57	; 0x39
    17b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	1c f4       	brge	.+6      	; 0x17cc <HAL_LCD_Init+0x216>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	8e ab       	std	Y+54, r24	; 0x36
    17ca:	91 c0       	rjmp	.+290    	; 0x18ee <HAL_LCD_Init+0x338>
	else if (__tmp > 255)
    17cc:	6f a9       	ldd	r22, Y+55	; 0x37
    17ce:	78 ad       	ldd	r23, Y+56	; 0x38
    17d0:	89 ad       	ldd	r24, Y+57	; 0x39
    17d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	53 e4       	ldi	r21, 0x43	; 67
    17dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <HAL_LCD_Init+0x230>
    17e4:	7b c0       	rjmp	.+246    	; 0x18dc <HAL_LCD_Init+0x326>
	{
		_delay_ms(__us / 1000.0);
    17e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    17e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    17ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a e7       	ldi	r20, 0x7A	; 122
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8a ab       	std	Y+50, r24	; 0x32
    1800:	9b ab       	std	Y+51, r25	; 0x33
    1802:	ac ab       	std	Y+52, r26	; 0x34
    1804:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6a a9       	ldd	r22, Y+50	; 0x32
    1808:	7b a9       	ldd	r23, Y+51	; 0x33
    180a:	8c a9       	ldd	r24, Y+52	; 0x34
    180c:	9d a9       	ldd	r25, Y+53	; 0x35
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	55 e4       	ldi	r21, 0x45	; 69
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8e a7       	std	Y+46, r24	; 0x2e
    1820:	9f a7       	std	Y+47, r25	; 0x2f
    1822:	a8 ab       	std	Y+48, r26	; 0x30
    1824:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1826:	6e a5       	ldd	r22, Y+46	; 0x2e
    1828:	7f a5       	ldd	r23, Y+47	; 0x2f
    182a:	88 a9       	ldd	r24, Y+48	; 0x30
    182c:	99 a9       	ldd	r25, Y+49	; 0x31
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <HAL_LCD_Init+0x292>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9d a7       	std	Y+45, r25	; 0x2d
    1844:	8c a7       	std	Y+44, r24	; 0x2c
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <HAL_LCD_Init+0x310>
	else if (__tmp > 65535)
    1848:	6e a5       	ldd	r22, Y+46	; 0x2e
    184a:	7f a5       	ldd	r23, Y+47	; 0x2f
    184c:	88 a9       	ldd	r24, Y+48	; 0x30
    184e:	99 a9       	ldd	r25, Y+49	; 0x31
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <HAL_LCD_Init+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6a a9       	ldd	r22, Y+50	; 0x32
    1862:	7b a9       	ldd	r23, Y+51	; 0x33
    1864:	8c a9       	ldd	r24, Y+52	; 0x34
    1866:	9d a9       	ldd	r25, Y+53	; 0x35
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9d a7       	std	Y+45, r25	; 0x2d
    1886:	8c a7       	std	Y+44, r24	; 0x2c
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <HAL_LCD_Init+0x2f2>
    188a:	80 e9       	ldi	r24, 0x90	; 144
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	9b a7       	std	Y+43, r25	; 0x2b
    1890:	8a a7       	std	Y+42, r24	; 0x2a
    1892:	8a a5       	ldd	r24, Y+42	; 0x2a
    1894:	9b a5       	ldd	r25, Y+43	; 0x2b
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <HAL_LCD_Init+0x2e0>
    189a:	9b a7       	std	Y+43, r25	; 0x2b
    189c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8c a5       	ldd	r24, Y+44	; 0x2c
    18a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9d a7       	std	Y+45, r25	; 0x2d
    18a6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    18aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <HAL_LCD_Init+0x2d4>
    18b0:	24 c0       	rjmp	.+72     	; 0x18fa <HAL_LCD_Init+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6e a5       	ldd	r22, Y+46	; 0x2e
    18b4:	7f a5       	ldd	r23, Y+47	; 0x2f
    18b6:	88 a9       	ldd	r24, Y+48	; 0x30
    18b8:	99 a9       	ldd	r25, Y+49	; 0x31
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9d a7       	std	Y+45, r25	; 0x2d
    18c4:	8c a7       	std	Y+44, r24	; 0x2c
    18c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    18c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    18ca:	99 a7       	std	Y+41, r25	; 0x29
    18cc:	88 a7       	std	Y+40, r24	; 0x28
    18ce:	88 a5       	ldd	r24, Y+40	; 0x28
    18d0:	99 a5       	ldd	r25, Y+41	; 0x29
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <HAL_LCD_Init+0x31c>
    18d6:	99 a7       	std	Y+41, r25	; 0x29
    18d8:	88 a7       	std	Y+40, r24	; 0x28
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <HAL_LCD_Init+0x344>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18dc:	6f a9       	ldd	r22, Y+55	; 0x37
    18de:	78 ad       	ldd	r23, Y+56	; 0x38
    18e0:	89 ad       	ldd	r24, Y+57	; 0x39
    18e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8e ab       	std	Y+54, r24	; 0x36
    18ee:	8e a9       	ldd	r24, Y+54	; 0x36
    18f0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18f2:	8f a1       	ldd	r24, Y+39	; 0x27
    18f4:	8a 95       	dec	r24
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <HAL_LCD_Init+0x33e>
    18f8:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(40);

	HAL_LCD_SendCommand(0x00);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0xC0);
    1900:	80 ec       	ldi	r24, 0xC0	; 192
    1902:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e2       	ldi	r26, 0x20	; 32
    190c:	b2 e4       	ldi	r27, 0x42	; 66
    190e:	8b a3       	std	Y+35, r24	; 0x23
    1910:	9c a3       	std	Y+36, r25	; 0x24
    1912:	ad a3       	std	Y+37, r26	; 0x25
    1914:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	2b ea       	ldi	r18, 0xAB	; 171
    1920:	3a ea       	ldi	r19, 0xAA	; 170
    1922:	4a ea       	ldi	r20, 0xAA	; 170
    1924:	50 e4       	ldi	r21, 0x40	; 64
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8f 8f       	std	Y+31, r24	; 0x1f
    1930:	98 a3       	std	Y+32, r25	; 0x20
    1932:	a9 a3       	std	Y+33, r26	; 0x21
    1934:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1936:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1938:	78 a1       	ldd	r23, Y+32	; 0x20
    193a:	89 a1       	ldd	r24, Y+33	; 0x21
    193c:	9a a1       	ldd	r25, Y+34	; 0x22
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	1c f4       	brge	.+6      	; 0x1954 <HAL_LCD_Init+0x39e>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	8e 8f       	std	Y+30, r24	; 0x1e
    1952:	91 c0       	rjmp	.+290    	; 0x1a76 <HAL_LCD_Init+0x4c0>
	else if (__tmp > 255)
    1954:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1956:	78 a1       	ldd	r23, Y+32	; 0x20
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	53 e4       	ldi	r21, 0x43	; 67
    1964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1968:	18 16       	cp	r1, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <HAL_LCD_Init+0x3b8>
    196c:	7b c0       	rjmp	.+246    	; 0x1a64 <HAL_LCD_Init+0x4ae>
	{
		_delay_ms(__us / 1000.0);
    196e:	6b a1       	ldd	r22, Y+35	; 0x23
    1970:	7c a1       	ldd	r23, Y+36	; 0x24
    1972:	8d a1       	ldd	r24, Y+37	; 0x25
    1974:	9e a1       	ldd	r25, Y+38	; 0x26
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a e7       	ldi	r20, 0x7A	; 122
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8a 8f       	std	Y+26, r24	; 0x1a
    1988:	9b 8f       	std	Y+27, r25	; 0x1b
    198a:	ac 8f       	std	Y+28, r26	; 0x1c
    198c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1990:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1992:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1994:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a e7       	ldi	r20, 0x7A	; 122
    199c:	55 e4       	ldi	r21, 0x45	; 69
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8e 8b       	std	Y+22, r24	; 0x16
    19a8:	9f 8b       	std	Y+23, r25	; 0x17
    19aa:	a8 8f       	std	Y+24, r26	; 0x18
    19ac:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19ae:	6e 89       	ldd	r22, Y+22	; 0x16
    19b0:	7f 89       	ldd	r23, Y+23	; 0x17
    19b2:	88 8d       	ldd	r24, Y+24	; 0x18
    19b4:	99 8d       	ldd	r25, Y+25	; 0x19
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <HAL_LCD_Init+0x41a>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9d 8b       	std	Y+21, r25	; 0x15
    19cc:	8c 8b       	std	Y+20, r24	; 0x14
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <HAL_LCD_Init+0x498>
	else if (__tmp > 65535)
    19d0:	6e 89       	ldd	r22, Y+22	; 0x16
    19d2:	7f 89       	ldd	r23, Y+23	; 0x17
    19d4:	88 8d       	ldd	r24, Y+24	; 0x18
    19d6:	99 8d       	ldd	r25, Y+25	; 0x19
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <HAL_LCD_Init+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19ea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9d 8b       	std	Y+21, r25	; 0x15
    1a0e:	8c 8b       	std	Y+20, r24	; 0x14
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <HAL_LCD_Init+0x47a>
    1a12:	80 e9       	ldi	r24, 0x90	; 144
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	9b 8b       	std	Y+19, r25	; 0x13
    1a18:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a1a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a1c:	9b 89       	ldd	r25, Y+19	; 0x13
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <HAL_LCD_Init+0x468>
    1a22:	9b 8b       	std	Y+19, r25	; 0x13
    1a24:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8c 89       	ldd	r24, Y+20	; 0x14
    1a28:	9d 89       	ldd	r25, Y+21	; 0x15
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9d 8b       	std	Y+21, r25	; 0x15
    1a2e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8c 89       	ldd	r24, Y+20	; 0x14
    1a32:	9d 89       	ldd	r25, Y+21	; 0x15
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <HAL_LCD_Init+0x45c>
    1a38:	24 c0       	rjmp	.+72     	; 0x1a82 <HAL_LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a3c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a3e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a40:	99 8d       	ldd	r25, Y+25	; 0x19
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9d 8b       	std	Y+21, r25	; 0x15
    1a4c:	8c 8b       	std	Y+20, r24	; 0x14
    1a4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a50:	9d 89       	ldd	r25, Y+21	; 0x15
    1a52:	99 8b       	std	Y+17, r25	; 0x11
    1a54:	88 8b       	std	Y+16, r24	; 0x10
    1a56:	88 89       	ldd	r24, Y+16	; 0x10
    1a58:	99 89       	ldd	r25, Y+17	; 0x11
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <HAL_LCD_Init+0x4a4>
    1a5e:	99 8b       	std	Y+17, r25	; 0x11
    1a60:	88 8b       	std	Y+16, r24	; 0x10
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <HAL_LCD_Init+0x4cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a64:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a66:	78 a1       	ldd	r23, Y+32	; 0x20
    1a68:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	8e 8f       	std	Y+30, r24	; 0x1e
    1a76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a78:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	8a 95       	dec	r24
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <HAL_LCD_Init+0x4c6>
    1a80:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(40);

	HAL_LCD_SendCommand(0x00);
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0x10);
    1a88:	80 e1       	ldi	r24, 0x10	; 16
    1a8a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    1a8e:	8d ec       	ldi	r24, 0xCD	; 205
    1a90:	9c ec       	ldi	r25, 0xCC	; 204
    1a92:	ac ec       	ldi	r26, 0xCC	; 204
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	ad 87       	std	Y+13, r26	; 0x0d
    1a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	55 e4       	ldi	r21, 0x45	; 69
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8f 83       	std	Y+7, r24	; 0x07
    1ab8:	98 87       	std	Y+8, r25	; 0x08
    1aba:	a9 87       	std	Y+9, r26	; 0x09
    1abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <HAL_LCD_Init+0x52a>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <HAL_LCD_Init+0x5a8>
	else if (__tmp > 65535)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <HAL_LCD_Init+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <HAL_LCD_Init+0x58a>
    1b22:	80 e9       	ldi	r24, 0x90	; 144
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <HAL_LCD_Init+0x578>
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <HAL_LCD_Init+0x56c>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <HAL_LCD_Init+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <HAL_LCD_Init+0x5b4>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1.6);

	/* End of initialization */

	InitFinished = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	80 93 d0 02 	sts	0x02D0, r24
}
    1b78:	c4 5b       	subi	r28, 0xB4	; 180
    1b7a:	df 4f       	sbci	r29, 0xFF	; 255
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	08 95       	ret

00001b90 <HAL_LCD_SendCommand>:


void HAL_LCD_SendCommand(u8 cmd)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	ef 97       	sbiw	r28, 0x3f	; 63
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	8f af       	std	Y+63, r24	; 0x3f
	MCAL_DIO_voidWritePin(RS, Low);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	63 e0       	ldi	r22, 0x03	; 3
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(DB4, GET_BIT(cmd,4));
    1bb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bb2:	82 95       	swap	r24
    1bb4:	8f 70       	andi	r24, 0x0F	; 15
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	91 70       	andi	r25, 0x01	; 1
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	49 2f       	mov	r20, r25
    1bc0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB5, GET_BIT(cmd,5));
    1bc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bc6:	82 95       	swap	r24
    1bc8:	86 95       	lsr	r24
    1bca:	87 70       	andi	r24, 0x07	; 7
    1bcc:	98 2f       	mov	r25, r24
    1bce:	91 70       	andi	r25, 0x01	; 1
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	49 2f       	mov	r20, r25
    1bd6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB6, GET_BIT(cmd,6));
    1bda:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bdc:	82 95       	swap	r24
    1bde:	86 95       	lsr	r24
    1be0:	86 95       	lsr	r24
    1be2:	83 70       	andi	r24, 0x03	; 3
    1be4:	98 2f       	mov	r25, r24
    1be6:	91 70       	andi	r25, 0x01	; 1
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	62 e0       	ldi	r22, 0x02	; 2
    1bec:	49 2f       	mov	r20, r25
    1bee:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB7, GET_BIT(cmd,7));
    1bf2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	99 27       	eor	r25, r25
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	63 e0       	ldi	r22, 0x03	; 3
    1c00:	49 2f       	mov	r20, r25
    1c02:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(E, High);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	ac e4       	ldi	r26, 0x4C	; 76
    1c16:	b2 e4       	ldi	r27, 0x42	; 66
    1c18:	8b af       	std	Y+59, r24	; 0x3b
    1c1a:	9c af       	std	Y+60, r25	; 0x3c
    1c1c:	ad af       	std	Y+61, r26	; 0x3d
    1c1e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c20:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c22:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c28:	2b ea       	ldi	r18, 0xAB	; 171
    1c2a:	3a ea       	ldi	r19, 0xAA	; 170
    1c2c:	4a ea       	ldi	r20, 0xAA	; 170
    1c2e:	50 e4       	ldi	r21, 0x40	; 64
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8f ab       	std	Y+55, r24	; 0x37
    1c3a:	98 af       	std	Y+56, r25	; 0x38
    1c3c:	a9 af       	std	Y+57, r26	; 0x39
    1c3e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1c40:	6f a9       	ldd	r22, Y+55	; 0x37
    1c42:	78 ad       	ldd	r23, Y+56	; 0x38
    1c44:	89 ad       	ldd	r24, Y+57	; 0x39
    1c46:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	1c f4       	brge	.+6      	; 0x1c5e <HAL_LCD_SendCommand+0xce>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	8e ab       	std	Y+54, r24	; 0x36
    1c5c:	91 c0       	rjmp	.+290    	; 0x1d80 <HAL_LCD_SendCommand+0x1f0>
	else if (__tmp > 255)
    1c5e:	6f a9       	ldd	r22, Y+55	; 0x37
    1c60:	78 ad       	ldd	r23, Y+56	; 0x38
    1c62:	89 ad       	ldd	r24, Y+57	; 0x39
    1c64:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	53 e4       	ldi	r21, 0x43	; 67
    1c6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	0c f0       	brlt	.+2      	; 0x1c78 <HAL_LCD_SendCommand+0xe8>
    1c76:	7b c0       	rjmp	.+246    	; 0x1d6e <HAL_LCD_SendCommand+0x1de>
	{
		_delay_ms(__us / 1000.0);
    1c78:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c7a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a e7       	ldi	r20, 0x7A	; 122
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8a ab       	std	Y+50, r24	; 0x32
    1c92:	9b ab       	std	Y+51, r25	; 0x33
    1c94:	ac ab       	std	Y+52, r26	; 0x34
    1c96:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c98:	6a a9       	ldd	r22, Y+50	; 0x32
    1c9a:	7b a9       	ldd	r23, Y+51	; 0x33
    1c9c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c9e:	9d a9       	ldd	r25, Y+53	; 0x35
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a e7       	ldi	r20, 0x7A	; 122
    1ca6:	55 e4       	ldi	r21, 0x45	; 69
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	8e a7       	std	Y+46, r24	; 0x2e
    1cb2:	9f a7       	std	Y+47, r25	; 0x2f
    1cb4:	a8 ab       	std	Y+48, r26	; 0x30
    1cb6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1cb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cba:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cbc:	88 a9       	ldd	r24, Y+48	; 0x30
    1cbe:	99 a9       	ldd	r25, Y+49	; 0x31
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	2c f4       	brge	.+10     	; 0x1cda <HAL_LCD_SendCommand+0x14a>
		__ticks = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9d a7       	std	Y+45, r25	; 0x2d
    1cd6:	8c a7       	std	Y+44, r24	; 0x2c
    1cd8:	3f c0       	rjmp	.+126    	; 0x1d58 <HAL_LCD_SendCommand+0x1c8>
	else if (__tmp > 65535)
    1cda:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cdc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cde:	88 a9       	ldd	r24, Y+48	; 0x30
    1ce0:	99 a9       	ldd	r25, Y+49	; 0x31
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	4f e7       	ldi	r20, 0x7F	; 127
    1ce8:	57 e4       	ldi	r21, 0x47	; 71
    1cea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	4c f5       	brge	.+82     	; 0x1d44 <HAL_LCD_SendCommand+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf2:	6a a9       	ldd	r22, Y+50	; 0x32
    1cf4:	7b a9       	ldd	r23, Y+51	; 0x33
    1cf6:	8c a9       	ldd	r24, Y+52	; 0x34
    1cf8:	9d a9       	ldd	r25, Y+53	; 0x35
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e2       	ldi	r20, 0x20	; 32
    1d00:	51 e4       	ldi	r21, 0x41	; 65
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9d a7       	std	Y+45, r25	; 0x2d
    1d18:	8c a7       	std	Y+44, r24	; 0x2c
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <HAL_LCD_SendCommand+0x1aa>
    1d1c:	80 e9       	ldi	r24, 0x90	; 144
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	9b a7       	std	Y+43, r25	; 0x2b
    1d22:	8a a7       	std	Y+42, r24	; 0x2a
    1d24:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d26:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <HAL_LCD_SendCommand+0x198>
    1d2c:	9b a7       	std	Y+43, r25	; 0x2b
    1d2e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d30:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d32:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	9d a7       	std	Y+45, r25	; 0x2d
    1d38:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f7       	brne	.-38     	; 0x1d1c <HAL_LCD_SendCommand+0x18c>
    1d42:	24 c0       	rjmp	.+72     	; 0x1d8c <HAL_LCD_SendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d46:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d48:	88 a9       	ldd	r24, Y+48	; 0x30
    1d4a:	99 a9       	ldd	r25, Y+49	; 0x31
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9d a7       	std	Y+45, r25	; 0x2d
    1d56:	8c a7       	std	Y+44, r24	; 0x2c
    1d58:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d5a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d5c:	99 a7       	std	Y+41, r25	; 0x29
    1d5e:	88 a7       	std	Y+40, r24	; 0x28
    1d60:	88 a5       	ldd	r24, Y+40	; 0x28
    1d62:	99 a5       	ldd	r25, Y+41	; 0x29
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <HAL_LCD_SendCommand+0x1d4>
    1d68:	99 a7       	std	Y+41, r25	; 0x29
    1d6a:	88 a7       	std	Y+40, r24	; 0x28
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <HAL_LCD_SendCommand+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d6e:	6f a9       	ldd	r22, Y+55	; 0x37
    1d70:	78 ad       	ldd	r23, Y+56	; 0x38
    1d72:	89 ad       	ldd	r24, Y+57	; 0x39
    1d74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8e ab       	std	Y+54, r24	; 0x36
    1d80:	8e a9       	ldd	r24, Y+54	; 0x36
    1d82:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d84:	8f a1       	ldd	r24, Y+39	; 0x27
    1d86:	8a 95       	dec	r24
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <HAL_LCD_SendCommand+0x1f6>
    1d8a:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(51);

	MCAL_DIO_voidWritePin(E, Low);
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	if(InitFinished)	// Not used while Initialization
    1d96:	80 91 d0 02 	lds	r24, 0x02D0
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <HAL_LCD_SendCommand+0x210>
    1d9e:	ee c0       	rjmp	.+476    	; 0x1f7c <HAL_LCD_SendCommand+0x3ec>
	{
		MCAL_DIO_voidWritePin(DB4, GET_BIT(cmd,0));
    1da0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1da2:	98 2f       	mov	r25, r24
    1da4:	91 70       	andi	r25, 0x01	; 1
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	49 2f       	mov	r20, r25
    1dac:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
		MCAL_DIO_voidWritePin(DB5, GET_BIT(cmd,1));
    1db0:	8f ad       	ldd	r24, Y+63	; 0x3f
    1db2:	86 95       	lsr	r24
    1db4:	98 2f       	mov	r25, r24
    1db6:	91 70       	andi	r25, 0x01	; 1
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	49 2f       	mov	r20, r25
    1dbe:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
		MCAL_DIO_voidWritePin(DB6, GET_BIT(cmd,2));
    1dc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dc4:	86 95       	lsr	r24
    1dc6:	86 95       	lsr	r24
    1dc8:	98 2f       	mov	r25, r24
    1dca:	91 70       	andi	r25, 0x01	; 1
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	49 2f       	mov	r20, r25
    1dd2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
		MCAL_DIO_voidWritePin(DB7, GET_BIT(cmd,3));
    1dd6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dd8:	86 95       	lsr	r24
    1dda:	86 95       	lsr	r24
    1ddc:	86 95       	lsr	r24
    1dde:	98 2f       	mov	r25, r24
    1de0:	91 70       	andi	r25, 0x01	; 1
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	63 e0       	ldi	r22, 0x03	; 3
    1de6:	49 2f       	mov	r20, r25
    1de8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

		MCAL_DIO_voidWritePin(E, High);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	ac e4       	ldi	r26, 0x4C	; 76
    1dfc:	b2 e4       	ldi	r27, 0x42	; 66
    1dfe:	8b a3       	std	Y+35, r24	; 0x23
    1e00:	9c a3       	std	Y+36, r25	; 0x24
    1e02:	ad a3       	std	Y+37, r26	; 0x25
    1e04:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e06:	6b a1       	ldd	r22, Y+35	; 0x23
    1e08:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0e:	2b ea       	ldi	r18, 0xAB	; 171
    1e10:	3a ea       	ldi	r19, 0xAA	; 170
    1e12:	4a ea       	ldi	r20, 0xAA	; 170
    1e14:	50 e4       	ldi	r21, 0x40	; 64
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e20:	98 a3       	std	Y+32, r25	; 0x20
    1e22:	a9 a3       	std	Y+33, r26	; 0x21
    1e24:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e26:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e28:	78 a1       	ldd	r23, Y+32	; 0x20
    1e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	1c f4       	brge	.+6      	; 0x1e44 <HAL_LCD_SendCommand+0x2b4>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	8e 8f       	std	Y+30, r24	; 0x1e
    1e42:	91 c0       	rjmp	.+290    	; 0x1f66 <HAL_LCD_SendCommand+0x3d6>
	else if (__tmp > 255)
    1e44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e46:	78 a1       	ldd	r23, Y+32	; 0x20
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	53 e4       	ldi	r21, 0x43	; 67
    1e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	0c f0       	brlt	.+2      	; 0x1e5e <HAL_LCD_SendCommand+0x2ce>
    1e5c:	7b c0       	rjmp	.+246    	; 0x1f54 <HAL_LCD_SendCommand+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1e5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e60:	7c a1       	ldd	r23, Y+36	; 0x24
    1e62:	8d a1       	ldd	r24, Y+37	; 0x25
    1e64:	9e a1       	ldd	r25, Y+38	; 0x26
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	54 e4       	ldi	r21, 0x44	; 68
    1e6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	8a 8f       	std	Y+26, r24	; 0x1a
    1e78:	9b 8f       	std	Y+27, r25	; 0x1b
    1e7a:	ac 8f       	std	Y+28, r26	; 0x1c
    1e7c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e80:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	55 e4       	ldi	r21, 0x45	; 69
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8e 8b       	std	Y+22, r24	; 0x16
    1e98:	9f 8b       	std	Y+23, r25	; 0x17
    1e9a:	a8 8f       	std	Y+24, r26	; 0x18
    1e9c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e9e:	6e 89       	ldd	r22, Y+22	; 0x16
    1ea0:	7f 89       	ldd	r23, Y+23	; 0x17
    1ea2:	88 8d       	ldd	r24, Y+24	; 0x18
    1ea4:	99 8d       	ldd	r25, Y+25	; 0x19
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <HAL_LCD_SendCommand+0x330>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9d 8b       	std	Y+21, r25	; 0x15
    1ebc:	8c 8b       	std	Y+20, r24	; 0x14
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <HAL_LCD_SendCommand+0x3ae>
	else if (__tmp > 65535)
    1ec0:	6e 89       	ldd	r22, Y+22	; 0x16
    1ec2:	7f 89       	ldd	r23, Y+23	; 0x17
    1ec4:	88 8d       	ldd	r24, Y+24	; 0x18
    1ec6:	99 8d       	ldd	r25, Y+25	; 0x19
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <HAL_LCD_SendCommand+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1eda:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1edc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ede:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9d 8b       	std	Y+21, r25	; 0x15
    1efe:	8c 8b       	std	Y+20, r24	; 0x14
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <HAL_LCD_SendCommand+0x390>
    1f02:	80 e9       	ldi	r24, 0x90	; 144
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	9b 8b       	std	Y+19, r25	; 0x13
    1f08:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f0a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f0c:	9b 89       	ldd	r25, Y+19	; 0x13
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <HAL_LCD_SendCommand+0x37e>
    1f12:	9b 8b       	std	Y+19, r25	; 0x13
    1f14:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8c 89       	ldd	r24, Y+20	; 0x14
    1f18:	9d 89       	ldd	r25, Y+21	; 0x15
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9d 8b       	std	Y+21, r25	; 0x15
    1f1e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8c 89       	ldd	r24, Y+20	; 0x14
    1f22:	9d 89       	ldd	r25, Y+21	; 0x15
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <HAL_LCD_SendCommand+0x372>
    1f28:	24 c0       	rjmp	.+72     	; 0x1f72 <HAL_LCD_SendCommand+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6e 89       	ldd	r22, Y+22	; 0x16
    1f2c:	7f 89       	ldd	r23, Y+23	; 0x17
    1f2e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f30:	99 8d       	ldd	r25, Y+25	; 0x19
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9d 8b       	std	Y+21, r25	; 0x15
    1f3c:	8c 8b       	std	Y+20, r24	; 0x14
    1f3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f40:	9d 89       	ldd	r25, Y+21	; 0x15
    1f42:	99 8b       	std	Y+17, r25	; 0x11
    1f44:	88 8b       	std	Y+16, r24	; 0x10
    1f46:	88 89       	ldd	r24, Y+16	; 0x10
    1f48:	99 89       	ldd	r25, Y+17	; 0x11
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <HAL_LCD_SendCommand+0x3ba>
    1f4e:	99 8b       	std	Y+17, r25	; 0x11
    1f50:	88 8b       	std	Y+16, r24	; 0x10
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <HAL_LCD_SendCommand+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f54:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f56:	78 a1       	ldd	r23, Y+32	; 0x20
    1f58:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8e 8f       	std	Y+30, r24	; 0x1e
    1f66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f68:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6c:	8a 95       	dec	r24
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <HAL_LCD_SendCommand+0x3dc>
    1f70:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_us(51);

		MCAL_DIO_voidWritePin(E, Low);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	62 e0       	ldi	r22, 0x02	; 2
    1f76:	40 e0       	ldi	r20, 0x00	; 0
    1f78:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    1f7c:	8d ec       	ldi	r24, 0xCD	; 205
    1f7e:	9c ec       	ldi	r25, 0xCC	; 204
    1f80:	ac ec       	ldi	r26, 0xCC	; 204
    1f82:	bf e3       	ldi	r27, 0x3F	; 63
    1f84:	8b 87       	std	Y+11, r24	; 0x0b
    1f86:	9c 87       	std	Y+12, r25	; 0x0c
    1f88:	ad 87       	std	Y+13, r26	; 0x0d
    1f8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	4a e7       	ldi	r20, 0x7A	; 122
    1f9a:	55 e4       	ldi	r21, 0x45	; 69
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8f 83       	std	Y+7, r24	; 0x07
    1fa6:	98 87       	std	Y+8, r25	; 0x08
    1fa8:	a9 87       	std	Y+9, r26	; 0x09
    1faa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e8       	ldi	r20, 0x80	; 128
    1fba:	5f e3       	ldi	r21, 0x3F	; 63
    1fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc0:	88 23       	and	r24, r24
    1fc2:	2c f4       	brge	.+10     	; 0x1fce <HAL_LCD_SendCommand+0x43e>
		__ticks = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	3f c0       	rjmp	.+126    	; 0x204c <HAL_LCD_SendCommand+0x4bc>
	else if (__tmp > 65535)
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	3f ef       	ldi	r19, 0xFF	; 255
    1fda:	4f e7       	ldi	r20, 0x7F	; 127
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe2:	18 16       	cp	r1, r24
    1fe4:	4c f5       	brge	.+82     	; 0x2038 <HAL_LCD_SendCommand+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e2       	ldi	r20, 0x20	; 32
    1ff4:	51 e4       	ldi	r21, 0x41	; 65
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	bc 01       	movw	r22, r24
    2000:	cd 01       	movw	r24, r26
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	0f c0       	rjmp	.+30     	; 0x202e <HAL_LCD_SendCommand+0x49e>
    2010:	80 e9       	ldi	r24, 0x90	; 144
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <HAL_LCD_SendCommand+0x48c>
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	69 f7       	brne	.-38     	; 0x2010 <HAL_LCD_SendCommand+0x480>
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <HAL_LCD_SendCommand+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <HAL_LCD_SendCommand+0x4c8>
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(1.6);
}
    2060:	ef 96       	adiw	r28, 0x3f	; 63
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <HAL_LCD_WriteData>:


void HAL_LCD_WriteData(u8 Data)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	ef 97       	sbiw	r28, 0x3f	; 63
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	8f af       	std	Y+63, r24	; 0x3f
	MCAL_DIO_voidWritePin(RS, High);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	63 e0       	ldi	r22, 0x03	; 3
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(DB4, GET_BIT(Data,4));
    2092:	8f ad       	ldd	r24, Y+63	; 0x3f
    2094:	82 95       	swap	r24
    2096:	8f 70       	andi	r24, 0x0F	; 15
    2098:	98 2f       	mov	r25, r24
    209a:	91 70       	andi	r25, 0x01	; 1
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	60 e0       	ldi	r22, 0x00	; 0
    20a0:	49 2f       	mov	r20, r25
    20a2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB5, GET_BIT(Data,5));
    20a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    20a8:	82 95       	swap	r24
    20aa:	86 95       	lsr	r24
    20ac:	87 70       	andi	r24, 0x07	; 7
    20ae:	98 2f       	mov	r25, r24
    20b0:	91 70       	andi	r25, 0x01	; 1
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	49 2f       	mov	r20, r25
    20b8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB6, GET_BIT(Data,6));
    20bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    20be:	82 95       	swap	r24
    20c0:	86 95       	lsr	r24
    20c2:	86 95       	lsr	r24
    20c4:	83 70       	andi	r24, 0x03	; 3
    20c6:	98 2f       	mov	r25, r24
    20c8:	91 70       	andi	r25, 0x01	; 1
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	62 e0       	ldi	r22, 0x02	; 2
    20ce:	49 2f       	mov	r20, r25
    20d0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB7, GET_BIT(Data,7));
    20d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    20d6:	98 2f       	mov	r25, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	99 27       	eor	r25, r25
    20dc:	99 1f       	adc	r25, r25
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	63 e0       	ldi	r22, 0x03	; 3
    20e2:	49 2f       	mov	r20, r25
    20e4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(E, High);
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	ac e4       	ldi	r26, 0x4C	; 76
    20f8:	b2 e4       	ldi	r27, 0x42	; 66
    20fa:	8b af       	std	Y+59, r24	; 0x3b
    20fc:	9c af       	std	Y+60, r25	; 0x3c
    20fe:	ad af       	std	Y+61, r26	; 0x3d
    2100:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2102:	6b ad       	ldd	r22, Y+59	; 0x3b
    2104:	7c ad       	ldd	r23, Y+60	; 0x3c
    2106:	8d ad       	ldd	r24, Y+61	; 0x3d
    2108:	9e ad       	ldd	r25, Y+62	; 0x3e
    210a:	2b ea       	ldi	r18, 0xAB	; 171
    210c:	3a ea       	ldi	r19, 0xAA	; 170
    210e:	4a ea       	ldi	r20, 0xAA	; 170
    2110:	50 e4       	ldi	r21, 0x40	; 64
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8f ab       	std	Y+55, r24	; 0x37
    211c:	98 af       	std	Y+56, r25	; 0x38
    211e:	a9 af       	std	Y+57, r26	; 0x39
    2120:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2122:	6f a9       	ldd	r22, Y+55	; 0x37
    2124:	78 ad       	ldd	r23, Y+56	; 0x38
    2126:	89 ad       	ldd	r24, Y+57	; 0x39
    2128:	9a ad       	ldd	r25, Y+58	; 0x3a
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	1c f4       	brge	.+6      	; 0x2140 <HAL_LCD_WriteData+0xce>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	8e ab       	std	Y+54, r24	; 0x36
    213e:	91 c0       	rjmp	.+290    	; 0x2262 <HAL_LCD_WriteData+0x1f0>
	else if (__tmp > 255)
    2140:	6f a9       	ldd	r22, Y+55	; 0x37
    2142:	78 ad       	ldd	r23, Y+56	; 0x38
    2144:	89 ad       	ldd	r24, Y+57	; 0x39
    2146:	9a ad       	ldd	r25, Y+58	; 0x3a
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	53 e4       	ldi	r21, 0x43	; 67
    2150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	0c f0       	brlt	.+2      	; 0x215a <HAL_LCD_WriteData+0xe8>
    2158:	7b c0       	rjmp	.+246    	; 0x2250 <HAL_LCD_WriteData+0x1de>
	{
		_delay_ms(__us / 1000.0);
    215a:	6b ad       	ldd	r22, Y+59	; 0x3b
    215c:	7c ad       	ldd	r23, Y+60	; 0x3c
    215e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2160:	9e ad       	ldd	r25, Y+62	; 0x3e
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8a ab       	std	Y+50, r24	; 0x32
    2174:	9b ab       	std	Y+51, r25	; 0x33
    2176:	ac ab       	std	Y+52, r26	; 0x34
    2178:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	6a a9       	ldd	r22, Y+50	; 0x32
    217c:	7b a9       	ldd	r23, Y+51	; 0x33
    217e:	8c a9       	ldd	r24, Y+52	; 0x34
    2180:	9d a9       	ldd	r25, Y+53	; 0x35
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a e7       	ldi	r20, 0x7A	; 122
    2188:	55 e4       	ldi	r21, 0x45	; 69
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8e a7       	std	Y+46, r24	; 0x2e
    2194:	9f a7       	std	Y+47, r25	; 0x2f
    2196:	a8 ab       	std	Y+48, r26	; 0x30
    2198:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    219a:	6e a5       	ldd	r22, Y+46	; 0x2e
    219c:	7f a5       	ldd	r23, Y+47	; 0x2f
    219e:	88 a9       	ldd	r24, Y+48	; 0x30
    21a0:	99 a9       	ldd	r25, Y+49	; 0x31
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <HAL_LCD_WriteData+0x14a>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9d a7       	std	Y+45, r25	; 0x2d
    21b8:	8c a7       	std	Y+44, r24	; 0x2c
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <HAL_LCD_WriteData+0x1c8>
	else if (__tmp > 65535)
    21bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    21be:	7f a5       	ldd	r23, Y+47	; 0x2f
    21c0:	88 a9       	ldd	r24, Y+48	; 0x30
    21c2:	99 a9       	ldd	r25, Y+49	; 0x31
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	4f e7       	ldi	r20, 0x7F	; 127
    21ca:	57 e4       	ldi	r21, 0x47	; 71
    21cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <HAL_LCD_WriteData+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	6a a9       	ldd	r22, Y+50	; 0x32
    21d6:	7b a9       	ldd	r23, Y+51	; 0x33
    21d8:	8c a9       	ldd	r24, Y+52	; 0x34
    21da:	9d a9       	ldd	r25, Y+53	; 0x35
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e2       	ldi	r20, 0x20	; 32
    21e2:	51 e4       	ldi	r21, 0x41	; 65
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9d a7       	std	Y+45, r25	; 0x2d
    21fa:	8c a7       	std	Y+44, r24	; 0x2c
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <HAL_LCD_WriteData+0x1aa>
    21fe:	80 e9       	ldi	r24, 0x90	; 144
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	9b a7       	std	Y+43, r25	; 0x2b
    2204:	8a a7       	std	Y+42, r24	; 0x2a
    2206:	8a a5       	ldd	r24, Y+42	; 0x2a
    2208:	9b a5       	ldd	r25, Y+43	; 0x2b
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <HAL_LCD_WriteData+0x198>
    220e:	9b a7       	std	Y+43, r25	; 0x2b
    2210:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8c a5       	ldd	r24, Y+44	; 0x2c
    2214:	9d a5       	ldd	r25, Y+45	; 0x2d
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9d a7       	std	Y+45, r25	; 0x2d
    221a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8c a5       	ldd	r24, Y+44	; 0x2c
    221e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <HAL_LCD_WriteData+0x18c>
    2224:	24 c0       	rjmp	.+72     	; 0x226e <HAL_LCD_WriteData+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	6e a5       	ldd	r22, Y+46	; 0x2e
    2228:	7f a5       	ldd	r23, Y+47	; 0x2f
    222a:	88 a9       	ldd	r24, Y+48	; 0x30
    222c:	99 a9       	ldd	r25, Y+49	; 0x31
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9d a7       	std	Y+45, r25	; 0x2d
    2238:	8c a7       	std	Y+44, r24	; 0x2c
    223a:	8c a5       	ldd	r24, Y+44	; 0x2c
    223c:	9d a5       	ldd	r25, Y+45	; 0x2d
    223e:	99 a7       	std	Y+41, r25	; 0x29
    2240:	88 a7       	std	Y+40, r24	; 0x28
    2242:	88 a5       	ldd	r24, Y+40	; 0x28
    2244:	99 a5       	ldd	r25, Y+41	; 0x29
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <HAL_LCD_WriteData+0x1d4>
    224a:	99 a7       	std	Y+41, r25	; 0x29
    224c:	88 a7       	std	Y+40, r24	; 0x28
    224e:	0f c0       	rjmp	.+30     	; 0x226e <HAL_LCD_WriteData+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2250:	6f a9       	ldd	r22, Y+55	; 0x37
    2252:	78 ad       	ldd	r23, Y+56	; 0x38
    2254:	89 ad       	ldd	r24, Y+57	; 0x39
    2256:	9a ad       	ldd	r25, Y+58	; 0x3a
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8e ab       	std	Y+54, r24	; 0x36
    2262:	8e a9       	ldd	r24, Y+54	; 0x36
    2264:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2266:	8f a1       	ldd	r24, Y+39	; 0x27
    2268:	8a 95       	dec	r24
    226a:	f1 f7       	brne	.-4      	; 0x2268 <HAL_LCD_WriteData+0x1f6>
    226c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(51);

	MCAL_DIO_voidWritePin(E, Low);
    226e:	80 e0       	ldi	r24, 0x00	; 0
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(DB4, GET_BIT(Data,0));
    2278:	8f ad       	ldd	r24, Y+63	; 0x3f
    227a:	98 2f       	mov	r25, r24
    227c:	91 70       	andi	r25, 0x01	; 1
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB5, GET_BIT(Data,1));
    2288:	8f ad       	ldd	r24, Y+63	; 0x3f
    228a:	86 95       	lsr	r24
    228c:	98 2f       	mov	r25, r24
    228e:	91 70       	andi	r25, 0x01	; 1
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	61 e0       	ldi	r22, 0x01	; 1
    2294:	49 2f       	mov	r20, r25
    2296:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB6, GET_BIT(Data,2));
    229a:	8f ad       	ldd	r24, Y+63	; 0x3f
    229c:	86 95       	lsr	r24
    229e:	86 95       	lsr	r24
    22a0:	98 2f       	mov	r25, r24
    22a2:	91 70       	andi	r25, 0x01	; 1
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	49 2f       	mov	r20, r25
    22aa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB7, GET_BIT(Data,3));
    22ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    22b0:	86 95       	lsr	r24
    22b2:	86 95       	lsr	r24
    22b4:	86 95       	lsr	r24
    22b6:	98 2f       	mov	r25, r24
    22b8:	91 70       	andi	r25, 0x01	; 1
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	63 e0       	ldi	r22, 0x03	; 3
    22be:	49 2f       	mov	r20, r25
    22c0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(E, High);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	62 e0       	ldi	r22, 0x02	; 2
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	ac e4       	ldi	r26, 0x4C	; 76
    22d4:	b2 e4       	ldi	r27, 0x42	; 66
    22d6:	8b a3       	std	Y+35, r24	; 0x23
    22d8:	9c a3       	std	Y+36, r25	; 0x24
    22da:	ad a3       	std	Y+37, r26	; 0x25
    22dc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22de:	6b a1       	ldd	r22, Y+35	; 0x23
    22e0:	7c a1       	ldd	r23, Y+36	; 0x24
    22e2:	8d a1       	ldd	r24, Y+37	; 0x25
    22e4:	9e a1       	ldd	r25, Y+38	; 0x26
    22e6:	2b ea       	ldi	r18, 0xAB	; 171
    22e8:	3a ea       	ldi	r19, 0xAA	; 170
    22ea:	4a ea       	ldi	r20, 0xAA	; 170
    22ec:	50 e4       	ldi	r21, 0x40	; 64
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8f 8f       	std	Y+31, r24	; 0x1f
    22f8:	98 a3       	std	Y+32, r25	; 0x20
    22fa:	a9 a3       	std	Y+33, r26	; 0x21
    22fc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2300:	78 a1       	ldd	r23, Y+32	; 0x20
    2302:	89 a1       	ldd	r24, Y+33	; 0x21
    2304:	9a a1       	ldd	r25, Y+34	; 0x22
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	1c f4       	brge	.+6      	; 0x231c <HAL_LCD_WriteData+0x2aa>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	8e 8f       	std	Y+30, r24	; 0x1e
    231a:	91 c0       	rjmp	.+290    	; 0x243e <HAL_LCD_WriteData+0x3cc>
	else if (__tmp > 255)
    231c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    231e:	78 a1       	ldd	r23, Y+32	; 0x20
    2320:	89 a1       	ldd	r24, Y+33	; 0x21
    2322:	9a a1       	ldd	r25, Y+34	; 0x22
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	53 e4       	ldi	r21, 0x43	; 67
    232c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	0c f0       	brlt	.+2      	; 0x2336 <HAL_LCD_WriteData+0x2c4>
    2334:	7b c0       	rjmp	.+246    	; 0x242c <HAL_LCD_WriteData+0x3ba>
	{
		_delay_ms(__us / 1000.0);
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a e7       	ldi	r20, 0x7A	; 122
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8a 8f       	std	Y+26, r24	; 0x1a
    2350:	9b 8f       	std	Y+27, r25	; 0x1b
    2352:	ac 8f       	std	Y+28, r26	; 0x1c
    2354:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2358:	7b 8d       	ldd	r23, Y+27	; 0x1b
    235a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    235c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a e7       	ldi	r20, 0x7A	; 122
    2364:	55 e4       	ldi	r21, 0x45	; 69
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8e 8b       	std	Y+22, r24	; 0x16
    2370:	9f 8b       	std	Y+23, r25	; 0x17
    2372:	a8 8f       	std	Y+24, r26	; 0x18
    2374:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2376:	6e 89       	ldd	r22, Y+22	; 0x16
    2378:	7f 89       	ldd	r23, Y+23	; 0x17
    237a:	88 8d       	ldd	r24, Y+24	; 0x18
    237c:	99 8d       	ldd	r25, Y+25	; 0x19
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <HAL_LCD_WriteData+0x326>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9d 8b       	std	Y+21, r25	; 0x15
    2394:	8c 8b       	std	Y+20, r24	; 0x14
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <HAL_LCD_WriteData+0x3a4>
	else if (__tmp > 65535)
    2398:	6e 89       	ldd	r22, Y+22	; 0x16
    239a:	7f 89       	ldd	r23, Y+23	; 0x17
    239c:	88 8d       	ldd	r24, Y+24	; 0x18
    239e:	99 8d       	ldd	r25, Y+25	; 0x19
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <HAL_LCD_WriteData+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23b2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9d 8b       	std	Y+21, r25	; 0x15
    23d6:	8c 8b       	std	Y+20, r24	; 0x14
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <HAL_LCD_WriteData+0x386>
    23da:	80 e9       	ldi	r24, 0x90	; 144
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	9b 8b       	std	Y+19, r25	; 0x13
    23e0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e2:	8a 89       	ldd	r24, Y+18	; 0x12
    23e4:	9b 89       	ldd	r25, Y+19	; 0x13
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <HAL_LCD_WriteData+0x374>
    23ea:	9b 8b       	std	Y+19, r25	; 0x13
    23ec:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8c 89       	ldd	r24, Y+20	; 0x14
    23f0:	9d 89       	ldd	r25, Y+21	; 0x15
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9d 8b       	std	Y+21, r25	; 0x15
    23f6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8c 89       	ldd	r24, Y+20	; 0x14
    23fa:	9d 89       	ldd	r25, Y+21	; 0x15
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <HAL_LCD_WriteData+0x368>
    2400:	24 c0       	rjmp	.+72     	; 0x244a <HAL_LCD_WriteData+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6e 89       	ldd	r22, Y+22	; 0x16
    2404:	7f 89       	ldd	r23, Y+23	; 0x17
    2406:	88 8d       	ldd	r24, Y+24	; 0x18
    2408:	99 8d       	ldd	r25, Y+25	; 0x19
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9d 8b       	std	Y+21, r25	; 0x15
    2414:	8c 8b       	std	Y+20, r24	; 0x14
    2416:	8c 89       	ldd	r24, Y+20	; 0x14
    2418:	9d 89       	ldd	r25, Y+21	; 0x15
    241a:	99 8b       	std	Y+17, r25	; 0x11
    241c:	88 8b       	std	Y+16, r24	; 0x10
    241e:	88 89       	ldd	r24, Y+16	; 0x10
    2420:	99 89       	ldd	r25, Y+17	; 0x11
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <HAL_LCD_WriteData+0x3b0>
    2426:	99 8b       	std	Y+17, r25	; 0x11
    2428:	88 8b       	std	Y+16, r24	; 0x10
    242a:	0f c0       	rjmp	.+30     	; 0x244a <HAL_LCD_WriteData+0x3d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    242e:	78 a1       	ldd	r23, Y+32	; 0x20
    2430:	89 a1       	ldd	r24, Y+33	; 0x21
    2432:	9a a1       	ldd	r25, Y+34	; 0x22
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8e 8f       	std	Y+30, r24	; 0x1e
    243e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2440:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2442:	8f 85       	ldd	r24, Y+15	; 0x0f
    2444:	8a 95       	dec	r24
    2446:	f1 f7       	brne	.-4      	; 0x2444 <HAL_LCD_WriteData+0x3d2>
    2448:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(51);

	MCAL_DIO_voidWritePin(E, Low);
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	62 e0       	ldi	r22, 0x02	; 2
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    2454:	8d ec       	ldi	r24, 0xCD	; 205
    2456:	9c ec       	ldi	r25, 0xCC	; 204
    2458:	ac ec       	ldi	r26, 0xCC	; 204
    245a:	bf e3       	ldi	r27, 0x3F	; 63
    245c:	8b 87       	std	Y+11, r24	; 0x0b
    245e:	9c 87       	std	Y+12, r25	; 0x0c
    2460:	ad 87       	std	Y+13, r26	; 0x0d
    2462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	6b 85       	ldd	r22, Y+11	; 0x0b
    2466:	7c 85       	ldd	r23, Y+12	; 0x0c
    2468:	8d 85       	ldd	r24, Y+13	; 0x0d
    246a:	9e 85       	ldd	r25, Y+14	; 0x0e
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a e7       	ldi	r20, 0x7A	; 122
    2472:	55 e4       	ldi	r21, 0x45	; 69
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8f 83       	std	Y+7, r24	; 0x07
    247e:	98 87       	std	Y+8, r25	; 0x08
    2480:	a9 87       	std	Y+9, r26	; 0x09
    2482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <HAL_LCD_WriteData+0x434>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <HAL_LCD_WriteData+0x4b2>
	else if (__tmp > 65535)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <HAL_LCD_WriteData+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <HAL_LCD_WriteData+0x494>
    24e8:	80 e9       	ldi	r24, 0x90	; 144
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <HAL_LCD_WriteData+0x482>
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <HAL_LCD_WriteData+0x476>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <HAL_LCD_WriteData+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <HAL_LCD_WriteData+0x4be>
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1.6);
}
    2538:	ef 96       	adiw	r28, 0x3f	; 63
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <HAL_LCD_WriteString>:


void HAL_LCD_WriteString(u8 *string, u8 row, u8 col)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <HAL_LCD_WriteString+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <HAL_LCD_WriteString+0x8>
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	6c 83       	std	Y+4, r22	; 0x04
    255e:	4d 83       	std	Y+5, r20	; 0x05
	HAL_LCD_ChangePos(row,col);
    2560:	8c 81       	ldd	r24, Y+4	; 0x04
    2562:	6d 81       	ldd	r22, Y+5	; 0x05
    2564:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <HAL_LCD_ChangePos>
	u8 i = 0;
    2568:	19 82       	std	Y+1, r1	; 0x01
    256a:	20 c0       	rjmp	.+64     	; 0x25ac <HAL_LCD_WriteString+0x62>
	while(string[i] != '\0')
	{
		HAL_LCD_WriteData(string[i]);
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	fc 01       	movw	r30, r24
    2578:	e2 0f       	add	r30, r18
    257a:	f3 1f       	adc	r31, r19
    257c:	80 81       	ld	r24, Z
    257e:	0e 94 39 10 	call	0x2072	; 0x2072 <HAL_LCD_WriteData>
		i++;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	89 83       	std	Y+1, r24	; 0x01
		col++;
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	8f 5f       	subi	r24, 0xFF	; 255
    258c:	8d 83       	std	Y+5, r24	; 0x05
		if(col >= COL_MAX)
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	88 32       	cpi	r24, 0x28	; 40
    2592:	60 f0       	brcs	.+24     	; 0x25ac <HAL_LCD_WriteString+0x62>
		{
			col = 0;
    2594:	1d 82       	std	Y+5, r1	; 0x05
			row++;
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	8c 83       	std	Y+4, r24	; 0x04
			if(row >= ROW_MAX) row = 0;
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	82 30       	cpi	r24, 0x02	; 2
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <HAL_LCD_WriteString+0x5a>
    25a2:	1c 82       	std	Y+4, r1	; 0x04
			HAL_LCD_ChangePos(row,col);
    25a4:	8c 81       	ldd	r24, Y+4	; 0x04
    25a6:	6d 81       	ldd	r22, Y+5	; 0x05
    25a8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <HAL_LCD_ChangePos>

void HAL_LCD_WriteString(u8 *string, u8 row, u8 col)
{
	HAL_LCD_ChangePos(row,col);
	u8 i = 0;
	while(string[i] != '\0')
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	fc 01       	movw	r30, r24
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	80 81       	ld	r24, Z
    25be:	88 23       	and	r24, r24
    25c0:	a9 f6       	brne	.-86     	; 0x256c <HAL_LCD_WriteString+0x22>
			row++;
			if(row >= ROW_MAX) row = 0;
			HAL_LCD_ChangePos(row,col);
		}
	}
}
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <HAL_LCD_ChangePos>:


void HAL_LCD_ChangePos(u8 row, u8 col)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <HAL_LCD_ChangePos+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <HAL_LCD_ChangePos+0x8>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	6a 83       	std	Y+2, r22	; 0x02
	if(row < ROW_MAX && col < COL_MAX)
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	82 30       	cpi	r24, 0x02	; 2
    25e6:	a8 f5       	brcc	.+106    	; 0x2652 <HAL_LCD_ChangePos+0x80>
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	88 32       	cpi	r24, 0x28	; 40
    25ec:	90 f5       	brcc	.+100    	; 0x2652 <HAL_LCD_ChangePos+0x80>
	{
		switch(row)
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	3c 83       	std	Y+4, r19	; 0x04
    25f6:	2b 83       	std	Y+3, r18	; 0x03
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	9c 81       	ldd	r25, Y+4	; 0x04
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	91 05       	cpc	r25, r1
    2600:	d1 f0       	breq	.+52     	; 0x2636 <HAL_LCD_ChangePos+0x64>
    2602:	2b 81       	ldd	r18, Y+3	; 0x03
    2604:	3c 81       	ldd	r19, Y+4	; 0x04
    2606:	22 30       	cpi	r18, 0x02	; 2
    2608:	31 05       	cpc	r19, r1
    260a:	2c f4       	brge	.+10     	; 0x2616 <HAL_LCD_ChangePos+0x44>
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	61 f0       	breq	.+24     	; 0x262c <HAL_LCD_ChangePos+0x5a>
    2614:	1e c0       	rjmp	.+60     	; 0x2652 <HAL_LCD_ChangePos+0x80>
    2616:	2b 81       	ldd	r18, Y+3	; 0x03
    2618:	3c 81       	ldd	r19, Y+4	; 0x04
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 05       	cpc	r19, r1
    261e:	81 f0       	breq	.+32     	; 0x2640 <HAL_LCD_ChangePos+0x6e>
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	83 30       	cpi	r24, 0x03	; 3
    2626:	91 05       	cpc	r25, r1
    2628:	81 f0       	breq	.+32     	; 0x264a <HAL_LCD_ChangePos+0x78>
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <HAL_LCD_ChangePos+0x80>
		{
		case 0:
			HAL_LCD_SendCommand(0x80 + col);
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	80 58       	subi	r24, 0x80	; 128
    2630:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    2634:	0e c0       	rjmp	.+28     	; 0x2652 <HAL_LCD_ChangePos+0x80>
			break;
		case 1:
			HAL_LCD_SendCommand(0xC0 + col);
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	80 54       	subi	r24, 0x40	; 64
    263a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <HAL_LCD_ChangePos+0x80>
			break;
		case 2:
			HAL_LCD_SendCommand(0x94 + col);
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	8c 56       	subi	r24, 0x6C	; 108
    2644:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    2648:	04 c0       	rjmp	.+8      	; 0x2652 <HAL_LCD_ChangePos+0x80>
			break;
		case 3:
			HAL_LCD_SendCommand(0xD4 + col);
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	8c 52       	subi	r24, 0x2C	; 44
    264e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
			break;
		}
	}
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <HAL_LCD_AddPattern>:


void HAL_LCD_AddPattern(u8* Pattern, u8 CGRAM_index)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	63 97       	sbiw	r28, 0x13	; 19
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
    2678:	6b 8b       	std	Y+19, r22	; 0x13
	u8 Address;
	if(CGRAM_index < 8)
    267a:	8b 89       	ldd	r24, Y+19	; 0x13
    267c:	88 30       	cpi	r24, 0x08	; 8
    267e:	08 f0       	brcs	.+2      	; 0x2682 <HAL_LCD_AddPattern+0x22>
    2680:	98 c0       	rjmp	.+304    	; 0x27b2 <HAL_LCD_AddPattern+0x152>
	{
		Address = 8 * CGRAM_index;
    2682:	8b 89       	ldd	r24, Y+19	; 0x13
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	88 0f       	add	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 8b       	std	Y+16, r24	; 0x10
		SET_BIT(Address,6);
    2696:	88 89       	ldd	r24, Y+16	; 0x10
    2698:	80 64       	ori	r24, 0x40	; 64
    269a:	88 8b       	std	Y+16, r24	; 0x10
		HAL_LCD_SendCommand(Address);
    269c:	88 89       	ldd	r24, Y+16	; 0x10
    269e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
		for(u8 i = 0; i < 7; i++)
    26a2:	1f 86       	std	Y+15, r1	; 0x0f
    26a4:	0e c0       	rjmp	.+28     	; 0x26c2 <HAL_LCD_AddPattern+0x62>
		{
			HAL_LCD_WriteData(Pattern[i]);
    26a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	89 89       	ldd	r24, Y+17	; 0x11
    26ae:	9a 89       	ldd	r25, Y+18	; 0x12
    26b0:	fc 01       	movw	r30, r24
    26b2:	e2 0f       	add	r30, r18
    26b4:	f3 1f       	adc	r31, r19
    26b6:	80 81       	ld	r24, Z
    26b8:	0e 94 39 10 	call	0x2072	; 0x2072 <HAL_LCD_WriteData>
	if(CGRAM_index < 8)
	{
		Address = 8 * CGRAM_index;
		SET_BIT(Address,6);
		HAL_LCD_SendCommand(Address);
		for(u8 i = 0; i < 7; i++)
    26bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26be:	8f 5f       	subi	r24, 0xFF	; 255
    26c0:	8f 87       	std	Y+15, r24	; 0x0f
    26c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c4:	87 30       	cpi	r24, 0x07	; 7
    26c6:	78 f3       	brcs	.-34     	; 0x26a6 <HAL_LCD_AddPattern+0x46>
		{
			HAL_LCD_WriteData(Pattern[i]);
		}
		HOME_POS;
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HAL_LCD_SendCommand>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e4       	ldi	r27, 0x40	; 64
    26d6:	8b 87       	std	Y+11, r24	; 0x0b
    26d8:	9c 87       	std	Y+12, r25	; 0x0c
    26da:	ad 87       	std	Y+13, r26	; 0x0d
    26dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26de:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	4a e7       	ldi	r20, 0x7A	; 122
    26ec:	55 e4       	ldi	r21, 0x45	; 69
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	8f 83       	std	Y+7, r24	; 0x07
    26f8:	98 87       	std	Y+8, r25	; 0x08
    26fa:	a9 87       	std	Y+9, r26	; 0x09
    26fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2712:	88 23       	and	r24, r24
    2714:	2c f4       	brge	.+10     	; 0x2720 <HAL_LCD_AddPattern+0xc0>
		__ticks = 1;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	3f c0       	rjmp	.+126    	; 0x279e <HAL_LCD_AddPattern+0x13e>
	else if (__tmp > 65535)
    2720:	6f 81       	ldd	r22, Y+7	; 0x07
    2722:	78 85       	ldd	r23, Y+8	; 0x08
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	57 e4       	ldi	r21, 0x47	; 71
    2730:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	4c f5       	brge	.+82     	; 0x278a <HAL_LCD_AddPattern+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2738:	6b 85       	ldd	r22, Y+11	; 0x0b
    273a:	7c 85       	ldd	r23, Y+12	; 0x0c
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <HAL_LCD_AddPattern+0x120>
    2762:	80 e9       	ldi	r24, 0x90	; 144
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <HAL_LCD_AddPattern+0x10e>
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	69 f7       	brne	.-38     	; 0x2762 <HAL_LCD_AddPattern+0x102>
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <HAL_LCD_AddPattern+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278a:	6f 81       	ldd	r22, Y+7	; 0x07
    278c:	78 85       	ldd	r23, Y+8	; 0x08
    278e:	89 85       	ldd	r24, Y+9	; 0x09
    2790:	9a 85       	ldd	r25, Y+10	; 0x0a
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <HAL_LCD_AddPattern+0x14a>
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    27b2:	63 96       	adiw	r28, 0x13	; 19
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <MCAL_SPI_MasterInit>:



/** ======================= SPI Functions Implementation ==================== */
void MCAL_SPI_MasterInit(void)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    27cc:	2e 97       	sbiw	r28, 0x0e	; 14
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	f8 94       	cli
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	cd bf       	out	0x3d, r28	; 61
	/* Set MOSI and SCK output, all others input */
	MCAL_DIO_voidSetPinMode(SPI_MOSI, Output);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	65 e0       	ldi	r22, 0x05	; 5
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SCK , Output);
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	67 e0       	ldi	r22, 0x07	; 7
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_MISO, Input );
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	66 e0       	ldi	r22, 0x06	; 6
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SS  , Input_Pullup );
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	64 e0       	ldi	r22, 0x04	; 4
    27fa:	42 e0       	ldi	r20, 0x02	; 2
    27fc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>


	/* Enable SPI, Master, set clock rate f_sys/16 */
	SPCR->MSTR  = 1;
    2800:	ed e2       	ldi	r30, 0x2D	; 45
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	80 61       	ori	r24, 0x10	; 16
    2808:	80 83       	st	Z, r24
	SPCR->SPR   = SPI_CLOCK_RATE;
    280a:	ed e2       	ldi	r30, 0x2D	; 45
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	8c 7f       	andi	r24, 0xFC	; 252
    2812:	81 60       	ori	r24, 0x01	; 1
    2814:	80 83       	st	Z, r24
	SPSR->SPI2X = SPI_2XSPEED;
    2816:	ee e2       	ldi	r30, 0x2E	; 46
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	8e 7f       	andi	r24, 0xFE	; 254
    281e:	80 83       	st	Z, r24
	SPCR->SPE   = 1;
    2820:	ed e2       	ldi	r30, 0x2D	; 45
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	80 64       	ori	r24, 0x40	; 64
    2828:	80 83       	st	Z, r24
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	aa e7       	ldi	r26, 0x7A	; 122
    2830:	b4 e4       	ldi	r27, 0x44	; 68
    2832:	8b 87       	std	Y+11, r24	; 0x0b
    2834:	9c 87       	std	Y+12, r25	; 0x0c
    2836:	ad 87       	std	Y+13, r26	; 0x0d
    2838:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283a:	6b 85       	ldd	r22, Y+11	; 0x0b
    283c:	7c 85       	ldd	r23, Y+12	; 0x0c
    283e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2840:	9e 85       	ldd	r25, Y+14	; 0x0e
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a e7       	ldi	r20, 0x7A	; 122
    2848:	53 e4       	ldi	r21, 0x43	; 67
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8f 83       	std	Y+7, r24	; 0x07
    2854:	98 87       	std	Y+8, r25	; 0x08
    2856:	a9 87       	std	Y+9, r26	; 0x09
    2858:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	2c f4       	brge	.+10     	; 0x287c <MCAL_SPI_MasterInit+0xb8>
		__ticks = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <MCAL_SPI_MasterInit+0x136>
	else if (__tmp > 65535)
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	4c f5       	brge	.+82     	; 0x28e6 <MCAL_SPI_MasterInit+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	6b 85       	ldd	r22, Y+11	; 0x0b
    2896:	7c 85       	ldd	r23, Y+12	; 0x0c
    2898:	8d 85       	ldd	r24, Y+13	; 0x0d
    289a:	9e 85       	ldd	r25, Y+14	; 0x0e
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	8d 83       	std	Y+5, r24	; 0x05
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <MCAL_SPI_MasterInit+0x118>
    28be:	89 e1       	ldi	r24, 0x19	; 25
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9c 83       	std	Y+4, r25	; 0x04
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <MCAL_SPI_MasterInit+0x106>
    28ce:	9c 83       	std	Y+4, r25	; 0x04
    28d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	9e 81       	ldd	r25, Y+6	; 0x06
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f7       	brne	.-38     	; 0x28be <MCAL_SPI_MasterInit+0xfa>
    28e4:	14 c0       	rjmp	.+40     	; 0x290e <MCAL_SPI_MasterInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e6:	6f 81       	ldd	r22, Y+7	; 0x07
    28e8:	78 85       	ldd	r23, Y+8	; 0x08
    28ea:	89 85       	ldd	r24, Y+9	; 0x09
    28ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	9a 83       	std	Y+2, r25	; 0x02
    2900:	89 83       	std	Y+1, r24	; 0x01
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	9a 81       	ldd	r25, Y+2	; 0x02
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <MCAL_SPI_MasterInit+0x142>
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
}
    290e:	2e 96       	adiw	r28, 0x0e	; 14
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <MCAL_SPI_SlaveInit>:


void MCAL_SPI_SlaveInit(void)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */
	MCAL_DIO_voidSetPinMode(SPI_MOSI, Input);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	65 e0       	ldi	r22, 0x05	; 5
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SCK , Input);
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	67 e0       	ldi	r22, 0x07	; 7
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_MISO, Output );
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	66 e0       	ldi	r22, 0x06	; 6
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SPI_SS  , Input );
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	64 e0       	ldi	r22, 0x04	; 4
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>

	/* Enable SPI */
	SPCR->SPE  = 1;
    2950:	ed e2       	ldi	r30, 0x2D	; 45
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	80 64       	ori	r24, 0x40	; 64
    2958:	80 83       	st	Z, r24
}
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <MCAL_SPI_MasterTransmit>:


void MCAL_SPI_MasterTransmit(u8 Copy_Data)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	0f 92       	push	r0
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission, load the data byte to the SPI Data Register */
	SPDR = Copy_Data;
    296c:	ef e2       	ldi	r30, 0x2F	; 47
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!(SPSR->SPIF == 1));
    2974:	ee e2       	ldi	r30, 0x2E	; 46
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	80 78       	andi	r24, 0x80	; 128
    297c:	88 23       	and	r24, r24
    297e:	d1 f3       	breq	.-12     	; 0x2974 <MCAL_SPI_MasterTransmit+0x14>
}
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <MCAL_SPI_SlaveReceive>:


u8 MCAL_SPI_SlaveReceive(void)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPSR->SPIF == 1));
    2990:	ee e2       	ldi	r30, 0x2E	; 46
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	80 78       	andi	r24, 0x80	; 128
    2998:	88 23       	and	r24, r24
    299a:	d1 f3       	breq	.-12     	; 0x2990 <MCAL_SPI_SlaveReceive+0x8>

	/* Return data register */
	return SPDR;
    299c:	ef e2       	ldi	r30, 0x2F	; 47
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
}
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <MCAL_USART_Init>:
 	 -> setting the baud rate,
 	 -> enabling the tx & rx,
 	 -> and setting the frame format.
*/
void MCAL_USART_Init(void)					// Change its implementation
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	27 97       	sbiw	r28, 0x07	; 7
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
	u8 Init_UMSEL, Init_UPM1, Init_UPM0, Init_USBS, Init_UCSZ1, Init_UCSZ0,
	Init_UCPOL;

	/// Set the baud rate
	UBRRH = (u8) (USART_UBRR >> 8);
    29bc:	e0 e4       	ldi	r30, 0x40	; 64
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	10 82       	st	Z, r1
	UBRRL = (u8) USART_UBRR;
    29c2:	e9 e2       	ldi	r30, 0x29	; 41
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	87 e6       	ldi	r24, 0x67	; 103
    29c8:	80 83       	st	Z, r24

	/// Enable receiver and transmitter
	SET_BIT(UCSRB,RXEN);
    29ca:	aa e2       	ldi	r26, 0x2A	; 42
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	ea e2       	ldi	r30, 0x2A	; 42
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	80 61       	ori	r24, 0x10	; 16
    29d6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    29d8:	aa e2       	ldi	r26, 0x2A	; 42
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	ea e2       	ldi	r30, 0x2A	; 42
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	88 60       	ori	r24, 0x08	; 8
    29e4:	8c 93       	st	X, r24

	/// Set the frame format

	/* Get the UCSRC bits values from configuration parameters */
	Init_UMSEL 	= USART_MODE;
    29e6:	1f 82       	std	Y+7, r1	; 0x07
	Init_USBS 	= USART_STOP_BITS;
    29e8:	1c 82       	std	Y+4, r1	; 0x04
	Init_UCPOL 	= USART_CLOCK_POL;
    29ea:	19 82       	std	Y+1, r1	; 0x01
	Init_UPM1 	= (USART_PARITY_MODE >> 1);
    29ec:	1e 82       	std	Y+6, r1	; 0x06
	Init_UPM0 	= (USART_PARITY_MODE & 0x01);
    29ee:	1d 82       	std	Y+5, r1	; 0x05
	Init_UCSZ0 	= (USART_DATA_SIZE & 0x01);
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	8a 83       	std	Y+2, r24	; 0x02
	Init_UCSZ1 	= ((USART_DATA_SIZE >> 1) & 0x01);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	8b 83       	std	Y+3, r24	; 0x03

	/* Configure the data (character) size */
#if(USART_DATA_SIZE == USART_DATA_SIZE_9_BITS)
	SET_BIT(UCSRB,UCSZ2);
#else
	CLR_BIT(UCSRB,UCSZ2);
    29f8:	aa e2       	ldi	r26, 0x2A	; 42
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	ea e2       	ldi	r30, 0x2A	; 42
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	8b 7f       	andi	r24, 0xFB	; 251
    2a04:	8c 93       	st	X, r24
#endif

	/* Clear UCSRC register */
	UCSRC = 0x80;
    2a06:	e0 e4       	ldi	r30, 0x40	; 64
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 e8       	ldi	r24, 0x80	; 128
    2a0c:	80 83       	st	Z, r24

	/* Set all the UCSRC bits */
	UCSRC = ((1 << URSEL) | (Init_UMSEL << UMSEL) | (Init_USBS << USBS) |
    2a0e:	e0 e4       	ldi	r30, 0x40	; 64
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	8f 81       	ldd	r24, Y+7	; 0x07
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	00 24       	eor	r0, r0
    2a1a:	96 95       	lsr	r25
    2a1c:	87 95       	ror	r24
    2a1e:	07 94       	ror	r0
    2a20:	96 95       	lsr	r25
    2a22:	87 95       	ror	r24
    2a24:	07 94       	ror	r0
    2a26:	98 2f       	mov	r25, r24
    2a28:	80 2d       	mov	r24, r0
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	20 68       	ori	r18, 0x80	; 128
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	88 2f       	mov	r24, r24
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	88 0f       	add	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	92 2f       	mov	r25, r18
    2a42:	98 2b       	or	r25, r24
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	29 2f       	mov	r18, r25
    2a48:	28 2b       	or	r18, r24
    2a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4c:	88 2f       	mov	r24, r24
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	82 95       	swap	r24
    2a56:	92 95       	swap	r25
    2a58:	90 7f       	andi	r25, 0xF0	; 240
    2a5a:	98 27       	eor	r25, r24
    2a5c:	80 7f       	andi	r24, 0xF0	; 240
    2a5e:	98 27       	eor	r25, r24
    2a60:	28 2b       	or	r18, r24
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	88 2f       	mov	r24, r24
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	82 95       	swap	r24
    2a6a:	92 95       	swap	r25
    2a6c:	90 7f       	andi	r25, 0xF0	; 240
    2a6e:	98 27       	eor	r25, r24
    2a70:	80 7f       	andi	r24, 0xF0	; 240
    2a72:	98 27       	eor	r25, r24
    2a74:	28 2b       	or	r18, r24
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	28 2b       	or	r18, r24
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	82 2b       	or	r24, r18
    2a92:	80 83       	st	Z, r24

	/* Configure the USART Data Register Empty Interrupt  */
#if (USART_UDREI == USART_UDREI_ENABLE)
	SET_BIT(UCSRB,UDRIE);
#elif(USART_UDREI == USART_UDREI_DISABLE)
	CLR_BIT(UCSRB,UDRIE);
    2a94:	aa e2       	ldi	r26, 0x2A	; 42
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	ea e2       	ldi	r30, 0x2A	; 42
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8f 7d       	andi	r24, 0xDF	; 223
    2aa0:	8c 93       	st	X, r24
#endif


}
    2aa2:	27 96       	adiw	r28, 0x07	; 7
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <MCAL_USART_Transmit_PollingMode>:
/*
   USART Transmit function in the polling mode
   The function will wait until the transmission in completed.
*/
void MCAL_USART_Transmit_PollingMode(TxDataType Data)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	0f 92       	push	r0
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	89 83       	std	Y+1, r24	; 0x01
	/** Disable the interrupt mode transmission **/
	/* Clear the transmission completed interrupt flag */
	SET_BIT(UCSRA,TXC);
    2ac0:	ab e2       	ldi	r26, 0x2B	; 43
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	eb e2       	ldi	r30, 0x2B	; 43
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 64       	ori	r24, 0x40	; 64
    2acc:	8c 93       	st	X, r24

	/* Clear the transmission completed interrupt request */
	CLR_BIT(UCSRB,TXCIE);
    2ace:	aa e2       	ldi	r26, 0x2A	; 42
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	ea e2       	ldi	r30, 0x2A	; 42
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8f 7b       	andi	r24, 0xBF	; 191
    2ada:	8c 93       	st	X, r24

	/* Assign the TXC_ISR to NULL */
	TXC_ISR = NULL;
    2adc:	10 92 d2 02 	sts	0x02D2, r1
    2ae0:	10 92 d1 02 	sts	0x02D1, r1

	/* Wait for empty transmit buffer */
	while ( !(GET_BIT(UCSRA,UDRE)) );
    2ae4:	eb e2       	ldi	r30, 0x2B	; 43
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	82 95       	swap	r24
    2aec:	86 95       	lsr	r24
    2aee:	87 70       	andi	r24, 0x07	; 7
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	81 70       	andi	r24, 0x01	; 1
    2af6:	90 70       	andi	r25, 0x00	; 0
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	a1 f3       	breq	.-24     	; 0x2ae4 <MCAL_USART_Transmit_PollingMode+0x30>
		UCSRB |= (1<<TXB8);
	}
#endif

	/* Put data into buffer, and then send the data */
	UDR = Data;
    2afc:	ec e2       	ldi	r30, 0x2C	; 44
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	80 83       	st	Z, r24

	/* Wait for the transmission to be completed */
	while( !(GET_BIT(UCSRA,TXC)) );
    2b04:	eb e2       	ldi	r30, 0x2B	; 43
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	82 95       	swap	r24
    2b0c:	86 95       	lsr	r24
    2b0e:	86 95       	lsr	r24
    2b10:	83 70       	andi	r24, 0x03	; 3
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	81 70       	andi	r24, 0x01	; 1
    2b18:	90 70       	andi	r25, 0x00	; 0
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	99 f3       	breq	.-26     	; 0x2b04 <MCAL_USART_Transmit_PollingMode+0x50>
}
    2b1e:	0f 90       	pop	r0
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <MCAL_USART_Receive_PollingMode>:
/*
   USART Receive function in the polling mode
   The function will wait until the reception process in completed.
*/
RxDataType MCAL_USART_Receive_PollingMode(void)
{
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <MCAL_USART_Receive_PollingMode+0x6>
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
	/** Disable the interrupt mode Receive **/
	/* Clear the reception completed interrupt flag */
	SET_BIT(UCSRA,RXC);
    2b30:	ab e2       	ldi	r26, 0x2B	; 43
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	eb e2       	ldi	r30, 0x2B	; 43
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
    2b3a:	80 68       	ori	r24, 0x80	; 128
    2b3c:	8c 93       	st	X, r24

	/* Clear the reception completed interrupt request */
	CLR_BIT(UCSRB,RXCIE);
    2b3e:	aa e2       	ldi	r26, 0x2A	; 42
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	ea e2       	ldi	r30, 0x2A	; 42
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	8f 77       	andi	r24, 0x7F	; 127
    2b4a:	8c 93       	st	X, r24

	/* Assign the RXC_ISR to NULL */
	RXC_ISR = (void*)0;
    2b4c:	10 92 d4 02 	sts	0x02D4, r1
    2b50:	10 92 d3 02 	sts	0x02D3, r1

	return ((resh << 8) | resl);
#else
	u8 status;
	/* Wait for data to be received */
	while ( !(GET_BIT(UCSRA,RXC)) );
    2b54:	eb e2       	ldi	r30, 0x2B	; 43
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	88 23       	and	r24, r24
    2b5c:	dc f7       	brge	.-10     	; 0x2b54 <MCAL_USART_Receive_PollingMode+0x2e>

	/* Get status, if an error exists return -1 */
	status = UCSRA;
    2b5e:	eb e2       	ldi	r30, 0x2B	; 43
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	89 83       	std	Y+1, r24	; 0x01
	if(status & ((1<<FE)|(1<<DOR)|(1<<PE)))
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	88 2f       	mov	r24, r24
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	8c 71       	andi	r24, 0x1C	; 28
    2b6e:	90 70       	andi	r25, 0x00	; 0
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	19 f0       	breq	.+6      	; 0x2b7a <MCAL_USART_Receive_PollingMode+0x54>
	{
		return -1;
    2b74:	8f ef       	ldi	r24, 0xFF	; 255
    2b76:	8a 83       	std	Y+2, r24	; 0x02
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <MCAL_USART_Receive_PollingMode+0x5c>
	}

	/* Get and return received data from buffer */
	return UDR;
    2b7a:	ec e2       	ldi	r30, 0x2C	; 44
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8a 83       	std	Y+2, r24	; 0x02
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
#endif
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <MCAL_USART_Transmit_InterruptMode>:
   USART Transmit function in the interrupt mode
   When the transmission process is completed, an interrupt request will be
   fired and the program will switch the control to the dedicated ISR.
*/
void MCAL_USART_Transmit_InterruptMode(TxDataType Data, void (*Callback)(void))
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <MCAL_USART_Transmit_InterruptMode+0x6>
    2b94:	0f 92       	push	r0
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	7b 83       	std	Y+3, r23	; 0x03
    2b9e:	6a 83       	std	Y+2, r22	; 0x02
	/* Wait for empty transmit buffer */
	while ( !(GET_BIT(UCSRA,UDRE)) );
    2ba0:	eb e2       	ldi	r30, 0x2B	; 43
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	82 95       	swap	r24
    2ba8:	86 95       	lsr	r24
    2baa:	87 70       	andi	r24, 0x07	; 7
    2bac:	88 2f       	mov	r24, r24
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	81 70       	andi	r24, 0x01	; 1
    2bb2:	90 70       	andi	r25, 0x00	; 0
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	a1 f3       	breq	.-24     	; 0x2ba0 <MCAL_USART_Transmit_InterruptMode+0x12>

	/* Clear the transmission completed interrupt flag */
	SET_BIT(UCSRA,TXC);
    2bb8:	ab e2       	ldi	r26, 0x2B	; 43
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	eb e2       	ldi	r30, 0x2B	; 43
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 64       	ori	r24, 0x40	; 64
    2bc4:	8c 93       	st	X, r24

	/* Set the transmission completed interrupt request */
	SET_BIT(UCSRB,TXCIE);
    2bc6:	aa e2       	ldi	r26, 0x2A	; 42
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	ea e2       	ldi	r30, 0x2A	; 42
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	8c 93       	st	X, r24

	/* Assign the TXC_ISR to the callback function passed by the user */
	TXC_ISR = Callback;
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd8:	90 93 d2 02 	sts	0x02D2, r25
    2bdc:	80 93 d1 02 	sts	0x02D1, r24
		UCSRB |= (1<<TXB8);
	}
#endif

	/* Put data into buffer, and then send the data */
	UDR = Data;
    2be0:	ec e2       	ldi	r30, 0x2C	; 44
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	80 83       	st	Z, r24
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <MCAL_USART_Receive_InterruptMode>:
   USART Receive function in the interrupt mode
   When the reception process is completed, an interrupt request will be
   fired and the program will switch the control to the dedicated ISR.
*/
void MCAL_USART_Receive_InterruptMode(void (*Callback)(void))
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <MCAL_USART_Receive_InterruptMode+0x6>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
	/* Clear the reception completed interrupt flag */
	SET_BIT(UCSRA,RXC);
    2c02:	ab e2       	ldi	r26, 0x2B	; 43
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	eb e2       	ldi	r30, 0x2B	; 43
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	80 68       	ori	r24, 0x80	; 128
    2c0e:	8c 93       	st	X, r24

	/* Set the reception completed interrupt request */
	SET_BIT(UCSRB,RXCIE);
    2c10:	aa e2       	ldi	r26, 0x2A	; 42
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ea e2       	ldi	r30, 0x2A	; 42
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	80 68       	ori	r24, 0x80	; 128
    2c1c:	8c 93       	st	X, r24

	/* Assign the RXC_ISR to the callback function passed by the user */
	RXC_ISR = Callback;
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	90 93 d4 02 	sts	0x02D4, r25
    2c26:	80 93 d3 02 	sts	0x02D3, r24
}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <MCAL_USART_ReadUDR>:
/*
   Read the USART Data received from the buffer.
   This function is only used with the interrupt mode.
*/
RxDataType MCAL_USART_ReadUDR(void)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <MCAL_USART_ReadUDR+0x6>
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
	/* Filter the 9th bit, then return */
	resh = (resh >> 1) & 0x01;

	return ((resh << 8) | resl);
#else
	u8 status = UCSRA;
    2c3e:	eb e2       	ldi	r30, 0x2B	; 43
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	89 83       	std	Y+1, r24	; 0x01

	/* Get status, if an error exists return -1 */
	if(status & ((1<<FE)|(1<<DOR)|(1<<PE)))
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	8c 71       	andi	r24, 0x1C	; 28
    2c4e:	90 70       	andi	r25, 0x00	; 0
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	19 f0       	breq	.+6      	; 0x2c5a <MCAL_USART_ReadUDR+0x26>
	{
		return -1;
    2c54:	8f ef       	ldi	r24, 0xFF	; 255
    2c56:	8a 83       	std	Y+2, r24	; 0x02
    2c58:	04 c0       	rjmp	.+8      	; 0x2c62 <MCAL_USART_ReadUDR+0x2e>
	}

	/* Get and return received data from buffer */
	return UDR;
    2c5a:	ec e2       	ldi	r30, 0x2C	; 44
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8a 83       	std	Y+2, r24	; 0x02
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
#endif
}
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <__vector_15>:


/** ================== USART Transmission Complete ISR ===================== **/
void __vector_15(void) __attribute__((signal,used));
void __vector_15(void)
{
    2c6e:	1f 92       	push	r1
    2c70:	0f 92       	push	r0
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	0f 92       	push	r0
    2c76:	11 24       	eor	r1, r1
    2c78:	2f 93       	push	r18
    2c7a:	3f 93       	push	r19
    2c7c:	4f 93       	push	r20
    2c7e:	5f 93       	push	r21
    2c80:	6f 93       	push	r22
    2c82:	7f 93       	push	r23
    2c84:	8f 93       	push	r24
    2c86:	9f 93       	push	r25
    2c88:	af 93       	push	r26
    2c8a:	bf 93       	push	r27
    2c8c:	ef 93       	push	r30
    2c8e:	ff 93       	push	r31
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
	if( TXC_ISR != ((void*) 0) )
    2c98:	80 91 d1 02 	lds	r24, 0x02D1
    2c9c:	90 91 d2 02 	lds	r25, 0x02D2
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	29 f0       	breq	.+10     	; 0x2cae <__vector_15+0x40>
	{
		TXC_ISR();
    2ca4:	e0 91 d1 02 	lds	r30, 0x02D1
    2ca8:	f0 91 d2 02 	lds	r31, 0x02D2
    2cac:	09 95       	icall
	}
}
    2cae:	cf 91       	pop	r28
    2cb0:	df 91       	pop	r29
    2cb2:	ff 91       	pop	r31
    2cb4:	ef 91       	pop	r30
    2cb6:	bf 91       	pop	r27
    2cb8:	af 91       	pop	r26
    2cba:	9f 91       	pop	r25
    2cbc:	8f 91       	pop	r24
    2cbe:	7f 91       	pop	r23
    2cc0:	6f 91       	pop	r22
    2cc2:	5f 91       	pop	r21
    2cc4:	4f 91       	pop	r20
    2cc6:	3f 91       	pop	r19
    2cc8:	2f 91       	pop	r18
    2cca:	0f 90       	pop	r0
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	0f 90       	pop	r0
    2cd0:	1f 90       	pop	r1
    2cd2:	18 95       	reti

00002cd4 <__vector_14>:


/** =================== USART Data Register Empty ISR ====================== **/
void __vector_14(void) __attribute__((signal,used));
void __vector_14(void)
{
    2cd4:	1f 92       	push	r1
    2cd6:	0f 92       	push	r0
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	0f 92       	push	r0
    2cdc:	11 24       	eor	r1, r1
    2cde:	2f 93       	push	r18
    2ce0:	3f 93       	push	r19
    2ce2:	4f 93       	push	r20
    2ce4:	5f 93       	push	r21
    2ce6:	6f 93       	push	r22
    2ce8:	7f 93       	push	r23
    2cea:	8f 93       	push	r24
    2cec:	9f 93       	push	r25
    2cee:	af 93       	push	r26
    2cf0:	bf 93       	push	r27
    2cf2:	ef 93       	push	r30
    2cf4:	ff 93       	push	r31
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
	if( UDRE_ISR != ((void*) 0) )
    2cfe:	80 91 d5 02 	lds	r24, 0x02D5
    2d02:	90 91 d6 02 	lds	r25, 0x02D6
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	29 f0       	breq	.+10     	; 0x2d14 <__vector_14+0x40>
	{
		UDRE_ISR();
    2d0a:	e0 91 d5 02 	lds	r30, 0x02D5
    2d0e:	f0 91 d6 02 	lds	r31, 0x02D6
    2d12:	09 95       	icall
	}
}
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	ff 91       	pop	r31
    2d1a:	ef 91       	pop	r30
    2d1c:	bf 91       	pop	r27
    2d1e:	af 91       	pop	r26
    2d20:	9f 91       	pop	r25
    2d22:	8f 91       	pop	r24
    2d24:	7f 91       	pop	r23
    2d26:	6f 91       	pop	r22
    2d28:	5f 91       	pop	r21
    2d2a:	4f 91       	pop	r20
    2d2c:	3f 91       	pop	r19
    2d2e:	2f 91       	pop	r18
    2d30:	0f 90       	pop	r0
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	0f 90       	pop	r0
    2d36:	1f 90       	pop	r1
    2d38:	18 95       	reti

00002d3a <__vector_13>:


/** ==================== USART Reception Complete ISR ====================== **/
void __vector_13(void) __attribute__((signal,used));
void __vector_13(void)
{
    2d3a:	1f 92       	push	r1
    2d3c:	0f 92       	push	r0
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	0f 92       	push	r0
    2d42:	11 24       	eor	r1, r1
    2d44:	2f 93       	push	r18
    2d46:	3f 93       	push	r19
    2d48:	4f 93       	push	r20
    2d4a:	5f 93       	push	r21
    2d4c:	6f 93       	push	r22
    2d4e:	7f 93       	push	r23
    2d50:	8f 93       	push	r24
    2d52:	9f 93       	push	r25
    2d54:	af 93       	push	r26
    2d56:	bf 93       	push	r27
    2d58:	ef 93       	push	r30
    2d5a:	ff 93       	push	r31
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
	if( RXC_ISR != ((void*) 0) )
    2d64:	80 91 d3 02 	lds	r24, 0x02D3
    2d68:	90 91 d4 02 	lds	r25, 0x02D4
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	29 f0       	breq	.+10     	; 0x2d7a <__vector_13+0x40>
	{
		RXC_ISR();
    2d70:	e0 91 d3 02 	lds	r30, 0x02D3
    2d74:	f0 91 d4 02 	lds	r31, 0x02D4
    2d78:	09 95       	icall
	}
}
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	ff 91       	pop	r31
    2d80:	ef 91       	pop	r30
    2d82:	bf 91       	pop	r27
    2d84:	af 91       	pop	r26
    2d86:	9f 91       	pop	r25
    2d88:	8f 91       	pop	r24
    2d8a:	7f 91       	pop	r23
    2d8c:	6f 91       	pop	r22
    2d8e:	5f 91       	pop	r21
    2d90:	4f 91       	pop	r20
    2d92:	3f 91       	pop	r19
    2d94:	2f 91       	pop	r18
    2d96:	0f 90       	pop	r0
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	0f 90       	pop	r0
    2d9c:	1f 90       	pop	r1
    2d9e:	18 95       	reti

00002da0 <main>:
/** ========================================================================= */



int main(void)
{
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
	/* System Initialization */
	InitializeSystem();
    2da8:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <InitializeSystem>


	/* Program Introduction Message */
	USART_SendString(message);
    2dac:	8f ef       	ldi	r24, 0xFF	; 255
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>


	/* Enable the GIE */
	MCAL_GINT_SetGIE();
    2db4:	0e 94 bf 0a 	call	0x157e	; 0x157e <MCAL_GINT_SetGIE>


	while(1)
	{

		if(WaitingForInstruction_flag == 1)
    2db8:	80 91 d8 02 	lds	r24, 0x02D8
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	21 f4       	brne	.+8      	; 0x2dc8 <main+0x28>
		{
			MCAL_USART_Receive_InterruptMode(UpdateGetInstructionFlag);
    2dc0:	83 e4       	ldi	r24, 0x43	; 67
    2dc2:	9b e1       	ldi	r25, 0x1B	; 27
    2dc4:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <MCAL_USART_Receive_InterruptMode>
		}



		if(GetInstruction_flag == 1)
    2dc8:	80 91 d7 02 	lds	r24, 0x02D7
    2dcc:	81 30       	cpi	r24, 0x01	; 1
    2dce:	39 f4       	brne	.+14     	; 0x2dde <main+0x3e>
		{
			GetInstruction();
    2dd0:	0e 94 87 18 	call	0x310e	; 0x310e <GetInstruction>

			GetInstruction_flag = 0;
    2dd4:	10 92 d7 02 	sts	0x02D7, r1
			UpdateStatus_flag = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	80 93 cf 02 	sts	0x02CF, r24
		}



		if(UpdateStatus_flag == 1)
    2dde:	80 91 cf 02 	lds	r24, 0x02CF
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	49 f7       	brne	.-46     	; 0x2db8 <main+0x18>
		{
			MCAL_GINT_ClearGIE(); // Start of critical section
    2de6:	0e 94 cd 0a 	call	0x159a	; 0x159a <MCAL_GINT_ClearGIE>

			UpdateStatus();
    2dea:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <UpdateStatus>

			UpdateStatus_flag = 0;
    2dee:	10 92 cf 02 	sts	0x02CF, r1
			WaitingForInstruction_flag = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	80 93 d8 02 	sts	0x02D8, r24

			MCAL_GINT_SetGIE();  // End of critical section
    2df8:	0e 94 bf 0a 	call	0x157e	; 0x157e <MCAL_GINT_SetGIE>
    2dfc:	dd cf       	rjmp	.-70     	; 0x2db8 <main+0x18>

00002dfe <InitializeSystem>:



/* This function contains all the initialization required for the system. */
void InitializeSystem(void)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
	MCAL_USART_Init();
    2e06:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <MCAL_USART_Init>
	MCAL_SPI_MasterInit();
    2e0a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <MCAL_SPI_MasterInit>
	MCAL_DIO_voidSetPinMode(SLAVE_1, Output);
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	66 e0       	ldi	r22, 0x06	; 6
    2e12:	41 e0       	ldi	r20, 0x01	; 1
    2e14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(SLAVE_2, Output);
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	67 e0       	ldi	r22, 0x07	; 7
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	HAL_LCD_Init();
    2e22:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <HAL_LCD_Init>

	DEACTIVE_SLAVE_1;
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	66 e0       	ldi	r22, 0x06	; 6
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
	DEACTIVE_SLAVE_2;
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	67 e0       	ldi	r22, 0x07	; 7
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
}
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <USART_SendString>:



/* Send a string through the USART peripheral */
void USART_SendString(const u8 * String)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	00 d0       	rcall	.+0      	; 0x2e46 <USART_SendString+0x6>
    2e46:	0f 92       	push	r0
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	9b 83       	std	Y+3, r25	; 0x03
    2e4e:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i = 0; String[i] != '\0'; i++)
    2e50:	19 82       	std	Y+1, r1	; 0x01
    2e52:	10 c0       	rjmp	.+32     	; 0x2e74 <USART_SendString+0x34>
	{
		MCAL_USART_Transmit_PollingMode(String[i]);
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e2 0f       	add	r30, r18
    2e62:	f3 1f       	adc	r31, r19
    2e64:	80 81       	ld	r24, Z
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <MCAL_USART_Transmit_PollingMode>


/* Send a string through the USART peripheral */
void USART_SendString(const u8 * String)
{
	for(u8 i = 0; String[i] != '\0'; i++)
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7e:	fc 01       	movw	r30, r24
    2e80:	e2 0f       	add	r30, r18
    2e82:	f3 1f       	adc	r31, r19
    2e84:	80 81       	ld	r24, Z
    2e86:	88 23       	and	r24, r24
    2e88:	29 f7       	brne	.-54     	; 0x2e54 <USART_SendString+0x14>
	{
		MCAL_USART_Transmit_PollingMode(String[i]);
	}
}
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <UpdateStatus>:



/* Update the car status and show it on the LCD */
void UpdateStatus(void)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <UpdateStatus+0x6>
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62


	/* Show The Motor Status */
	HAL_LCD_WriteString((u8*)"Motor Status: ", 0, 0);
    2ea0:	80 e6       	ldi	r24, 0x60	; 96
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	60 e0       	ldi	r22, 0x00	; 0
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	switch(Motor_Status)
    2eac:	80 91 f8 01 	lds	r24, 0x01F8
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	3a 83       	std	Y+2, r19	; 0x02
    2eb6:	29 83       	std	Y+1, r18	; 0x01
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebc:	81 30       	cpi	r24, 0x01	; 1
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	b1 f0       	breq	.+44     	; 0x2eee <UpdateStatus+0x58>
    2ec2:	29 81       	ldd	r18, Y+1	; 0x01
    2ec4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ec6:	22 30       	cpi	r18, 0x02	; 2
    2ec8:	31 05       	cpc	r19, r1
    2eca:	f1 f0       	breq	.+60     	; 0x2f08 <UpdateStatus+0x72>
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	39 f5       	brne	.+78     	; 0x2f22 <UpdateStatus+0x8c>
	{
		case 0:
			HAL_LCD_WriteString((u8*)"              ", 0, 14);
    2ed4:	8f e6       	ldi	r24, 0x6F	; 111
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	4e e0       	ldi	r20, 0x0E	; 14
    2edc:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
			HAL_LCD_WriteString((u8*)"Turned Right", 0, 14);
    2ee0:	8e e7       	ldi	r24, 0x7E	; 126
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	4e e0       	ldi	r20, 0x0E	; 14
    2ee8:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    2eec:	26 c0       	rjmp	.+76     	; 0x2f3a <UpdateStatus+0xa4>
			break;


		case 1:
			HAL_LCD_WriteString((u8*)"              ", 0, 14);
    2eee:	8f e6       	ldi	r24, 0x6F	; 111
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	4e e0       	ldi	r20, 0x0E	; 14
    2ef6:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
			HAL_LCD_WriteString((u8*)"Turned Left", 0, 14);
    2efa:	8b e8       	ldi	r24, 0x8B	; 139
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	4e e0       	ldi	r20, 0x0E	; 14
    2f02:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    2f06:	19 c0       	rjmp	.+50     	; 0x2f3a <UpdateStatus+0xa4>
			break;


		case 2:
			HAL_LCD_WriteString((u8*)"              ", 0, 14);
    2f08:	8f e6       	ldi	r24, 0x6F	; 111
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	60 e0       	ldi	r22, 0x00	; 0
    2f0e:	4e e0       	ldi	r20, 0x0E	; 14
    2f10:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
			HAL_LCD_WriteString((u8*)"Moving Forward", 0, 14);
    2f14:	87 e9       	ldi	r24, 0x97	; 151
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	4e e0       	ldi	r20, 0x0E	; 14
    2f1c:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    2f20:	0c c0       	rjmp	.+24     	; 0x2f3a <UpdateStatus+0xa4>
			break;


		default:
			HAL_LCD_WriteString((u8*)"              ", 0, 14);
    2f22:	8f e6       	ldi	r24, 0x6F	; 111
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	4e e0       	ldi	r20, 0x0E	; 14
    2f2a:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
			HAL_LCD_WriteString((u8*)"Stopped", 0, 14);
    2f2e:	86 ea       	ldi	r24, 0xA6	; 166
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	60 e0       	ldi	r22, 0x00	; 0
    2f34:	4e e0       	ldi	r20, 0x0E	; 14
    2f36:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	}



	/* Show The Doors status */
	HAL_LCD_WriteString((u8*)"A: ", 0, 30);
    2f3a:	8e ea       	ldi	r24, 0xAE	; 174
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	4e e1       	ldi	r20, 0x1E	; 30
    2f42:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	HAL_LCD_WriteString((u8*)" ", 0, 33);
    2f46:	82 eb       	ldi	r24, 0xB2	; 178
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	41 e2       	ldi	r20, 0x21	; 33
    2f4e:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	if(A_State == '0') HAL_LCD_WriteString((u8*)"0", 0, 33);
    2f52:	80 91 fb 01 	lds	r24, 0x01FB
    2f56:	80 33       	cpi	r24, 0x30	; 48
    2f58:	39 f4       	brne	.+14     	; 0x2f68 <UpdateStatus+0xd2>
    2f5a:	84 eb       	ldi	r24, 0xB4	; 180
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	41 e2       	ldi	r20, 0x21	; 33
    2f62:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    2f66:	0a c0       	rjmp	.+20     	; 0x2f7c <UpdateStatus+0xe6>
	else if(A_State == '1') HAL_LCD_WriteString((u8*)"1", 0, 33);
    2f68:	80 91 fb 01 	lds	r24, 0x01FB
    2f6c:	81 33       	cpi	r24, 0x31	; 49
    2f6e:	31 f4       	brne	.+12     	; 0x2f7c <UpdateStatus+0xe6>
    2f70:	86 eb       	ldi	r24, 0xB6	; 182
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	41 e2       	ldi	r20, 0x21	; 33
    2f78:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>


	HAL_LCD_WriteString((u8*)"B: ", 1, 30);
    2f7c:	88 eb       	ldi	r24, 0xB8	; 184
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	61 e0       	ldi	r22, 0x01	; 1
    2f82:	4e e1       	ldi	r20, 0x1E	; 30
    2f84:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	HAL_LCD_WriteString((u8*)" ", 1, 33);
    2f88:	82 eb       	ldi	r24, 0xB2	; 178
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	61 e0       	ldi	r22, 0x01	; 1
    2f8e:	41 e2       	ldi	r20, 0x21	; 33
    2f90:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	if(B_State == '0') HAL_LCD_WriteString((u8*)"0", 1, 33);
    2f94:	80 91 fc 01 	lds	r24, 0x01FC
    2f98:	80 33       	cpi	r24, 0x30	; 48
    2f9a:	39 f4       	brne	.+14     	; 0x2faa <UpdateStatus+0x114>
    2f9c:	84 eb       	ldi	r24, 0xB4	; 180
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	41 e2       	ldi	r20, 0x21	; 33
    2fa4:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    2fa8:	0a c0       	rjmp	.+20     	; 0x2fbe <UpdateStatus+0x128>
	else if(B_State == '1') HAL_LCD_WriteString((u8*)"1", 1, 33);
    2faa:	80 91 fc 01 	lds	r24, 0x01FC
    2fae:	81 33       	cpi	r24, 0x31	; 49
    2fb0:	31 f4       	brne	.+12     	; 0x2fbe <UpdateStatus+0x128>
    2fb2:	86 eb       	ldi	r24, 0xB6	; 182
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	61 e0       	ldi	r22, 0x01	; 1
    2fb8:	41 e2       	ldi	r20, 0x21	; 33
    2fba:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>


	HAL_LCD_WriteString((u8*)"C: ", 0, 35);
    2fbe:	8c eb       	ldi	r24, 0xBC	; 188
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	43 e2       	ldi	r20, 0x23	; 35
    2fc6:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	HAL_LCD_WriteString((u8*)" ", 0, 38);
    2fca:	82 eb       	ldi	r24, 0xB2	; 178
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	46 e2       	ldi	r20, 0x26	; 38
    2fd2:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	if(C_State == '0') HAL_LCD_WriteString((u8*)"0", 0, 38);
    2fd6:	80 91 fd 01 	lds	r24, 0x01FD
    2fda:	80 33       	cpi	r24, 0x30	; 48
    2fdc:	39 f4       	brne	.+14     	; 0x2fec <UpdateStatus+0x156>
    2fde:	84 eb       	ldi	r24, 0xB4	; 180
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	46 e2       	ldi	r20, 0x26	; 38
    2fe6:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    2fea:	0a c0       	rjmp	.+20     	; 0x3000 <UpdateStatus+0x16a>
	else if(C_State == '1') HAL_LCD_WriteString((u8*)"1", 0, 38);
    2fec:	80 91 fd 01 	lds	r24, 0x01FD
    2ff0:	81 33       	cpi	r24, 0x31	; 49
    2ff2:	31 f4       	brne	.+12     	; 0x3000 <UpdateStatus+0x16a>
    2ff4:	86 eb       	ldi	r24, 0xB6	; 182
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	46 e2       	ldi	r20, 0x26	; 38
    2ffc:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>


	HAL_LCD_WriteString((u8*)"D: ", 1, 35);
    3000:	80 ec       	ldi	r24, 0xC0	; 192
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	61 e0       	ldi	r22, 0x01	; 1
    3006:	43 e2       	ldi	r20, 0x23	; 35
    3008:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	HAL_LCD_WriteString((u8*)" ", 1, 38);
    300c:	82 eb       	ldi	r24, 0xB2	; 178
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	46 e2       	ldi	r20, 0x26	; 38
    3014:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	if(D_State == '0') HAL_LCD_WriteString((u8*)"0", 1, 38);
    3018:	80 91 fe 01 	lds	r24, 0x01FE
    301c:	80 33       	cpi	r24, 0x30	; 48
    301e:	39 f4       	brne	.+14     	; 0x302e <UpdateStatus+0x198>
    3020:	84 eb       	ldi	r24, 0xB4	; 180
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	61 e0       	ldi	r22, 0x01	; 1
    3026:	46 e2       	ldi	r20, 0x26	; 38
    3028:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
    302c:	0a c0       	rjmp	.+20     	; 0x3042 <UpdateStatus+0x1ac>
	else if(D_State == '1') HAL_LCD_WriteString((u8*)"1", 1, 38);
    302e:	80 91 fe 01 	lds	r24, 0x01FE
    3032:	81 33       	cpi	r24, 0x31	; 49
    3034:	31 f4       	brne	.+12     	; 0x3042 <UpdateStatus+0x1ac>
    3036:	86 eb       	ldi	r24, 0xB6	; 182
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	61 e0       	ldi	r22, 0x01	; 1
    303c:	46 e2       	ldi	r20, 0x26	; 38
    303e:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>


	/* Show The Temperature Reading */
	HAL_LCD_WriteString((u8*)"Temperature: ", 1, 0);
    3042:	84 ec       	ldi	r24, 0xC4	; 196
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	61 e0       	ldi	r22, 0x01	; 1
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	sprintf((char*)TEMP,"%d",Temperature);
    304e:	20 91 f9 01 	lds	r18, 0x01F9
    3052:	30 91 fa 01 	lds	r19, 0x01FA
    3056:	00 d0       	rcall	.+0      	; 0x3058 <UpdateStatus+0x1c2>
    3058:	00 d0       	rcall	.+0      	; 0x305a <UpdateStatus+0x1c4>
    305a:	00 d0       	rcall	.+0      	; 0x305c <UpdateStatus+0x1c6>
    305c:	ed b7       	in	r30, 0x3d	; 61
    305e:	fe b7       	in	r31, 0x3e	; 62
    3060:	31 96       	adiw	r30, 0x01	; 1
    3062:	8c ed       	ldi	r24, 0xDC	; 220
    3064:	92 e0       	ldi	r25, 0x02	; 2
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	82 ed       	ldi	r24, 0xD2	; 210
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	93 83       	std	Z+3, r25	; 0x03
    3070:	82 83       	std	Z+2, r24	; 0x02
    3072:	35 83       	std	Z+5, r19	; 0x05
    3074:	24 83       	std	Z+4, r18	; 0x04
    3076:	0e 94 86 1b 	call	0x370c	; 0x370c <sprintf>
    307a:	2d b7       	in	r18, 0x3d	; 61
    307c:	3e b7       	in	r19, 0x3e	; 62
    307e:	2a 5f       	subi	r18, 0xFA	; 250
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	3e bf       	out	0x3e, r19	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	2d bf       	out	0x3d, r18	; 61
	HAL_LCD_WriteString((u8*)"   ", 1, 13);
    308c:	85 ed       	ldi	r24, 0xD5	; 213
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	4d e0       	ldi	r20, 0x0D	; 13
    3094:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	HAL_LCD_WriteString(TEMP, 1, 13);
    3098:	8c ed       	ldi	r24, 0xDC	; 220
    309a:	92 e0       	ldi	r25, 0x02	; 2
    309c:	61 e0       	ldi	r22, 0x01	; 1
    309e:	4d e0       	ldi	r20, 0x0D	; 13
    30a0:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>


	/* Show the car speed */
	HAL_LCD_WriteString((u8*)"Speed: ", 1, 18);
    30a4:	89 ed       	ldi	r24, 0xD9	; 217
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	61 e0       	ldi	r22, 0x01	; 1
    30aa:	42 e1       	ldi	r20, 0x12	; 18
    30ac:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	sprintf((char*)SPEED,"%d",Speed);
    30b0:	80 91 da 02 	lds	r24, 0x02DA
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	00 d0       	rcall	.+0      	; 0x30ba <UpdateStatus+0x224>
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <UpdateStatus+0x226>
    30bc:	00 d0       	rcall	.+0      	; 0x30be <UpdateStatus+0x228>
    30be:	ed b7       	in	r30, 0x3d	; 61
    30c0:	fe b7       	in	r31, 0x3e	; 62
    30c2:	31 96       	adiw	r30, 0x01	; 1
    30c4:	83 ee       	ldi	r24, 0xE3	; 227
    30c6:	92 e0       	ldi	r25, 0x02	; 2
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	82 ed       	ldi	r24, 0xD2	; 210
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	93 83       	std	Z+3, r25	; 0x03
    30d2:	82 83       	std	Z+2, r24	; 0x02
    30d4:	35 83       	std	Z+5, r19	; 0x05
    30d6:	24 83       	std	Z+4, r18	; 0x04
    30d8:	0e 94 86 1b 	call	0x370c	; 0x370c <sprintf>
    30dc:	8d b7       	in	r24, 0x3d	; 61
    30de:	9e b7       	in	r25, 0x3e	; 62
    30e0:	06 96       	adiw	r24, 0x06	; 6
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	9e bf       	out	0x3e, r25	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	8d bf       	out	0x3d, r24	; 61
	HAL_LCD_WriteString((u8*)"   ", 1, 25);
    30ec:	85 ed       	ldi	r24, 0xD5	; 213
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	49 e1       	ldi	r20, 0x19	; 25
    30f4:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
	HAL_LCD_WriteString(SPEED, 1, 25);
    30f8:	83 ee       	ldi	r24, 0xE3	; 227
    30fa:	92 e0       	ldi	r25, 0x02	; 2
    30fc:	61 e0       	ldi	r22, 0x01	; 1
    30fe:	49 e1       	ldi	r20, 0x19	; 25
    3100:	0e 94 a5 12 	call	0x254a	; 0x254a <HAL_LCD_WriteString>
}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <GetInstruction>:



/* */
void GetInstruction(void)
{
    310e:	df 93       	push	r29
    3110:	cf 93       	push	r28
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	6f 97       	sbiw	r28, 0x1f	; 31
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	de bf       	out	0x3e, r29	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	cd bf       	out	0x3d, r28	; 61
	/* Read The Entered Instruction */
	Instruction = MCAL_USART_ReadUDR();
    3122:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <MCAL_USART_ReadUDR>
    3126:	80 93 e7 02 	sts	0x02E7, r24
	 * 1 - M (for Move motors) + Direction (F: Forward, R: Turn Right, L: Turn Left).
	 * 2 - S (for Stop motors).
	 * 3 - D (for Door options) + Door selection (A, B, C, or D) + (1) for open, or (0) for close.
	 */

	switch(Instruction)
    312a:	80 91 e7 02 	lds	r24, 0x02E7
    312e:	28 2f       	mov	r18, r24
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	3f 8f       	std	Y+31, r19	; 0x1f
    3134:	2e 8f       	std	Y+30, r18	; 0x1e
    3136:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3138:	9f 8d       	ldd	r25, Y+31	; 0x1f
    313a:	8d 34       	cpi	r24, 0x4D	; 77
    313c:	91 05       	cpc	r25, r1
    313e:	c9 f0       	breq	.+50     	; 0x3172 <GetInstruction+0x64>
    3140:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3142:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3144:	2e 34       	cpi	r18, 0x4E	; 78
    3146:	31 05       	cpc	r19, r1
    3148:	3c f4       	brge	.+14     	; 0x3158 <GetInstruction+0x4a>
    314a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    314c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    314e:	84 34       	cpi	r24, 0x44	; 68
    3150:	91 05       	cpc	r25, r1
    3152:	09 f4       	brne	.+2      	; 0x3156 <GetInstruction+0x48>
    3154:	ef c0       	rjmp	.+478    	; 0x3334 <GetInstruction+0x226>
    3156:	8a c2       	rjmp	.+1300   	; 0x366c <GetInstruction+0x55e>
    3158:	2e 8d       	ldd	r18, Y+30	; 0x1e
    315a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    315c:	23 35       	cpi	r18, 0x53	; 83
    315e:	31 05       	cpc	r19, r1
    3160:	09 f4       	brne	.+2      	; 0x3164 <GetInstruction+0x56>
    3162:	c4 c0       	rjmp	.+392    	; 0x32ec <GetInstruction+0x1de>
    3164:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3166:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3168:	84 35       	cpi	r24, 0x54	; 84
    316a:	91 05       	cpc	r25, r1
    316c:	09 f4       	brne	.+2      	; 0x3170 <GetInstruction+0x62>
    316e:	73 c1       	rjmp	.+742    	; 0x3456 <GetInstruction+0x348>
    3170:	7d c2       	rjmp	.+1274   	; 0x366c <GetInstruction+0x55e>
	{
		case 'M':    // Move the motors

			USART_SendString((u8*)"\rPlease, enter the direction of movement: ");
    3172:	81 ee       	ldi	r24, 0xE1	; 225
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
			Direction = MCAL_USART_Receive_PollingMode();    // L or R or F
    317a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    317e:	80 93 d9 02 	sts	0x02D9, r24
			USART_SendString((u8*)"\rPlease, enter the speed (from 0 to 9): ");
    3182:	8c e0       	ldi	r24, 0x0C	; 12
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
			u8 d1 = MCAL_USART_Receive_PollingMode();
    318a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    318e:	8d 8f       	std	Y+29, r24	; 0x1d
			//u8 d0 = MCAL_USART_Receive_PollingMode();

			Speed = ((d1 - 48) * 20);
    3190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3192:	88 2f       	mov	r24, r24
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9c 01       	movw	r18, r24
    3198:	22 0f       	add	r18, r18
    319a:	33 1f       	adc	r19, r19
    319c:	22 0f       	add	r18, r18
    319e:	33 1f       	adc	r19, r19
    31a0:	c9 01       	movw	r24, r18
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	82 0f       	add	r24, r18
    31ac:	93 1f       	adc	r25, r19
    31ae:	80 5c       	subi	r24, 0xC0	; 192
    31b0:	80 93 da 02 	sts	0x02DA, r24


			if(Direction == 'R')
    31b4:	80 91 d9 02 	lds	r24, 0x02D9
    31b8:	82 35       	cpi	r24, 0x52	; 82
    31ba:	59 f5       	brne	.+86     	; 0x3212 <GetInstruction+0x104>
			{
				Motor_Status = 0;    // Turn Right
    31bc:	10 92 f8 01 	sts	0x01F8, r1

				ACTIVE_SLAVE_2;
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	67 e0       	ldi	r22, 0x07	; 7
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    31ca:	80 91 e7 02 	lds	r24, 0x02E7
    31ce:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Direction);
    31d2:	80 91 d9 02 	lds	r24, 0x02D9
    31d6:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Speed);
    31da:	80 91 da 02 	lds	r24, 0x02DA
    31de:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_2;
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	67 e0       	ldi	r22, 0x07	; 7
    31e6:	41 e0       	ldi	r20, 0x01	; 1
    31e8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

				ACTIVE_SLAVE_1;
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	66 e0       	ldi	r22, 0x06	; 6
    31f0:	40 e0       	ldi	r20, 0x00	; 0
    31f2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    31f6:	80 91 e7 02 	lds	r24, 0x02E7
    31fa:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Direction);
    31fe:	80 91 d9 02 	lds	r24, 0x02D9
    3202:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_1;
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	66 e0       	ldi	r22, 0x06	; 6
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    3210:	68 c0       	rjmp	.+208    	; 0x32e2 <GetInstruction+0x1d4>

			}

			else if(Direction == 'L')
    3212:	80 91 d9 02 	lds	r24, 0x02D9
    3216:	8c 34       	cpi	r24, 0x4C	; 76
    3218:	61 f5       	brne	.+88     	; 0x3272 <GetInstruction+0x164>
			{
				Motor_Status = 1;    // Turn Left
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	80 93 f8 01 	sts	0x01F8, r24

				ACTIVE_SLAVE_2;
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	67 e0       	ldi	r22, 0x07	; 7
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    322a:	80 91 e7 02 	lds	r24, 0x02E7
    322e:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Direction);
    3232:	80 91 d9 02 	lds	r24, 0x02D9
    3236:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_2;
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	67 e0       	ldi	r22, 0x07	; 7
    323e:	41 e0       	ldi	r20, 0x01	; 1
    3240:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

				ACTIVE_SLAVE_1;
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	66 e0       	ldi	r22, 0x06	; 6
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    324e:	80 91 e7 02 	lds	r24, 0x02E7
    3252:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Direction);
    3256:	80 91 d9 02 	lds	r24, 0x02D9
    325a:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Speed);
    325e:	80 91 da 02 	lds	r24, 0x02DA
    3262:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_1;
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	66 e0       	ldi	r22, 0x06	; 6
    326a:	41 e0       	ldi	r20, 0x01	; 1
    326c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    3270:	38 c0       	rjmp	.+112    	; 0x32e2 <GetInstruction+0x1d4>

			}

			else if(Direction == 'F')
    3272:	80 91 d9 02 	lds	r24, 0x02D9
    3276:	86 34       	cpi	r24, 0x46	; 70
    3278:	81 f5       	brne	.+96     	; 0x32da <GetInstruction+0x1cc>
			{
				Motor_Status = 2;        // Move Forward
    327a:	82 e0       	ldi	r24, 0x02	; 2
    327c:	80 93 f8 01 	sts	0x01F8, r24

				ACTIVE_SLAVE_2;
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	67 e0       	ldi	r22, 0x07	; 7
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    328a:	80 91 e7 02 	lds	r24, 0x02E7
    328e:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Direction);
    3292:	80 91 d9 02 	lds	r24, 0x02D9
    3296:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Speed);
    329a:	80 91 da 02 	lds	r24, 0x02DA
    329e:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_2;
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	67 e0       	ldi	r22, 0x07	; 7
    32a6:	41 e0       	ldi	r20, 0x01	; 1
    32a8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

				ACTIVE_SLAVE_1;
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	66 e0       	ldi	r22, 0x06	; 6
    32b0:	40 e0       	ldi	r20, 0x00	; 0
    32b2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    32b6:	80 91 e7 02 	lds	r24, 0x02E7
    32ba:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Direction);
    32be:	80 91 d9 02 	lds	r24, 0x02D9
    32c2:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Speed);
    32c6:	80 91 da 02 	lds	r24, 0x02DA
    32ca:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_1;
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	66 e0       	ldi	r22, 0x06	; 6
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    32d8:	04 c0       	rjmp	.+8      	; 0x32e2 <GetInstruction+0x1d4>

			}

			else    // Wrong Selection
			{
				USART_SendString((u8*)"\rThis instruction is not valid.");
    32da:	85 e3       	ldi	r24, 0x35	; 53
    32dc:	91 e0       	ldi	r25, 0x01	; 1
    32de:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
			}

			USART_SendString((u8*)"\r> ");
    32e2:	85 e5       	ldi	r24, 0x55	; 85
    32e4:	91 e0       	ldi	r25, 0x01	; 1
    32e6:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
    32ea:	c4 c1       	rjmp	.+904    	; 0x3674 <GetInstruction+0x566>
		break;


		case 'S':    // Stop the motors movement

			Motor_Status = 3;    // Stop the motors
    32ec:	83 e0       	ldi	r24, 0x03	; 3
    32ee:	80 93 f8 01 	sts	0x01F8, r24

			ACTIVE_SLAVE_2;
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	67 e0       	ldi	r22, 0x07	; 7
    32f6:	40 e0       	ldi	r20, 0x00	; 0
    32f8:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
			MCAL_SPI_MasterTransmit(Instruction);
    32fc:	80 91 e7 02 	lds	r24, 0x02E7
    3300:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
			DEACTIVE_SLAVE_2;
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	67 e0       	ldi	r22, 0x07	; 7
    3308:	41 e0       	ldi	r20, 0x01	; 1
    330a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

			ACTIVE_SLAVE_1;
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	66 e0       	ldi	r22, 0x06	; 6
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
			MCAL_SPI_MasterTransmit(Instruction);
    3318:	80 91 e7 02 	lds	r24, 0x02E7
    331c:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
			DEACTIVE_SLAVE_1;
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	66 e0       	ldi	r22, 0x06	; 6
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

			USART_SendString((u8*)"\r> ");
    332a:	85 e5       	ldi	r24, 0x55	; 85
    332c:	91 e0       	ldi	r25, 0x01	; 1
    332e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
    3332:	a0 c1       	rjmp	.+832    	; 0x3674 <GetInstruction+0x566>
		break;


		case 'D':    // Door options

			USART_SendString((u8*)"\rPlease, enter the door ID: ");
    3334:	89 e5       	ldi	r24, 0x59	; 89
    3336:	91 e0       	ldi	r25, 0x01	; 1
    3338:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>

			Door  = MCAL_USART_Receive_PollingMode();    // A, B, C or D
    333c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    3340:	80 93 e2 02 	sts	0x02E2, r24

			USART_SendString((u8*)"\rEnter (1) to open the door, (0) to close the door: ");
    3344:	86 e7       	ldi	r24, 0x76	; 118
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>

			if(Door == 'A')         // Door A
    334c:	80 91 e2 02 	lds	r24, 0x02E2
    3350:	81 34       	cpi	r24, 0x41	; 65
    3352:	d9 f4       	brne	.+54     	; 0x338a <GetInstruction+0x27c>
			{
				A_State = MCAL_USART_Receive_PollingMode();
    3354:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    3358:	80 93 fb 01 	sts	0x01FB, r24

				ACTIVE_SLAVE_1;
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	66 e0       	ldi	r22, 0x06	; 6
    3360:	40 e0       	ldi	r20, 0x00	; 0
    3362:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    3366:	80 91 e7 02 	lds	r24, 0x02E7
    336a:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Door);
    336e:	80 91 e2 02 	lds	r24, 0x02E2
    3372:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(A_State);
    3376:	80 91 fb 01 	lds	r24, 0x01FB
    337a:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_1
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	66 e0       	ldi	r22, 0x06	; 6
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    3388:	61 c0       	rjmp	.+194    	; 0x344c <GetInstruction+0x33e>
			}

			else if(Door == 'B')    // Door B
    338a:	80 91 e2 02 	lds	r24, 0x02E2
    338e:	82 34       	cpi	r24, 0x42	; 66
    3390:	d9 f4       	brne	.+54     	; 0x33c8 <GetInstruction+0x2ba>
			{
				B_State = MCAL_USART_Receive_PollingMode();
    3392:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    3396:	80 93 fc 01 	sts	0x01FC, r24

				ACTIVE_SLAVE_1;
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	66 e0       	ldi	r22, 0x06	; 6
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    33a4:	80 91 e7 02 	lds	r24, 0x02E7
    33a8:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Door);
    33ac:	80 91 e2 02 	lds	r24, 0x02E2
    33b0:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(B_State);
    33b4:	80 91 fc 01 	lds	r24, 0x01FC
    33b8:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_1
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	66 e0       	ldi	r22, 0x06	; 6
    33c0:	41 e0       	ldi	r20, 0x01	; 1
    33c2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    33c6:	42 c0       	rjmp	.+132    	; 0x344c <GetInstruction+0x33e>
			}

			else if(Door == 'C')    // Door C
    33c8:	80 91 e2 02 	lds	r24, 0x02E2
    33cc:	83 34       	cpi	r24, 0x43	; 67
    33ce:	d9 f4       	brne	.+54     	; 0x3406 <GetInstruction+0x2f8>
			{
				C_State = MCAL_USART_Receive_PollingMode();
    33d0:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    33d4:	80 93 fd 01 	sts	0x01FD, r24

				ACTIVE_SLAVE_2;
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	67 e0       	ldi	r22, 0x07	; 7
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    33e2:	80 91 e7 02 	lds	r24, 0x02E7
    33e6:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Door);
    33ea:	80 91 e2 02 	lds	r24, 0x02E2
    33ee:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(C_State);
    33f2:	80 91 fd 01 	lds	r24, 0x01FD
    33f6:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_2
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	67 e0       	ldi	r22, 0x07	; 7
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    3404:	23 c0       	rjmp	.+70     	; 0x344c <GetInstruction+0x33e>
			}

			else if(Door == 'D')    // Door D
    3406:	80 91 e2 02 	lds	r24, 0x02E2
    340a:	84 34       	cpi	r24, 0x44	; 68
    340c:	d9 f4       	brne	.+54     	; 0x3444 <GetInstruction+0x336>
			{
				D_State = MCAL_USART_Receive_PollingMode();
    340e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <MCAL_USART_Receive_PollingMode>
    3412:	80 93 fe 01 	sts	0x01FE, r24

				ACTIVE_SLAVE_2;
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	67 e0       	ldi	r22, 0x07	; 7
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
				MCAL_SPI_MasterTransmit(Instruction);
    3420:	80 91 e7 02 	lds	r24, 0x02E7
    3424:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(Door);
    3428:	80 91 e2 02 	lds	r24, 0x02E2
    342c:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				MCAL_SPI_MasterTransmit(D_State);
    3430:	80 91 fe 01 	lds	r24, 0x01FE
    3434:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
				DEACTIVE_SLAVE_2;
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	67 e0       	ldi	r22, 0x07	; 7
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
    3442:	04 c0       	rjmp	.+8      	; 0x344c <GetInstruction+0x33e>
			}

			else    // Wrong Selection
			{
				USART_SendString((u8*)"\rThis instruction is not valid.");
    3444:	85 e3       	ldi	r24, 0x35	; 53
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
			}

			USART_SendString((u8*)"\r> ");
    344c:	85 e5       	ldi	r24, 0x55	; 85
    344e:	91 e0       	ldi	r25, 0x01	; 1
    3450:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
    3454:	0f c1       	rjmp	.+542    	; 0x3674 <GetInstruction+0x566>
		break;


		case 'T':
			ACTIVE_SLAVE_1;
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	66 e0       	ldi	r22, 0x06	; 6
    345a:	40 e0       	ldi	r20, 0x00	; 0
    345c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>
			MCAL_SPI_MasterTransmit(Instruction);
    3460:	80 91 e7 02 	lds	r24, 0x02E7
    3464:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
			Temperature = MCAL_SPI_SlaveReceive();
    3468:	0e 94 c4 14 	call	0x2988	; 0x2988 <MCAL_SPI_SlaveReceive>
    346c:	88 2f       	mov	r24, r24
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	90 93 fa 01 	sts	0x01FA, r25
    3474:	80 93 f9 01 	sts	0x01F9, r24
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	a8 e4       	ldi	r26, 0x48	; 72
    347e:	b2 e4       	ldi	r27, 0x42	; 66
    3480:	89 8f       	std	Y+25, r24	; 0x19
    3482:	9a 8f       	std	Y+26, r25	; 0x1a
    3484:	ab 8f       	std	Y+27, r26	; 0x1b
    3486:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3488:	69 8d       	ldd	r22, Y+25	; 0x19
    348a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    348c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    348e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	4a e7       	ldi	r20, 0x7A	; 122
    3496:	53 e4       	ldi	r21, 0x43	; 67
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	8d 8b       	std	Y+21, r24	; 0x15
    34a2:	9e 8b       	std	Y+22, r25	; 0x16
    34a4:	af 8b       	std	Y+23, r26	; 0x17
    34a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34a8:	6d 89       	ldd	r22, Y+21	; 0x15
    34aa:	7e 89       	ldd	r23, Y+22	; 0x16
    34ac:	8f 89       	ldd	r24, Y+23	; 0x17
    34ae:	98 8d       	ldd	r25, Y+24	; 0x18
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e8       	ldi	r20, 0x80	; 128
    34b6:	5f e3       	ldi	r21, 0x3F	; 63
    34b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34bc:	88 23       	and	r24, r24
    34be:	2c f4       	brge	.+10     	; 0x34ca <GetInstruction+0x3bc>
		__ticks = 1;
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	9c 8b       	std	Y+20, r25	; 0x14
    34c6:	8b 8b       	std	Y+19, r24	; 0x13
    34c8:	3f c0       	rjmp	.+126    	; 0x3548 <GetInstruction+0x43a>
	else if (__tmp > 65535)
    34ca:	6d 89       	ldd	r22, Y+21	; 0x15
    34cc:	7e 89       	ldd	r23, Y+22	; 0x16
    34ce:	8f 89       	ldd	r24, Y+23	; 0x17
    34d0:	98 8d       	ldd	r25, Y+24	; 0x18
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	3f ef       	ldi	r19, 0xFF	; 255
    34d6:	4f e7       	ldi	r20, 0x7F	; 127
    34d8:	57 e4       	ldi	r21, 0x47	; 71
    34da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34de:	18 16       	cp	r1, r24
    34e0:	4c f5       	brge	.+82     	; 0x3534 <GetInstruction+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e2:	69 8d       	ldd	r22, Y+25	; 0x19
    34e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e2       	ldi	r20, 0x20	; 32
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9c 8b       	std	Y+20, r25	; 0x14
    3508:	8b 8b       	std	Y+19, r24	; 0x13
    350a:	0f c0       	rjmp	.+30     	; 0x352a <GetInstruction+0x41c>
    350c:	89 e1       	ldi	r24, 0x19	; 25
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9a 8b       	std	Y+18, r25	; 0x12
    3512:	89 8b       	std	Y+17, r24	; 0x11
    3514:	89 89       	ldd	r24, Y+17	; 0x11
    3516:	9a 89       	ldd	r25, Y+18	; 0x12
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <GetInstruction+0x40a>
    351c:	9a 8b       	std	Y+18, r25	; 0x12
    351e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3520:	8b 89       	ldd	r24, Y+19	; 0x13
    3522:	9c 89       	ldd	r25, Y+20	; 0x14
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	9c 8b       	std	Y+20, r25	; 0x14
    3528:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352a:	8b 89       	ldd	r24, Y+19	; 0x13
    352c:	9c 89       	ldd	r25, Y+20	; 0x14
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	69 f7       	brne	.-38     	; 0x350c <GetInstruction+0x3fe>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <GetInstruction+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3534:	6d 89       	ldd	r22, Y+21	; 0x15
    3536:	7e 89       	ldd	r23, Y+22	; 0x16
    3538:	8f 89       	ldd	r24, Y+23	; 0x17
    353a:	98 8d       	ldd	r25, Y+24	; 0x18
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	9c 8b       	std	Y+20, r25	; 0x14
    3546:	8b 8b       	std	Y+19, r24	; 0x13
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	98 8b       	std	Y+16, r25	; 0x10
    354e:	8f 87       	std	Y+15, r24	; 0x0f
    3550:	8f 85       	ldd	r24, Y+15	; 0x0f
    3552:	98 89       	ldd	r25, Y+16	; 0x10
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <GetInstruction+0x446>
    3558:	98 8b       	std	Y+16, r25	; 0x10
    355a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			MCAL_SPI_MasterTransmit(Instruction);
    355c:	80 91 e7 02 	lds	r24, 0x02E7
    3560:	0e 94 b0 14 	call	0x2960	; 0x2960 <MCAL_SPI_MasterTransmit>
			Temperature = MCAL_SPI_SlaveReceive();
    3564:	0e 94 c4 14 	call	0x2988	; 0x2988 <MCAL_SPI_SlaveReceive>
    3568:	88 2f       	mov	r24, r24
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	90 93 fa 01 	sts	0x01FA, r25
    3570:	80 93 f9 01 	sts	0x01F9, r24
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	a8 e4       	ldi	r26, 0x48	; 72
    357a:	b2 e4       	ldi	r27, 0x42	; 66
    357c:	8b 87       	std	Y+11, r24	; 0x0b
    357e:	9c 87       	std	Y+12, r25	; 0x0c
    3580:	ad 87       	std	Y+13, r26	; 0x0d
    3582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	4a e7       	ldi	r20, 0x7A	; 122
    3592:	53 e4       	ldi	r21, 0x43	; 67
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	8f 83       	std	Y+7, r24	; 0x07
    359e:	98 87       	std	Y+8, r25	; 0x08
    35a0:	a9 87       	std	Y+9, r26	; 0x09
    35a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a4:	6f 81       	ldd	r22, Y+7	; 0x07
    35a6:	78 85       	ldd	r23, Y+8	; 0x08
    35a8:	89 85       	ldd	r24, Y+9	; 0x09
    35aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e8       	ldi	r20, 0x80	; 128
    35b2:	5f e3       	ldi	r21, 0x3F	; 63
    35b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35b8:	88 23       	and	r24, r24
    35ba:	2c f4       	brge	.+10     	; 0x35c6 <GetInstruction+0x4b8>
		__ticks = 1;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	3f c0       	rjmp	.+126    	; 0x3644 <GetInstruction+0x536>
	else if (__tmp > 65535)
    35c6:	6f 81       	ldd	r22, Y+7	; 0x07
    35c8:	78 85       	ldd	r23, Y+8	; 0x08
    35ca:	89 85       	ldd	r24, Y+9	; 0x09
    35cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	3f ef       	ldi	r19, 0xFF	; 255
    35d2:	4f e7       	ldi	r20, 0x7F	; 127
    35d4:	57 e4       	ldi	r21, 0x47	; 71
    35d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35da:	18 16       	cp	r1, r24
    35dc:	4c f5       	brge	.+82     	; 0x3630 <GetInstruction+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35de:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	0f c0       	rjmp	.+30     	; 0x3626 <GetInstruction+0x518>
    3608:	89 e1       	ldi	r24, 0x19	; 25
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	9c 83       	std	Y+4, r25	; 0x04
    360e:	8b 83       	std	Y+3, r24	; 0x03
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	9c 81       	ldd	r25, Y+4	; 0x04
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <GetInstruction+0x506>
    3618:	9c 83       	std	Y+4, r25	; 0x04
    361a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	69 f7       	brne	.-38     	; 0x3608 <GetInstruction+0x4fa>
    362e:	14 c0       	rjmp	.+40     	; 0x3658 <GetInstruction+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3630:	6f 81       	ldd	r22, Y+7	; 0x07
    3632:	78 85       	ldd	r23, Y+8	; 0x08
    3634:	89 85       	ldd	r24, Y+9	; 0x09
    3636:	9a 85       	ldd	r25, Y+10	; 0x0a
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	8d 81       	ldd	r24, Y+5	; 0x05
    3646:	9e 81       	ldd	r25, Y+6	; 0x06
    3648:	9a 83       	std	Y+2, r25	; 0x02
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	f1 f7       	brne	.-4      	; 0x3650 <GetInstruction+0x542>
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			DEACTIVE_SLAVE_1;
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	66 e0       	ldi	r22, 0x06	; 6
    365c:	41 e0       	ldi	r20, 0x01	; 1
    365e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <MCAL_DIO_voidWritePin>

			USART_SendString((u8*)"\r> ");
    3662:	85 e5       	ldi	r24, 0x55	; 85
    3664:	91 e0       	ldi	r25, 0x01	; 1
    3666:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <GetInstruction+0x566>
		break;


		default:    // Wrong Instruction

			USART_SendString((u8*)"\rThis instruction is not valid. "
    366c:	8b ea       	ldi	r24, 0xAB	; 171
    366e:	91 e0       	ldi	r25, 0x01	; 1
    3670:	0e 94 20 17 	call	0x2e40	; 0x2e40 <USART_SendString>
					              "Please enter a valid instruction.\r> ");
	}

}
    3674:	6f 96       	adiw	r28, 0x1f	; 31
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	cd bf       	out	0x3d, r28	; 61
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <UpdateGetInstructionFlag>:


/* */
void UpdateGetInstructionFlag(void)
{
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
	GetInstruction_flag = 1;
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	80 93 d7 02 	sts	0x02D7, r24
	WaitingForInstruction_flag = 0;
    3694:	10 92 d8 02 	sts	0x02D8, r1
}
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	08 95       	ret

0000369e <__prologue_saves__>:
    369e:	2f 92       	push	r2
    36a0:	3f 92       	push	r3
    36a2:	4f 92       	push	r4
    36a4:	5f 92       	push	r5
    36a6:	6f 92       	push	r6
    36a8:	7f 92       	push	r7
    36aa:	8f 92       	push	r8
    36ac:	9f 92       	push	r9
    36ae:	af 92       	push	r10
    36b0:	bf 92       	push	r11
    36b2:	cf 92       	push	r12
    36b4:	df 92       	push	r13
    36b6:	ef 92       	push	r14
    36b8:	ff 92       	push	r15
    36ba:	0f 93       	push	r16
    36bc:	1f 93       	push	r17
    36be:	cf 93       	push	r28
    36c0:	df 93       	push	r29
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	ca 1b       	sub	r28, r26
    36c8:	db 0b       	sbc	r29, r27
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	09 94       	ijmp

000036d6 <__epilogue_restores__>:
    36d6:	2a 88       	ldd	r2, Y+18	; 0x12
    36d8:	39 88       	ldd	r3, Y+17	; 0x11
    36da:	48 88       	ldd	r4, Y+16	; 0x10
    36dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    36de:	6e 84       	ldd	r6, Y+14	; 0x0e
    36e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    36e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    36e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    36e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    36e8:	b9 84       	ldd	r11, Y+9	; 0x09
    36ea:	c8 84       	ldd	r12, Y+8	; 0x08
    36ec:	df 80       	ldd	r13, Y+7	; 0x07
    36ee:	ee 80       	ldd	r14, Y+6	; 0x06
    36f0:	fd 80       	ldd	r15, Y+5	; 0x05
    36f2:	0c 81       	ldd	r16, Y+4	; 0x04
    36f4:	1b 81       	ldd	r17, Y+3	; 0x03
    36f6:	aa 81       	ldd	r26, Y+2	; 0x02
    36f8:	b9 81       	ldd	r27, Y+1	; 0x01
    36fa:	ce 0f       	add	r28, r30
    36fc:	d1 1d       	adc	r29, r1
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	ed 01       	movw	r28, r26
    370a:	08 95       	ret

0000370c <sprintf>:
    370c:	ae e0       	ldi	r26, 0x0E	; 14
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	ec e8       	ldi	r30, 0x8C	; 140
    3712:	fb e1       	ldi	r31, 0x1B	; 27
    3714:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__+0x1c>
    3718:	0d 89       	ldd	r16, Y+21	; 0x15
    371a:	1e 89       	ldd	r17, Y+22	; 0x16
    371c:	86 e0       	ldi	r24, 0x06	; 6
    371e:	8c 83       	std	Y+4, r24	; 0x04
    3720:	1a 83       	std	Y+2, r17	; 0x02
    3722:	09 83       	std	Y+1, r16	; 0x01
    3724:	8f ef       	ldi	r24, 0xFF	; 255
    3726:	9f e7       	ldi	r25, 0x7F	; 127
    3728:	9e 83       	std	Y+6, r25	; 0x06
    372a:	8d 83       	std	Y+5, r24	; 0x05
    372c:	9e 01       	movw	r18, r28
    372e:	27 5e       	subi	r18, 0xE7	; 231
    3730:	3f 4f       	sbci	r19, 0xFF	; 255
    3732:	ce 01       	movw	r24, r28
    3734:	01 96       	adiw	r24, 0x01	; 1
    3736:	6f 89       	ldd	r22, Y+23	; 0x17
    3738:	78 8d       	ldd	r23, Y+24	; 0x18
    373a:	a9 01       	movw	r20, r18
    373c:	0e 94 aa 1b 	call	0x3754	; 0x3754 <vfprintf>
    3740:	2f 81       	ldd	r18, Y+7	; 0x07
    3742:	38 85       	ldd	r19, Y+8	; 0x08
    3744:	02 0f       	add	r16, r18
    3746:	13 1f       	adc	r17, r19
    3748:	f8 01       	movw	r30, r16
    374a:	10 82       	st	Z, r1
    374c:	2e 96       	adiw	r28, 0x0e	; 14
    374e:	e4 e0       	ldi	r30, 0x04	; 4
    3750:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__+0x1c>

00003754 <vfprintf>:
    3754:	ab e0       	ldi	r26, 0x0B	; 11
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	e0 eb       	ldi	r30, 0xB0	; 176
    375a:	fb e1       	ldi	r31, 0x1B	; 27
    375c:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__>
    3760:	3c 01       	movw	r6, r24
    3762:	2b 01       	movw	r4, r22
    3764:	5a 01       	movw	r10, r20
    3766:	fc 01       	movw	r30, r24
    3768:	17 82       	std	Z+7, r1	; 0x07
    376a:	16 82       	std	Z+6, r1	; 0x06
    376c:	83 81       	ldd	r24, Z+3	; 0x03
    376e:	81 fd       	sbrc	r24, 1
    3770:	03 c0       	rjmp	.+6      	; 0x3778 <vfprintf+0x24>
    3772:	6f ef       	ldi	r22, 0xFF	; 255
    3774:	7f ef       	ldi	r23, 0xFF	; 255
    3776:	c6 c1       	rjmp	.+908    	; 0x3b04 <vfprintf+0x3b0>
    3778:	9a e0       	ldi	r25, 0x0A	; 10
    377a:	89 2e       	mov	r8, r25
    377c:	1e 01       	movw	r2, r28
    377e:	08 94       	sec
    3780:	21 1c       	adc	r2, r1
    3782:	31 1c       	adc	r3, r1
    3784:	f3 01       	movw	r30, r6
    3786:	23 81       	ldd	r18, Z+3	; 0x03
    3788:	f2 01       	movw	r30, r4
    378a:	23 fd       	sbrc	r18, 3
    378c:	85 91       	lpm	r24, Z+
    378e:	23 ff       	sbrs	r18, 3
    3790:	81 91       	ld	r24, Z+
    3792:	2f 01       	movw	r4, r30
    3794:	88 23       	and	r24, r24
    3796:	09 f4       	brne	.+2      	; 0x379a <vfprintf+0x46>
    3798:	b2 c1       	rjmp	.+868    	; 0x3afe <vfprintf+0x3aa>
    379a:	85 32       	cpi	r24, 0x25	; 37
    379c:	39 f4       	brne	.+14     	; 0x37ac <vfprintf+0x58>
    379e:	23 fd       	sbrc	r18, 3
    37a0:	85 91       	lpm	r24, Z+
    37a2:	23 ff       	sbrs	r18, 3
    37a4:	81 91       	ld	r24, Z+
    37a6:	2f 01       	movw	r4, r30
    37a8:	85 32       	cpi	r24, 0x25	; 37
    37aa:	29 f4       	brne	.+10     	; 0x37b6 <vfprintf+0x62>
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	b3 01       	movw	r22, r6
    37b0:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    37b4:	e7 cf       	rjmp	.-50     	; 0x3784 <vfprintf+0x30>
    37b6:	98 2f       	mov	r25, r24
    37b8:	ff 24       	eor	r15, r15
    37ba:	ee 24       	eor	r14, r14
    37bc:	99 24       	eor	r9, r9
    37be:	ff e1       	ldi	r31, 0x1F	; 31
    37c0:	ff 15       	cp	r31, r15
    37c2:	d0 f0       	brcs	.+52     	; 0x37f8 <vfprintf+0xa4>
    37c4:	9b 32       	cpi	r25, 0x2B	; 43
    37c6:	69 f0       	breq	.+26     	; 0x37e2 <vfprintf+0x8e>
    37c8:	9c 32       	cpi	r25, 0x2C	; 44
    37ca:	28 f4       	brcc	.+10     	; 0x37d6 <vfprintf+0x82>
    37cc:	90 32       	cpi	r25, 0x20	; 32
    37ce:	59 f0       	breq	.+22     	; 0x37e6 <vfprintf+0x92>
    37d0:	93 32       	cpi	r25, 0x23	; 35
    37d2:	91 f4       	brne	.+36     	; 0x37f8 <vfprintf+0xa4>
    37d4:	0e c0       	rjmp	.+28     	; 0x37f2 <vfprintf+0x9e>
    37d6:	9d 32       	cpi	r25, 0x2D	; 45
    37d8:	49 f0       	breq	.+18     	; 0x37ec <vfprintf+0x98>
    37da:	90 33       	cpi	r25, 0x30	; 48
    37dc:	69 f4       	brne	.+26     	; 0x37f8 <vfprintf+0xa4>
    37de:	41 e0       	ldi	r20, 0x01	; 1
    37e0:	24 c0       	rjmp	.+72     	; 0x382a <vfprintf+0xd6>
    37e2:	52 e0       	ldi	r21, 0x02	; 2
    37e4:	f5 2a       	or	r15, r21
    37e6:	84 e0       	ldi	r24, 0x04	; 4
    37e8:	f8 2a       	or	r15, r24
    37ea:	28 c0       	rjmp	.+80     	; 0x383c <vfprintf+0xe8>
    37ec:	98 e0       	ldi	r25, 0x08	; 8
    37ee:	f9 2a       	or	r15, r25
    37f0:	25 c0       	rjmp	.+74     	; 0x383c <vfprintf+0xe8>
    37f2:	e0 e1       	ldi	r30, 0x10	; 16
    37f4:	fe 2a       	or	r15, r30
    37f6:	22 c0       	rjmp	.+68     	; 0x383c <vfprintf+0xe8>
    37f8:	f7 fc       	sbrc	r15, 7
    37fa:	29 c0       	rjmp	.+82     	; 0x384e <vfprintf+0xfa>
    37fc:	89 2f       	mov	r24, r25
    37fe:	80 53       	subi	r24, 0x30	; 48
    3800:	8a 30       	cpi	r24, 0x0A	; 10
    3802:	70 f4       	brcc	.+28     	; 0x3820 <vfprintf+0xcc>
    3804:	f6 fe       	sbrs	r15, 6
    3806:	05 c0       	rjmp	.+10     	; 0x3812 <vfprintf+0xbe>
    3808:	98 9c       	mul	r9, r8
    380a:	90 2c       	mov	r9, r0
    380c:	11 24       	eor	r1, r1
    380e:	98 0e       	add	r9, r24
    3810:	15 c0       	rjmp	.+42     	; 0x383c <vfprintf+0xe8>
    3812:	e8 9c       	mul	r14, r8
    3814:	e0 2c       	mov	r14, r0
    3816:	11 24       	eor	r1, r1
    3818:	e8 0e       	add	r14, r24
    381a:	f0 e2       	ldi	r31, 0x20	; 32
    381c:	ff 2a       	or	r15, r31
    381e:	0e c0       	rjmp	.+28     	; 0x383c <vfprintf+0xe8>
    3820:	9e 32       	cpi	r25, 0x2E	; 46
    3822:	29 f4       	brne	.+10     	; 0x382e <vfprintf+0xda>
    3824:	f6 fc       	sbrc	r15, 6
    3826:	6b c1       	rjmp	.+726    	; 0x3afe <vfprintf+0x3aa>
    3828:	40 e4       	ldi	r20, 0x40	; 64
    382a:	f4 2a       	or	r15, r20
    382c:	07 c0       	rjmp	.+14     	; 0x383c <vfprintf+0xe8>
    382e:	9c 36       	cpi	r25, 0x6C	; 108
    3830:	19 f4       	brne	.+6      	; 0x3838 <vfprintf+0xe4>
    3832:	50 e8       	ldi	r21, 0x80	; 128
    3834:	f5 2a       	or	r15, r21
    3836:	02 c0       	rjmp	.+4      	; 0x383c <vfprintf+0xe8>
    3838:	98 36       	cpi	r25, 0x68	; 104
    383a:	49 f4       	brne	.+18     	; 0x384e <vfprintf+0xfa>
    383c:	f2 01       	movw	r30, r4
    383e:	23 fd       	sbrc	r18, 3
    3840:	95 91       	lpm	r25, Z+
    3842:	23 ff       	sbrs	r18, 3
    3844:	91 91       	ld	r25, Z+
    3846:	2f 01       	movw	r4, r30
    3848:	99 23       	and	r25, r25
    384a:	09 f0       	breq	.+2      	; 0x384e <vfprintf+0xfa>
    384c:	b8 cf       	rjmp	.-144    	; 0x37be <vfprintf+0x6a>
    384e:	89 2f       	mov	r24, r25
    3850:	85 54       	subi	r24, 0x45	; 69
    3852:	83 30       	cpi	r24, 0x03	; 3
    3854:	18 f0       	brcs	.+6      	; 0x385c <vfprintf+0x108>
    3856:	80 52       	subi	r24, 0x20	; 32
    3858:	83 30       	cpi	r24, 0x03	; 3
    385a:	38 f4       	brcc	.+14     	; 0x386a <vfprintf+0x116>
    385c:	44 e0       	ldi	r20, 0x04	; 4
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	a4 0e       	add	r10, r20
    3862:	b5 1e       	adc	r11, r21
    3864:	5f e3       	ldi	r21, 0x3F	; 63
    3866:	59 83       	std	Y+1, r21	; 0x01
    3868:	0f c0       	rjmp	.+30     	; 0x3888 <vfprintf+0x134>
    386a:	93 36       	cpi	r25, 0x63	; 99
    386c:	31 f0       	breq	.+12     	; 0x387a <vfprintf+0x126>
    386e:	93 37       	cpi	r25, 0x73	; 115
    3870:	79 f0       	breq	.+30     	; 0x3890 <vfprintf+0x13c>
    3872:	93 35       	cpi	r25, 0x53	; 83
    3874:	09 f0       	breq	.+2      	; 0x3878 <vfprintf+0x124>
    3876:	56 c0       	rjmp	.+172    	; 0x3924 <vfprintf+0x1d0>
    3878:	20 c0       	rjmp	.+64     	; 0x38ba <vfprintf+0x166>
    387a:	f5 01       	movw	r30, r10
    387c:	80 81       	ld	r24, Z
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	42 e0       	ldi	r20, 0x02	; 2
    3882:	50 e0       	ldi	r21, 0x00	; 0
    3884:	a4 0e       	add	r10, r20
    3886:	b5 1e       	adc	r11, r21
    3888:	61 01       	movw	r12, r2
    388a:	01 e0       	ldi	r16, 0x01	; 1
    388c:	10 e0       	ldi	r17, 0x00	; 0
    388e:	12 c0       	rjmp	.+36     	; 0x38b4 <vfprintf+0x160>
    3890:	f5 01       	movw	r30, r10
    3892:	c0 80       	ld	r12, Z
    3894:	d1 80       	ldd	r13, Z+1	; 0x01
    3896:	f6 fc       	sbrc	r15, 6
    3898:	03 c0       	rjmp	.+6      	; 0x38a0 <vfprintf+0x14c>
    389a:	6f ef       	ldi	r22, 0xFF	; 255
    389c:	7f ef       	ldi	r23, 0xFF	; 255
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <vfprintf+0x150>
    38a0:	69 2d       	mov	r22, r9
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	42 e0       	ldi	r20, 0x02	; 2
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	a4 0e       	add	r10, r20
    38aa:	b5 1e       	adc	r11, r21
    38ac:	c6 01       	movw	r24, r12
    38ae:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <strnlen>
    38b2:	8c 01       	movw	r16, r24
    38b4:	5f e7       	ldi	r21, 0x7F	; 127
    38b6:	f5 22       	and	r15, r21
    38b8:	14 c0       	rjmp	.+40     	; 0x38e2 <vfprintf+0x18e>
    38ba:	f5 01       	movw	r30, r10
    38bc:	c0 80       	ld	r12, Z
    38be:	d1 80       	ldd	r13, Z+1	; 0x01
    38c0:	f6 fc       	sbrc	r15, 6
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <vfprintf+0x176>
    38c4:	6f ef       	ldi	r22, 0xFF	; 255
    38c6:	7f ef       	ldi	r23, 0xFF	; 255
    38c8:	02 c0       	rjmp	.+4      	; 0x38ce <vfprintf+0x17a>
    38ca:	69 2d       	mov	r22, r9
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	42 e0       	ldi	r20, 0x02	; 2
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	a4 0e       	add	r10, r20
    38d4:	b5 1e       	adc	r11, r21
    38d6:	c6 01       	movw	r24, r12
    38d8:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <strnlen_P>
    38dc:	8c 01       	movw	r16, r24
    38de:	50 e8       	ldi	r21, 0x80	; 128
    38e0:	f5 2a       	or	r15, r21
    38e2:	f3 fe       	sbrs	r15, 3
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <vfprintf+0x1a0>
    38e6:	1a c0       	rjmp	.+52     	; 0x391c <vfprintf+0x1c8>
    38e8:	80 e2       	ldi	r24, 0x20	; 32
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	b3 01       	movw	r22, r6
    38ee:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    38f2:	ea 94       	dec	r14
    38f4:	8e 2d       	mov	r24, r14
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	08 17       	cp	r16, r24
    38fa:	19 07       	cpc	r17, r25
    38fc:	a8 f3       	brcs	.-22     	; 0x38e8 <vfprintf+0x194>
    38fe:	0e c0       	rjmp	.+28     	; 0x391c <vfprintf+0x1c8>
    3900:	f6 01       	movw	r30, r12
    3902:	f7 fc       	sbrc	r15, 7
    3904:	85 91       	lpm	r24, Z+
    3906:	f7 fe       	sbrs	r15, 7
    3908:	81 91       	ld	r24, Z+
    390a:	6f 01       	movw	r12, r30
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	b3 01       	movw	r22, r6
    3910:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3914:	e1 10       	cpse	r14, r1
    3916:	ea 94       	dec	r14
    3918:	01 50       	subi	r16, 0x01	; 1
    391a:	10 40       	sbci	r17, 0x00	; 0
    391c:	01 15       	cp	r16, r1
    391e:	11 05       	cpc	r17, r1
    3920:	79 f7       	brne	.-34     	; 0x3900 <vfprintf+0x1ac>
    3922:	ea c0       	rjmp	.+468    	; 0x3af8 <vfprintf+0x3a4>
    3924:	94 36       	cpi	r25, 0x64	; 100
    3926:	11 f0       	breq	.+4      	; 0x392c <vfprintf+0x1d8>
    3928:	99 36       	cpi	r25, 0x69	; 105
    392a:	69 f5       	brne	.+90     	; 0x3986 <vfprintf+0x232>
    392c:	f7 fe       	sbrs	r15, 7
    392e:	08 c0       	rjmp	.+16     	; 0x3940 <vfprintf+0x1ec>
    3930:	f5 01       	movw	r30, r10
    3932:	20 81       	ld	r18, Z
    3934:	31 81       	ldd	r19, Z+1	; 0x01
    3936:	42 81       	ldd	r20, Z+2	; 0x02
    3938:	53 81       	ldd	r21, Z+3	; 0x03
    393a:	84 e0       	ldi	r24, 0x04	; 4
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0a c0       	rjmp	.+20     	; 0x3954 <vfprintf+0x200>
    3940:	f5 01       	movw	r30, r10
    3942:	80 81       	ld	r24, Z
    3944:	91 81       	ldd	r25, Z+1	; 0x01
    3946:	9c 01       	movw	r18, r24
    3948:	44 27       	eor	r20, r20
    394a:	37 fd       	sbrc	r19, 7
    394c:	40 95       	com	r20
    394e:	54 2f       	mov	r21, r20
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	a8 0e       	add	r10, r24
    3956:	b9 1e       	adc	r11, r25
    3958:	9f e6       	ldi	r25, 0x6F	; 111
    395a:	f9 22       	and	r15, r25
    395c:	57 ff       	sbrs	r21, 7
    395e:	09 c0       	rjmp	.+18     	; 0x3972 <vfprintf+0x21e>
    3960:	50 95       	com	r21
    3962:	40 95       	com	r20
    3964:	30 95       	com	r19
    3966:	21 95       	neg	r18
    3968:	3f 4f       	sbci	r19, 0xFF	; 255
    396a:	4f 4f       	sbci	r20, 0xFF	; 255
    396c:	5f 4f       	sbci	r21, 0xFF	; 255
    396e:	e0 e8       	ldi	r30, 0x80	; 128
    3970:	fe 2a       	or	r15, r30
    3972:	ca 01       	movw	r24, r20
    3974:	b9 01       	movw	r22, r18
    3976:	a1 01       	movw	r20, r2
    3978:	2a e0       	ldi	r18, 0x0A	; 10
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__ultoa_invert>
    3980:	d8 2e       	mov	r13, r24
    3982:	d2 18       	sub	r13, r2
    3984:	40 c0       	rjmp	.+128    	; 0x3a06 <vfprintf+0x2b2>
    3986:	95 37       	cpi	r25, 0x75	; 117
    3988:	29 f4       	brne	.+10     	; 0x3994 <vfprintf+0x240>
    398a:	1f 2d       	mov	r17, r15
    398c:	1f 7e       	andi	r17, 0xEF	; 239
    398e:	2a e0       	ldi	r18, 0x0A	; 10
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	1d c0       	rjmp	.+58     	; 0x39ce <vfprintf+0x27a>
    3994:	1f 2d       	mov	r17, r15
    3996:	19 7f       	andi	r17, 0xF9	; 249
    3998:	9f 36       	cpi	r25, 0x6F	; 111
    399a:	61 f0       	breq	.+24     	; 0x39b4 <vfprintf+0x260>
    399c:	90 37       	cpi	r25, 0x70	; 112
    399e:	20 f4       	brcc	.+8      	; 0x39a8 <vfprintf+0x254>
    39a0:	98 35       	cpi	r25, 0x58	; 88
    39a2:	09 f0       	breq	.+2      	; 0x39a6 <vfprintf+0x252>
    39a4:	ac c0       	rjmp	.+344    	; 0x3afe <vfprintf+0x3aa>
    39a6:	0f c0       	rjmp	.+30     	; 0x39c6 <vfprintf+0x272>
    39a8:	90 37       	cpi	r25, 0x70	; 112
    39aa:	39 f0       	breq	.+14     	; 0x39ba <vfprintf+0x266>
    39ac:	98 37       	cpi	r25, 0x78	; 120
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <vfprintf+0x25e>
    39b0:	a6 c0       	rjmp	.+332    	; 0x3afe <vfprintf+0x3aa>
    39b2:	04 c0       	rjmp	.+8      	; 0x39bc <vfprintf+0x268>
    39b4:	28 e0       	ldi	r18, 0x08	; 8
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	0a c0       	rjmp	.+20     	; 0x39ce <vfprintf+0x27a>
    39ba:	10 61       	ori	r17, 0x10	; 16
    39bc:	14 fd       	sbrc	r17, 4
    39be:	14 60       	ori	r17, 0x04	; 4
    39c0:	20 e1       	ldi	r18, 0x10	; 16
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	04 c0       	rjmp	.+8      	; 0x39ce <vfprintf+0x27a>
    39c6:	14 fd       	sbrc	r17, 4
    39c8:	16 60       	ori	r17, 0x06	; 6
    39ca:	20 e1       	ldi	r18, 0x10	; 16
    39cc:	32 e0       	ldi	r19, 0x02	; 2
    39ce:	17 ff       	sbrs	r17, 7
    39d0:	08 c0       	rjmp	.+16     	; 0x39e2 <vfprintf+0x28e>
    39d2:	f5 01       	movw	r30, r10
    39d4:	60 81       	ld	r22, Z
    39d6:	71 81       	ldd	r23, Z+1	; 0x01
    39d8:	82 81       	ldd	r24, Z+2	; 0x02
    39da:	93 81       	ldd	r25, Z+3	; 0x03
    39dc:	44 e0       	ldi	r20, 0x04	; 4
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	08 c0       	rjmp	.+16     	; 0x39f2 <vfprintf+0x29e>
    39e2:	f5 01       	movw	r30, r10
    39e4:	80 81       	ld	r24, Z
    39e6:	91 81       	ldd	r25, Z+1	; 0x01
    39e8:	bc 01       	movw	r22, r24
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	42 e0       	ldi	r20, 0x02	; 2
    39f0:	50 e0       	ldi	r21, 0x00	; 0
    39f2:	a4 0e       	add	r10, r20
    39f4:	b5 1e       	adc	r11, r21
    39f6:	a1 01       	movw	r20, r2
    39f8:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__ultoa_invert>
    39fc:	d8 2e       	mov	r13, r24
    39fe:	d2 18       	sub	r13, r2
    3a00:	8f e7       	ldi	r24, 0x7F	; 127
    3a02:	f8 2e       	mov	r15, r24
    3a04:	f1 22       	and	r15, r17
    3a06:	f6 fe       	sbrs	r15, 6
    3a08:	0b c0       	rjmp	.+22     	; 0x3a20 <vfprintf+0x2cc>
    3a0a:	5e ef       	ldi	r21, 0xFE	; 254
    3a0c:	f5 22       	and	r15, r21
    3a0e:	d9 14       	cp	r13, r9
    3a10:	38 f4       	brcc	.+14     	; 0x3a20 <vfprintf+0x2cc>
    3a12:	f4 fe       	sbrs	r15, 4
    3a14:	07 c0       	rjmp	.+14     	; 0x3a24 <vfprintf+0x2d0>
    3a16:	f2 fc       	sbrc	r15, 2
    3a18:	05 c0       	rjmp	.+10     	; 0x3a24 <vfprintf+0x2d0>
    3a1a:	8f ee       	ldi	r24, 0xEF	; 239
    3a1c:	f8 22       	and	r15, r24
    3a1e:	02 c0       	rjmp	.+4      	; 0x3a24 <vfprintf+0x2d0>
    3a20:	1d 2d       	mov	r17, r13
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <vfprintf+0x2d2>
    3a24:	19 2d       	mov	r17, r9
    3a26:	f4 fe       	sbrs	r15, 4
    3a28:	0d c0       	rjmp	.+26     	; 0x3a44 <vfprintf+0x2f0>
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	ed 0d       	add	r30, r13
    3a2e:	f1 1d       	adc	r31, r1
    3a30:	80 81       	ld	r24, Z
    3a32:	80 33       	cpi	r24, 0x30	; 48
    3a34:	19 f4       	brne	.+6      	; 0x3a3c <vfprintf+0x2e8>
    3a36:	99 ee       	ldi	r25, 0xE9	; 233
    3a38:	f9 22       	and	r15, r25
    3a3a:	08 c0       	rjmp	.+16     	; 0x3a4c <vfprintf+0x2f8>
    3a3c:	1f 5f       	subi	r17, 0xFF	; 255
    3a3e:	f2 fe       	sbrs	r15, 2
    3a40:	05 c0       	rjmp	.+10     	; 0x3a4c <vfprintf+0x2f8>
    3a42:	03 c0       	rjmp	.+6      	; 0x3a4a <vfprintf+0x2f6>
    3a44:	8f 2d       	mov	r24, r15
    3a46:	86 78       	andi	r24, 0x86	; 134
    3a48:	09 f0       	breq	.+2      	; 0x3a4c <vfprintf+0x2f8>
    3a4a:	1f 5f       	subi	r17, 0xFF	; 255
    3a4c:	0f 2d       	mov	r16, r15
    3a4e:	f3 fc       	sbrc	r15, 3
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <vfprintf+0x326>
    3a52:	f0 fe       	sbrs	r15, 0
    3a54:	0f c0       	rjmp	.+30     	; 0x3a74 <vfprintf+0x320>
    3a56:	1e 15       	cp	r17, r14
    3a58:	10 f0       	brcs	.+4      	; 0x3a5e <vfprintf+0x30a>
    3a5a:	9d 2c       	mov	r9, r13
    3a5c:	0b c0       	rjmp	.+22     	; 0x3a74 <vfprintf+0x320>
    3a5e:	9d 2c       	mov	r9, r13
    3a60:	9e 0c       	add	r9, r14
    3a62:	91 1a       	sub	r9, r17
    3a64:	1e 2d       	mov	r17, r14
    3a66:	06 c0       	rjmp	.+12     	; 0x3a74 <vfprintf+0x320>
    3a68:	80 e2       	ldi	r24, 0x20	; 32
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	b3 01       	movw	r22, r6
    3a6e:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3a72:	1f 5f       	subi	r17, 0xFF	; 255
    3a74:	1e 15       	cp	r17, r14
    3a76:	c0 f3       	brcs	.-16     	; 0x3a68 <vfprintf+0x314>
    3a78:	04 c0       	rjmp	.+8      	; 0x3a82 <vfprintf+0x32e>
    3a7a:	1e 15       	cp	r17, r14
    3a7c:	10 f4       	brcc	.+4      	; 0x3a82 <vfprintf+0x32e>
    3a7e:	e1 1a       	sub	r14, r17
    3a80:	01 c0       	rjmp	.+2      	; 0x3a84 <vfprintf+0x330>
    3a82:	ee 24       	eor	r14, r14
    3a84:	04 ff       	sbrs	r16, 4
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <vfprintf+0x352>
    3a88:	80 e3       	ldi	r24, 0x30	; 48
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	b3 01       	movw	r22, r6
    3a8e:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3a92:	02 ff       	sbrs	r16, 2
    3a94:	1d c0       	rjmp	.+58     	; 0x3ad0 <vfprintf+0x37c>
    3a96:	01 fd       	sbrc	r16, 1
    3a98:	03 c0       	rjmp	.+6      	; 0x3aa0 <vfprintf+0x34c>
    3a9a:	88 e7       	ldi	r24, 0x78	; 120
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	0e c0       	rjmp	.+28     	; 0x3abc <vfprintf+0x368>
    3aa0:	88 e5       	ldi	r24, 0x58	; 88
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	0b c0       	rjmp	.+22     	; 0x3abc <vfprintf+0x368>
    3aa6:	80 2f       	mov	r24, r16
    3aa8:	86 78       	andi	r24, 0x86	; 134
    3aaa:	91 f0       	breq	.+36     	; 0x3ad0 <vfprintf+0x37c>
    3aac:	01 ff       	sbrs	r16, 1
    3aae:	02 c0       	rjmp	.+4      	; 0x3ab4 <vfprintf+0x360>
    3ab0:	8b e2       	ldi	r24, 0x2B	; 43
    3ab2:	01 c0       	rjmp	.+2      	; 0x3ab6 <vfprintf+0x362>
    3ab4:	80 e2       	ldi	r24, 0x20	; 32
    3ab6:	f7 fc       	sbrc	r15, 7
    3ab8:	8d e2       	ldi	r24, 0x2D	; 45
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	b3 01       	movw	r22, r6
    3abe:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3ac2:	06 c0       	rjmp	.+12     	; 0x3ad0 <vfprintf+0x37c>
    3ac4:	80 e3       	ldi	r24, 0x30	; 48
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	b3 01       	movw	r22, r6
    3aca:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3ace:	9a 94       	dec	r9
    3ad0:	d9 14       	cp	r13, r9
    3ad2:	c0 f3       	brcs	.-16     	; 0x3ac4 <vfprintf+0x370>
    3ad4:	da 94       	dec	r13
    3ad6:	f1 01       	movw	r30, r2
    3ad8:	ed 0d       	add	r30, r13
    3ada:	f1 1d       	adc	r31, r1
    3adc:	80 81       	ld	r24, Z
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	b3 01       	movw	r22, r6
    3ae2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3ae6:	dd 20       	and	r13, r13
    3ae8:	a9 f7       	brne	.-22     	; 0x3ad4 <vfprintf+0x380>
    3aea:	06 c0       	rjmp	.+12     	; 0x3af8 <vfprintf+0x3a4>
    3aec:	80 e2       	ldi	r24, 0x20	; 32
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	b3 01       	movw	r22, r6
    3af2:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <fputc>
    3af6:	ea 94       	dec	r14
    3af8:	ee 20       	and	r14, r14
    3afa:	c1 f7       	brne	.-16     	; 0x3aec <vfprintf+0x398>
    3afc:	43 ce       	rjmp	.-890    	; 0x3784 <vfprintf+0x30>
    3afe:	f3 01       	movw	r30, r6
    3b00:	66 81       	ldd	r22, Z+6	; 0x06
    3b02:	77 81       	ldd	r23, Z+7	; 0x07
    3b04:	cb 01       	movw	r24, r22
    3b06:	2b 96       	adiw	r28, 0x0b	; 11
    3b08:	e2 e1       	ldi	r30, 0x12	; 18
    3b0a:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__>

00003b0e <strnlen_P>:
    3b0e:	fc 01       	movw	r30, r24
    3b10:	05 90       	lpm	r0, Z+
    3b12:	61 50       	subi	r22, 0x01	; 1
    3b14:	70 40       	sbci	r23, 0x00	; 0
    3b16:	01 10       	cpse	r0, r1
    3b18:	d8 f7       	brcc	.-10     	; 0x3b10 <strnlen_P+0x2>
    3b1a:	80 95       	com	r24
    3b1c:	90 95       	com	r25
    3b1e:	8e 0f       	add	r24, r30
    3b20:	9f 1f       	adc	r25, r31
    3b22:	08 95       	ret

00003b24 <strnlen>:
    3b24:	fc 01       	movw	r30, r24
    3b26:	61 50       	subi	r22, 0x01	; 1
    3b28:	70 40       	sbci	r23, 0x00	; 0
    3b2a:	01 90       	ld	r0, Z+
    3b2c:	01 10       	cpse	r0, r1
    3b2e:	d8 f7       	brcc	.-10     	; 0x3b26 <strnlen+0x2>
    3b30:	80 95       	com	r24
    3b32:	90 95       	com	r25
    3b34:	8e 0f       	add	r24, r30
    3b36:	9f 1f       	adc	r25, r31
    3b38:	08 95       	ret

00003b3a <fputc>:
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	8c 01       	movw	r16, r24
    3b44:	eb 01       	movw	r28, r22
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	81 ff       	sbrs	r24, 1
    3b4a:	1b c0       	rjmp	.+54     	; 0x3b82 <fputc+0x48>
    3b4c:	82 ff       	sbrs	r24, 2
    3b4e:	0d c0       	rjmp	.+26     	; 0x3b6a <fputc+0x30>
    3b50:	2e 81       	ldd	r18, Y+6	; 0x06
    3b52:	3f 81       	ldd	r19, Y+7	; 0x07
    3b54:	8c 81       	ldd	r24, Y+4	; 0x04
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	28 17       	cp	r18, r24
    3b5a:	39 07       	cpc	r19, r25
    3b5c:	64 f4       	brge	.+24     	; 0x3b76 <fputc+0x3c>
    3b5e:	e8 81       	ld	r30, Y
    3b60:	f9 81       	ldd	r31, Y+1	; 0x01
    3b62:	01 93       	st	Z+, r16
    3b64:	f9 83       	std	Y+1, r31	; 0x01
    3b66:	e8 83       	st	Y, r30
    3b68:	06 c0       	rjmp	.+12     	; 0x3b76 <fputc+0x3c>
    3b6a:	e8 85       	ldd	r30, Y+8	; 0x08
    3b6c:	f9 85       	ldd	r31, Y+9	; 0x09
    3b6e:	80 2f       	mov	r24, r16
    3b70:	09 95       	icall
    3b72:	89 2b       	or	r24, r25
    3b74:	31 f4       	brne	.+12     	; 0x3b82 <fputc+0x48>
    3b76:	8e 81       	ldd	r24, Y+6	; 0x06
    3b78:	9f 81       	ldd	r25, Y+7	; 0x07
    3b7a:	01 96       	adiw	r24, 0x01	; 1
    3b7c:	9f 83       	std	Y+7, r25	; 0x07
    3b7e:	8e 83       	std	Y+6, r24	; 0x06
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <fputc+0x4c>
    3b82:	0f ef       	ldi	r16, 0xFF	; 255
    3b84:	1f ef       	ldi	r17, 0xFF	; 255
    3b86:	c8 01       	movw	r24, r16
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	08 95       	ret

00003b92 <__ultoa_invert>:
    3b92:	fa 01       	movw	r30, r20
    3b94:	aa 27       	eor	r26, r26
    3b96:	28 30       	cpi	r18, 0x08	; 8
    3b98:	51 f1       	breq	.+84     	; 0x3bee <__ultoa_invert+0x5c>
    3b9a:	20 31       	cpi	r18, 0x10	; 16
    3b9c:	81 f1       	breq	.+96     	; 0x3bfe <__ultoa_invert+0x6c>
    3b9e:	e8 94       	clt
    3ba0:	6f 93       	push	r22
    3ba2:	6e 7f       	andi	r22, 0xFE	; 254
    3ba4:	6e 5f       	subi	r22, 0xFE	; 254
    3ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    3baa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bac:	af 4f       	sbci	r26, 0xFF	; 255
    3bae:	b1 e0       	ldi	r27, 0x01	; 1
    3bb0:	3e d0       	rcall	.+124    	; 0x3c2e <__ultoa_invert+0x9c>
    3bb2:	b4 e0       	ldi	r27, 0x04	; 4
    3bb4:	3c d0       	rcall	.+120    	; 0x3c2e <__ultoa_invert+0x9c>
    3bb6:	67 0f       	add	r22, r23
    3bb8:	78 1f       	adc	r23, r24
    3bba:	89 1f       	adc	r24, r25
    3bbc:	9a 1f       	adc	r25, r26
    3bbe:	a1 1d       	adc	r26, r1
    3bc0:	68 0f       	add	r22, r24
    3bc2:	79 1f       	adc	r23, r25
    3bc4:	8a 1f       	adc	r24, r26
    3bc6:	91 1d       	adc	r25, r1
    3bc8:	a1 1d       	adc	r26, r1
    3bca:	6a 0f       	add	r22, r26
    3bcc:	71 1d       	adc	r23, r1
    3bce:	81 1d       	adc	r24, r1
    3bd0:	91 1d       	adc	r25, r1
    3bd2:	a1 1d       	adc	r26, r1
    3bd4:	20 d0       	rcall	.+64     	; 0x3c16 <__ultoa_invert+0x84>
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <__ultoa_invert+0x48>
    3bd8:	68 94       	set
    3bda:	3f 91       	pop	r19
    3bdc:	2a e0       	ldi	r18, 0x0A	; 10
    3bde:	26 9f       	mul	r18, r22
    3be0:	11 24       	eor	r1, r1
    3be2:	30 19       	sub	r19, r0
    3be4:	30 5d       	subi	r19, 0xD0	; 208
    3be6:	31 93       	st	Z+, r19
    3be8:	de f6       	brtc	.-74     	; 0x3ba0 <__ultoa_invert+0xe>
    3bea:	cf 01       	movw	r24, r30
    3bec:	08 95       	ret
    3bee:	46 2f       	mov	r20, r22
    3bf0:	47 70       	andi	r20, 0x07	; 7
    3bf2:	40 5d       	subi	r20, 0xD0	; 208
    3bf4:	41 93       	st	Z+, r20
    3bf6:	b3 e0       	ldi	r27, 0x03	; 3
    3bf8:	0f d0       	rcall	.+30     	; 0x3c18 <__ultoa_invert+0x86>
    3bfa:	c9 f7       	brne	.-14     	; 0x3bee <__ultoa_invert+0x5c>
    3bfc:	f6 cf       	rjmp	.-20     	; 0x3bea <__ultoa_invert+0x58>
    3bfe:	46 2f       	mov	r20, r22
    3c00:	4f 70       	andi	r20, 0x0F	; 15
    3c02:	40 5d       	subi	r20, 0xD0	; 208
    3c04:	4a 33       	cpi	r20, 0x3A	; 58
    3c06:	18 f0       	brcs	.+6      	; 0x3c0e <__ultoa_invert+0x7c>
    3c08:	49 5d       	subi	r20, 0xD9	; 217
    3c0a:	31 fd       	sbrc	r19, 1
    3c0c:	40 52       	subi	r20, 0x20	; 32
    3c0e:	41 93       	st	Z+, r20
    3c10:	02 d0       	rcall	.+4      	; 0x3c16 <__ultoa_invert+0x84>
    3c12:	a9 f7       	brne	.-22     	; 0x3bfe <__ultoa_invert+0x6c>
    3c14:	ea cf       	rjmp	.-44     	; 0x3bea <__ultoa_invert+0x58>
    3c16:	b4 e0       	ldi	r27, 0x04	; 4
    3c18:	a6 95       	lsr	r26
    3c1a:	97 95       	ror	r25
    3c1c:	87 95       	ror	r24
    3c1e:	77 95       	ror	r23
    3c20:	67 95       	ror	r22
    3c22:	ba 95       	dec	r27
    3c24:	c9 f7       	brne	.-14     	; 0x3c18 <__ultoa_invert+0x86>
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	61 05       	cpc	r22, r1
    3c2a:	71 05       	cpc	r23, r1
    3c2c:	08 95       	ret
    3c2e:	9b 01       	movw	r18, r22
    3c30:	ac 01       	movw	r20, r24
    3c32:	0a 2e       	mov	r0, r26
    3c34:	06 94       	lsr	r0
    3c36:	57 95       	ror	r21
    3c38:	47 95       	ror	r20
    3c3a:	37 95       	ror	r19
    3c3c:	27 95       	ror	r18
    3c3e:	ba 95       	dec	r27
    3c40:	c9 f7       	brne	.-14     	; 0x3c34 <__ultoa_invert+0xa2>
    3c42:	62 0f       	add	r22, r18
    3c44:	73 1f       	adc	r23, r19
    3c46:	84 1f       	adc	r24, r20
    3c48:	95 1f       	adc	r25, r21
    3c4a:	a0 1d       	adc	r26, r0
    3c4c:	08 95       	ret

00003c4e <_exit>:
    3c4e:	f8 94       	cli

00003c50 <__stop_program>:
    3c50:	ff cf       	rjmp	.-2      	; 0x3c50 <__stop_program>
